   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"term.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.destination,"aw",%nobits
  20              	destination:
  21 0000 00       		.space	1
  22              		.section	.bss.head,"aw",%nobits
  23              		.align	2
  26              	head:
  27 0000 00000000 		.space	4
  28              		.section	.rodata
  29              		.align	2
  30              	.LC0:
  31 0000 2000     		.ascii	" \000"
  32              		.section	.text.termRegisterCommandLineHandler,"ax",%progbits
  33              		.align	1
  34              		.global	termRegisterCommandLineHandler
  35              		.syntax unified
  36              		.thumb
  37              		.thumb_func
  38              		.fpu fpv4-sp-d16
  40              	termRegisterCommandLineHandler:
  41              	.LFB125:
  42              		.file 1 "../Sources/com/term.c"
   1:../Sources/com/term.c **** /**
   2:../Sources/com/term.c ****  *--------------------------------------------------------------------\n
   3:../Sources/com/term.c ****  *          HSLU T&A Hochschule Luzern Technik+Architektur            \n
   4:../Sources/com/term.c ****  *--------------------------------------------------------------------\n
   5:../Sources/com/term.c ****  *
   6:../Sources/com/term.c ****  * \brief         terminal program
   7:../Sources/com/term.c ****  * \file
   8:../Sources/com/term.c ****  * \author        Christian Jost, christian.jost@hslu.ch
   9:../Sources/com/term.c ****  * \date          19.03.2018
  10:../Sources/com/term.c ****  *
  11:../Sources/com/term.c ****  * $Id: term.c 85 2018-04-16 16:01:53Z zajost $
  12:../Sources/com/term.c ****  *
  13:../Sources/com/term.c ****  *--------------------------------------------------------------------
  14:../Sources/com/term.c ****  */
  15:../Sources/com/term.c **** #include "platform.h"
  16:../Sources/com/term.c **** #include "term.h"
  17:../Sources/com/term.c **** #include "uart.h"
  18:../Sources/com/term.c **** #include "string.h"
  19:../Sources/com/term.c **** #include "util.h"
  20:../Sources/com/term.c **** 
  21:../Sources/com/term.c **** typedef enum
  22:../Sources/com/term.c **** {
  23:../Sources/com/term.c ****   uart0 = 1,
  24:../Sources/com/term.c ****   uart1 = 2,
  25:../Sources/com/term.c ****   lpuart0 = 4,
  26:../Sources/com/term.c ****   uartAll = (uart0 | uart1 | lpuart0)
  27:../Sources/com/term.c **** } tUart;
  28:../Sources/com/term.c **** 
  29:../Sources/com/term.c **** 
  30:../Sources/com/term.c **** 
  31:../Sources/com/term.c **** 
  32:../Sources/com/term.c **** static tUart destination;
  33:../Sources/com/term.c **** static tCommandLineHandler *head = NULL;
  34:../Sources/com/term.c **** 
  35:../Sources/com/term.c **** void termRegisterCommandLineHandler(tCommandLineHandler *clh, unsigned char* cmd, unsigned char *cm
  36:../Sources/com/term.c **** {
  43              		.loc 1 36 0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 16
  46              		@ frame_needed = 1, uses_anonymous_args = 0
  47 0000 90B5     		push	{r4, r7, lr}
  48              		.cfi_def_cfa_offset 12
  49              		.cfi_offset 4, -12
  50              		.cfi_offset 7, -8
  51              		.cfi_offset 14, -4
  52 0002 85B0     		sub	sp, sp, #20
  53              		.cfi_def_cfa_offset 32
  54 0004 00AF     		add	r7, sp, #0
  55              		.cfi_def_cfa_register 7
  56 0006 F860     		str	r0, [r7, #12]
  57 0008 B960     		str	r1, [r7, #8]
  58 000a 7A60     		str	r2, [r7, #4]
  59 000c 3B60     		str	r3, [r7]
  37:../Sources/com/term.c ****   clh->next = head;
  60              		.loc 1 37 0
  61 000e 134B     		ldr	r3, .L2
  62 0010 1A68     		ldr	r2, [r3]
  63 0012 FB68     		ldr	r3, [r7, #12]
  64 0014 5A63     		str	r2, [r3, #52]
  38:../Sources/com/term.c ****   head = clh;
  65              		.loc 1 38 0
  66 0016 114A     		ldr	r2, .L2
  67 0018 FB68     		ldr	r3, [r7, #12]
  68 001a 1360     		str	r3, [r2]
  39:../Sources/com/term.c **** 
  40:../Sources/com/term.c ****   strncpy(clh->cmd, cmd, sizeof(clh->cmd));
  69              		.loc 1 40 0
  70 001c FB68     		ldr	r3, [r7, #12]
  71 001e 1022     		movs	r2, #16
  72 0020 B968     		ldr	r1, [r7, #8]
  73 0022 1846     		mov	r0, r3
  74 0024 FFF7FEFF 		bl	strncpy
  41:../Sources/com/term.c ****   strcat(clh->cmd, " ");
  75              		.loc 1 41 0
  76 0028 FC68     		ldr	r4, [r7, #12]
  77 002a 2046     		mov	r0, r4
  78 002c FFF7FEFF 		bl	strlen
  79 0030 0346     		mov	r3, r0
  80 0032 2344     		add	r3, r3, r4
  81 0034 0A49     		ldr	r1, .L2+4
  82 0036 1A46     		mov	r2, r3
  83 0038 0B46     		mov	r3, r1
  84 003a 1B88     		ldrh	r3, [r3]	@ unaligned
  85 003c 1380     		strh	r3, [r2]	@ unaligned
  42:../Sources/com/term.c ****   strncpy(clh->cmdDesc, cmdDesc, sizeof(clh->cmdDesc));
  86              		.loc 1 42 0
  87 003e FB68     		ldr	r3, [r7, #12]
  88 0040 1033     		adds	r3, r3, #16
  89 0042 2022     		movs	r2, #32
  90 0044 7968     		ldr	r1, [r7, #4]
  91 0046 1846     		mov	r0, r3
  92 0048 FFF7FEFF 		bl	strncpy
  43:../Sources/com/term.c ****   clh->cmdHandler = h;
  93              		.loc 1 43 0
  94 004c FB68     		ldr	r3, [r7, #12]
  95 004e 3A68     		ldr	r2, [r7]
  96 0050 1A63     		str	r2, [r3, #48]
  44:../Sources/com/term.c **** }
  97              		.loc 1 44 0
  98 0052 00BF     		nop
  99 0054 1437     		adds	r7, r7, #20
 100              		.cfi_def_cfa_offset 12
 101 0056 BD46     		mov	sp, r7
 102              		.cfi_def_cfa_register 13
 103              		@ sp needed
 104 0058 90BD     		pop	{r4, r7, pc}
 105              	.L3:
 106 005a 00BF     		.align	2
 107              	.L2:
 108 005c 00000000 		.word	head
 109 0060 00000000 		.word	.LC0
 110              		.cfi_endproc
 111              	.LFE125:
 113              		.section	.text.termWriteChar,"ax",%progbits
 114              		.align	1
 115              		.global	termWriteChar
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu fpv4-sp-d16
 121              	termWriteChar:
 122              	.LFB126:
  45:../Sources/com/term.c **** 
  46:../Sources/com/term.c **** /**
  47:../Sources/com/term.c ****  * Writes a character to the uart
  48:../Sources/com/term.c ****  * The output is sent to the uart which received the last command
  49:../Sources/com/term.c ****  *
  50:../Sources/com/term.c ****  * @param[in] ch
  51:../Sources/com/term.c ****  *   the character to send
  52:../Sources/com/term.c ****  */
  53:../Sources/com/term.c **** void termWriteChar(char ch)
  54:../Sources/com/term.c **** {
 123              		.loc 1 54 0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 8
 126              		@ frame_needed = 1, uses_anonymous_args = 0
 127 0000 80B5     		push	{r7, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 82B0     		sub	sp, sp, #8
 132              		.cfi_def_cfa_offset 16
 133 0004 00AF     		add	r7, sp, #0
 134              		.cfi_def_cfa_register 7
 135 0006 0346     		mov	r3, r0
 136 0008 FB71     		strb	r3, [r7, #7]
  55:../Sources/com/term.c ****   if (TGT_IS_MCCAR)
 137              		.loc 1 55 0
 138 000a 0E4B     		ldr	r3, .L7
 139 000c 03F58153 		add	r3, r3, #4128
 140 0010 0433     		adds	r3, r3, #4
 141 0012 1B68     		ldr	r3, [r3]
  56:../Sources/com/term.c ****   {
  57:../Sources/com/term.c ****     // check if uart0 is enabled
  58:../Sources/com/term.c ****     #if (UART0_EN)
  59:../Sources/com/term.c ****       if (destination & uart0) uart0WriteChar(ch);
  60:../Sources/com/term.c ****     #endif
  61:../Sources/com/term.c **** 
  62:../Sources/com/term.c ****     // check if lpuart0 is enabled
  63:../Sources/com/term.c ****     #if (LPUART0_EN)
  64:../Sources/com/term.c ****       if (destination & lpuart0) lpuart0WriteChar(ch);
  65:../Sources/com/term.c ****     #endif
  66:../Sources/com/term.c ****   }
  67:../Sources/com/term.c **** 
  68:../Sources/com/term.c ****   if (TGT_IS_TINYK22)
 142              		.loc 1 68 0
 143 0014 0B4B     		ldr	r3, .L7
 144 0016 03F58153 		add	r3, r3, #4128
 145 001a 0433     		adds	r3, r3, #4
 146 001c 1B68     		ldr	r3, [r3]
 147 001e 03F00F03 		and	r3, r3, #15
 148 0022 052B     		cmp	r3, #5
 149 0024 0AD1     		bne	.L6
  69:../Sources/com/term.c ****   {
  70:../Sources/com/term.c ****     // check if uart1 is enabled
  71:../Sources/com/term.c ****     #if (UART1_EN)
  72:../Sources/com/term.c ****       if (destination & uart1) uart1WriteChar(ch);
 150              		.loc 1 72 0
 151 0026 084B     		ldr	r3, .L7+4
 152 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 153 002a 03F00203 		and	r3, r3, #2
 154 002e 002B     		cmp	r3, #0
 155 0030 04D0     		beq	.L6
 156              		.loc 1 72 0 is_stmt 0 discriminator 1
 157 0032 97F90730 		ldrsb	r3, [r7, #7]
 158 0036 1846     		mov	r0, r3
 159 0038 FFF7FEFF 		bl	uart1WriteChar
 160              	.L6:
  73:../Sources/com/term.c ****     #endif
  74:../Sources/com/term.c ****   }
  75:../Sources/com/term.c **** }
 161              		.loc 1 75 0 is_stmt 1
 162 003c 00BF     		nop
 163 003e 0837     		adds	r7, r7, #8
 164              		.cfi_def_cfa_offset 8
 165 0040 BD46     		mov	sp, r7
 166              		.cfi_def_cfa_register 13
 167              		@ sp needed
 168 0042 80BD     		pop	{r7, pc}
 169              	.L8:
 170              		.align	2
 171              	.L7:
 172 0044 00700440 		.word	1074032640
 173 0048 00000000 		.word	destination
 174              		.cfi_endproc
 175              	.LFE126:
 177              		.section	.text.termWrite,"ax",%progbits
 178              		.align	1
 179              		.global	termWrite
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu fpv4-sp-d16
 185              	termWrite:
 186              	.LFB127:
  76:../Sources/com/term.c **** 
  77:../Sources/com/term.c **** /**
  78:../Sources/com/term.c ****  * Writes a null terminated string in the send buffer. If the
  79:../Sources/com/term.c ****  * string is null, the function returns immediately.
  80:../Sources/com/term.c ****  *
  81:../Sources/com/term.c ****  * @param[in] str
  82:../Sources/com/term.c ****  *   the null terminated string to send
  83:../Sources/com/term.c ****  */
  84:../Sources/com/term.c **** void termWrite(const char *str)
  85:../Sources/com/term.c **** {
 187              		.loc 1 85 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 82B0     		sub	sp, sp, #8
 196              		.cfi_def_cfa_offset 16
 197 0004 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 199 0006 7860     		str	r0, [r7, #4]
  86:../Sources/com/term.c ****   if (str == NULL) return;
 200              		.loc 1 86 0
 201 0008 7B68     		ldr	r3, [r7, #4]
 202 000a 002B     		cmp	r3, #0
 203 000c 0ED0     		beq	.L14
  87:../Sources/com/term.c ****   while (*str != '\0') termWriteChar(*str++);
 204              		.loc 1 87 0
 205 000e 07E0     		b	.L12
 206              	.L13:
 207              		.loc 1 87 0 is_stmt 0 discriminator 2
 208 0010 7B68     		ldr	r3, [r7, #4]
 209 0012 5A1C     		adds	r2, r3, #1
 210 0014 7A60     		str	r2, [r7, #4]
 211 0016 93F90030 		ldrsb	r3, [r3]
 212 001a 1846     		mov	r0, r3
 213 001c FFF7FEFF 		bl	termWriteChar
 214              	.L12:
 215              		.loc 1 87 0 discriminator 1
 216 0020 7B68     		ldr	r3, [r7, #4]
 217 0022 93F90030 		ldrsb	r3, [r3]
 218 0026 002B     		cmp	r3, #0
 219 0028 F2D1     		bne	.L13
 220 002a 00E0     		b	.L9
 221              	.L14:
  86:../Sources/com/term.c ****   if (str == NULL) return;
 222              		.loc 1 86 0 is_stmt 1
 223 002c 00BF     		nop
 224              	.L9:
  88:../Sources/com/term.c **** }
 225              		.loc 1 88 0
 226 002e 0837     		adds	r7, r7, #8
 227              		.cfi_def_cfa_offset 8
 228 0030 BD46     		mov	sp, r7
 229              		.cfi_def_cfa_register 13
 230              		@ sp needed
 231 0032 80BD     		pop	{r7, pc}
 232              		.cfi_endproc
 233              	.LFE127:
 235              		.section	.text.termWriteNum32s,"ax",%progbits
 236              		.align	1
 237              		.global	termWriteNum32s
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	termWriteNum32s:
 244              	.LFB128:
  89:../Sources/com/term.c **** 
  90:../Sources/com/term.c **** void termWriteNum32s(int32_t value)
  91:../Sources/com/term.c **** {
 245              		.loc 1 91 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 24
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249 0000 80B5     		push	{r7, lr}
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253 0002 86B0     		sub	sp, sp, #24
 254              		.cfi_def_cfa_offset 32
 255 0004 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
 257 0006 7860     		str	r0, [r7, #4]
  92:../Sources/com/term.c ****   char str[sizeof("-2147483648")];
  93:../Sources/com/term.c ****   utilNum32sToStr(str, sizeof(str), value);
 258              		.loc 1 93 0
 259 0008 07F10C03 		add	r3, r7, #12
 260 000c 7A68     		ldr	r2, [r7, #4]
 261 000e 0C21     		movs	r1, #12
 262 0010 1846     		mov	r0, r3
 263 0012 FFF7FEFF 		bl	utilNum32sToStr
  94:../Sources/com/term.c ****   termWrite(str);
 264              		.loc 1 94 0
 265 0016 07F10C03 		add	r3, r7, #12
 266 001a 1846     		mov	r0, r3
 267 001c FFF7FEFF 		bl	termWrite
  95:../Sources/com/term.c **** }
 268              		.loc 1 95 0
 269 0020 00BF     		nop
 270 0022 1837     		adds	r7, r7, #24
 271              		.cfi_def_cfa_offset 8
 272 0024 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 0026 80BD     		pop	{r7, pc}
 276              		.cfi_endproc
 277              	.LFE128:
 279              		.section	.text.termWriteNum16s,"ax",%progbits
 280              		.align	1
 281              		.global	termWriteNum16s
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	termWriteNum16s:
 288              	.LFB129:
  96:../Sources/com/term.c **** 
  97:../Sources/com/term.c **** void termWriteNum16s(int16_t value)
  98:../Sources/com/term.c **** {
 289              		.loc 1 98 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 84B0     		sub	sp, sp, #16
 298              		.cfi_def_cfa_offset 24
 299 0004 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 301 0006 0346     		mov	r3, r0
 302 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  99:../Sources/com/term.c ****   char str[sizeof("-32768")];
 100:../Sources/com/term.c ****   utilNum16sToStr(str, sizeof(str), value);
 303              		.loc 1 100 0
 304 000a B7F90620 		ldrsh	r2, [r7, #6]
 305 000e 07F10803 		add	r3, r7, #8
 306 0012 0721     		movs	r1, #7
 307 0014 1846     		mov	r0, r3
 308 0016 FFF7FEFF 		bl	utilNum16sToStr
 101:../Sources/com/term.c ****   termWrite(str);
 309              		.loc 1 101 0
 310 001a 07F10803 		add	r3, r7, #8
 311 001e 1846     		mov	r0, r3
 312 0020 FFF7FEFF 		bl	termWrite
 102:../Sources/com/term.c **** }
 313              		.loc 1 102 0
 314 0024 00BF     		nop
 315 0026 1037     		adds	r7, r7, #16
 316              		.cfi_def_cfa_offset 8
 317 0028 BD46     		mov	sp, r7
 318              		.cfi_def_cfa_register 13
 319              		@ sp needed
 320 002a 80BD     		pop	{r7, pc}
 321              		.cfi_endproc
 322              	.LFE129:
 324              		.section	.text.termWriteLine,"ax",%progbits
 325              		.align	1
 326              		.global	termWriteLine
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	termWriteLine:
 333              	.LFB130:
 103:../Sources/com/term.c **** 
 104:../Sources/com/term.c **** /**
 105:../Sources/com/term.c ****  * Writes a null terminated string in the send buffer. If the
 106:../Sources/com/term.c ****  * string is null, only a new new line character is sent.
 107:../Sources/com/term.c ****  *
 108:../Sources/com/term.c ****  * @param[in] str
 109:../Sources/com/term.c ****  *   the null terminated string to send
 110:../Sources/com/term.c ****  */
 111:../Sources/com/term.c **** void termWriteLine(const char *str)
 112:../Sources/com/term.c **** {
 334              		.loc 1 112 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338 0000 80B5     		push	{r7, lr}
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 82B0     		sub	sp, sp, #8
 343              		.cfi_def_cfa_offset 16
 344 0004 00AF     		add	r7, sp, #0
 345              		.cfi_def_cfa_register 7
 346 0006 7860     		str	r0, [r7, #4]
 113:../Sources/com/term.c ****   termWrite(str);
 347              		.loc 1 113 0
 348 0008 7868     		ldr	r0, [r7, #4]
 349 000a FFF7FEFF 		bl	termWrite
 114:../Sources/com/term.c ****   termWriteChar(NEW_LINE);
 350              		.loc 1 114 0
 351 000e 0A20     		movs	r0, #10
 352 0010 FFF7FEFF 		bl	termWriteChar
 115:../Sources/com/term.c **** }
 353              		.loc 1 115 0
 354 0014 00BF     		nop
 355 0016 0837     		adds	r7, r7, #8
 356              		.cfi_def_cfa_offset 8
 357 0018 BD46     		mov	sp, r7
 358              		.cfi_def_cfa_register 13
 359              		@ sp needed
 360 001a 80BD     		pop	{r7, pc}
 361              		.cfi_endproc
 362              	.LFE130:
 364              		.section	.text.termWriteSubString,"ax",%progbits
 365              		.align	1
 366              		.global	termWriteSubString
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	termWriteSubString:
 373              	.LFB131:
 116:../Sources/com/term.c **** 
 117:../Sources/com/term.c **** /**
 118:../Sources/com/term.c ****  * Writes a substring in the send buffer.
 119:../Sources/com/term.c ****  *
 120:../Sources/com/term.c ****  * @param[in] str
 121:../Sources/com/term.c ****  *   the null terminated string to send
 122:../Sources/com/term.c ****  * @param[in] start
 123:../Sources/com/term.c ****  *   the start position of the substring to send
 124:../Sources/com/term.c ****  * @param[in] length
 125:../Sources/com/term.c ****  *   the number of characters to send
 126:../Sources/com/term.c ****  */
 127:../Sources/com/term.c **** void termWriteSubString(char *str, uint8_t start, uint8_t length)
 128:../Sources/com/term.c **** {
 374              		.loc 1 128 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 80B5     		push	{r7, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 7, -8
 381              		.cfi_offset 14, -4
 382 0002 82B0     		sub	sp, sp, #8
 383              		.cfi_def_cfa_offset 16
 384 0004 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 386 0006 7860     		str	r0, [r7, #4]
 387 0008 0B46     		mov	r3, r1
 388 000a FB70     		strb	r3, [r7, #3]
 389 000c 1346     		mov	r3, r2
 390 000e BB70     		strb	r3, [r7, #2]
 129:../Sources/com/term.c ****   str += start;
 391              		.loc 1 129 0
 392 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 393 0012 7A68     		ldr	r2, [r7, #4]
 394 0014 1344     		add	r3, r3, r2
 395 0016 7B60     		str	r3, [r7, #4]
 130:../Sources/com/term.c ****   while(length--) termWriteChar(*str++);
 396              		.loc 1 130 0
 397 0018 07E0     		b	.L19
 398              	.L20:
 399              		.loc 1 130 0 is_stmt 0 discriminator 2
 400 001a 7B68     		ldr	r3, [r7, #4]
 401 001c 5A1C     		adds	r2, r3, #1
 402 001e 7A60     		str	r2, [r7, #4]
 403 0020 93F90030 		ldrsb	r3, [r3]
 404 0024 1846     		mov	r0, r3
 405 0026 FFF7FEFF 		bl	termWriteChar
 406              	.L19:
 407              		.loc 1 130 0 discriminator 1
 408 002a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 409 002c 5A1E     		subs	r2, r3, #1
 410 002e BA70     		strb	r2, [r7, #2]
 411 0030 002B     		cmp	r3, #0
 412 0032 F2D1     		bne	.L20
 131:../Sources/com/term.c **** }
 413              		.loc 1 131 0 is_stmt 1
 414 0034 00BF     		nop
 415 0036 0837     		adds	r7, r7, #8
 416              		.cfi_def_cfa_offset 8
 417 0038 BD46     		mov	sp, r7
 418              		.cfi_def_cfa_register 13
 419              		@ sp needed
 420 003a 80BD     		pop	{r7, pc}
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.rodata
 425 0002 0000     		.align	2
 426              	.LC1:
 427 0004 68656C70 		.ascii	"help\000"
 427      00
 428 0009 000000   		.align	2
 429              	.LC2:
 430 000c 3E3E3E20 		.ascii	">>> MC-Car v2 terminal ready <<<\000"
 430      4D432D43 
 430      61722076 
 430      32207465 
 430      726D696E 
 431 002d 000000   		.align	2
 432              	.LC3:
 433 0030 76616C69 		.ascii	"valid commands are:\000"
 433      6420636F 
 433      6D6D616E 
 433      64732061 
 433      72653A00 
 434              		.align	2
 435              	.LC4:
 436 0044 202000   		.ascii	"  \000"
 437 0047 00       		.align	2
 438              	.LC5:
 439 0048 3A20636F 		.ascii	": command not found!\000"
 439      6D6D616E 
 439      64206E6F 
 439      7420666F 
 439      756E6421 
 440 005d 000000   		.align	2
 441              	.LC6:
 442 0060 4572726F 		.ascii	"Error Code: \000"
 442      7220436F 
 442      64653A20 
 442      00
 443 006d 000000   		.align	2
 444              	.LC7:
 445 0070 456E7465 		.ascii	"Enter '\000"
 445      72202700 
 446              		.align	2
 447              	.LC8:
 448 0078 68656C70 		.ascii	"help' for a list of valid commands.\000"
 448      2720666F 
 448      72206120 
 448      6C697374 
 448      206F6620 
 449              		.section	.text.termParseCommand,"ax",%progbits
 450              		.align	1
 451              		.global	termParseCommand
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu fpv4-sp-d16
 457              	termParseCommand:
 458              	.LFB132:
 132:../Sources/com/term.c **** 
 133:../Sources/com/term.c **** /**
 134:../Sources/com/term.c ****  * Parses one command line and executes the appropriate command.
 135:../Sources/com/term.c ****  *
 136:../Sources/com/term.c ****  * @param[in] cmd
 137:../Sources/com/term.c ****  *   the null terminated string to process
 138:../Sources/com/term.c ****  */
 139:../Sources/com/term.c **** void termParseCommand(char *cmd)
 140:../Sources/com/term.c **** {
 459              		.loc 1 140 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 32
 462              		@ frame_needed = 1, uses_anonymous_args = 0
 463 0000 90B5     		push	{r4, r7, lr}
 464              		.cfi_def_cfa_offset 12
 465              		.cfi_offset 4, -12
 466              		.cfi_offset 7, -8
 467              		.cfi_offset 14, -4
 468 0002 89B0     		sub	sp, sp, #36
 469              		.cfi_def_cfa_offset 48
 470 0004 00AF     		add	r7, sp, #0
 471              		.cfi_def_cfa_register 7
 472 0006 7860     		str	r0, [r7, #4]
 141:../Sources/com/term.c ****   uint8_t subCmdLength = 0;
 473              		.loc 1 141 0
 474 0008 0023     		movs	r3, #0
 475 000a FB77     		strb	r3, [r7, #31]
 142:../Sources/com/term.c ****   tError result = EC_INVALID_CMD;
 476              		.loc 1 142 0
 477 000c 0123     		movs	r3, #1
 478 000e BB77     		strb	r3, [r7, #30]
 143:../Sources/com/term.c ****   tCommandLineHandler *clh = head;
 479              		.loc 1 143 0
 480 0010 404B     		ldr	r3, .L31
 481 0012 1B68     		ldr	r3, [r3]
 482 0014 BB61     		str	r3, [r7, #24]
 144:../Sources/com/term.c ****   char buf[16];
 145:../Sources/com/term.c **** 
 146:../Sources/com/term.c ****   if (strcmp(cmd, "help") == 0)
 483              		.loc 1 146 0
 484 0016 4049     		ldr	r1, .L31+4
 485 0018 7868     		ldr	r0, [r7, #4]
 486 001a FFF7FEFF 		bl	strcmp
 487 001e 0346     		mov	r3, r0
 488 0020 002B     		cmp	r3, #0
 489 0022 46D1     		bne	.L26
 147:../Sources/com/term.c ****   {
 148:../Sources/com/term.c ****     termWriteLine(NULL);
 490              		.loc 1 148 0
 491 0024 0020     		movs	r0, #0
 492 0026 FFF7FEFF 		bl	termWriteLine
 149:../Sources/com/term.c ****     termWriteLine(">>> MC-Car v2 terminal ready <<<");
 493              		.loc 1 149 0
 494 002a 3C48     		ldr	r0, .L31+8
 495 002c FFF7FEFF 		bl	termWriteLine
 150:../Sources/com/term.c ****     termWriteLine("valid commands are:");
 496              		.loc 1 150 0
 497 0030 3B48     		ldr	r0, .L31+12
 498 0032 FFF7FEFF 		bl	termWriteLine
 151:../Sources/com/term.c ****     while(clh != NULL)
 499              		.loc 1 151 0
 500 0036 11E0     		b	.L23
 501              	.L24:
 152:../Sources/com/term.c ****     {
 153:../Sources/com/term.c ****       termWrite("  ");
 502              		.loc 1 153 0
 503 0038 3A48     		ldr	r0, .L31+16
 504 003a FFF7FEFF 		bl	termWrite
 154:../Sources/com/term.c ****       termWrite(clh->cmd);
 505              		.loc 1 154 0
 506 003e BB69     		ldr	r3, [r7, #24]
 507 0040 1846     		mov	r0, r3
 508 0042 FFF7FEFF 		bl	termWrite
 155:../Sources/com/term.c ****       termWrite(" ");
 509              		.loc 1 155 0
 510 0046 3848     		ldr	r0, .L31+20
 511 0048 FFF7FEFF 		bl	termWrite
 156:../Sources/com/term.c ****       termWriteLine(clh->cmdDesc);
 512              		.loc 1 156 0
 513 004c BB69     		ldr	r3, [r7, #24]
 514 004e 1033     		adds	r3, r3, #16
 515 0050 1846     		mov	r0, r3
 516 0052 FFF7FEFF 		bl	termWriteLine
 157:../Sources/com/term.c ****       clh = clh->next;
 517              		.loc 1 157 0
 518 0056 BB69     		ldr	r3, [r7, #24]
 519 0058 5B6B     		ldr	r3, [r3, #52]
 520 005a BB61     		str	r3, [r7, #24]
 521              	.L23:
 151:../Sources/com/term.c ****     {
 522              		.loc 1 151 0
 523 005c BB69     		ldr	r3, [r7, #24]
 524 005e 002B     		cmp	r3, #0
 525 0060 EAD1     		bne	.L24
 158:../Sources/com/term.c ****     }
 159:../Sources/com/term.c ****     result = EC_SUCCESS;
 526              		.loc 1 159 0
 527 0062 0023     		movs	r3, #0
 528 0064 BB77     		strb	r3, [r7, #30]
 529 0066 27E0     		b	.L25
 530              	.L28:
 160:../Sources/com/term.c ****   }
 161:../Sources/com/term.c ****   else
 162:../Sources/com/term.c ****   {
 163:../Sources/com/term.c ****     while(clh != NULL)
 164:../Sources/com/term.c ****     {
 165:../Sources/com/term.c ****       if (strncmp(cmd, clh->cmd, strlen(clh->cmd)) == 0)
 531              		.loc 1 165 0
 532 0068 BC69     		ldr	r4, [r7, #24]
 533 006a BB69     		ldr	r3, [r7, #24]
 534 006c 1846     		mov	r0, r3
 535 006e FFF7FEFF 		bl	strlen
 536 0072 0346     		mov	r3, r0
 537 0074 1A46     		mov	r2, r3
 538 0076 2146     		mov	r1, r4
 539 0078 7868     		ldr	r0, [r7, #4]
 540 007a FFF7FEFF 		bl	strncmp
 541 007e 0346     		mov	r3, r0
 542 0080 002B     		cmp	r3, #0
 543 0082 13D1     		bne	.L27
 166:../Sources/com/term.c ****       {
 167:../Sources/com/term.c ****         subCmdLength = strlen(clh->cmd);
 544              		.loc 1 167 0
 545 0084 BB69     		ldr	r3, [r7, #24]
 546 0086 1846     		mov	r0, r3
 547 0088 FFF7FEFF 		bl	strlen
 548 008c 0346     		mov	r3, r0
 549 008e FB77     		strb	r3, [r7, #31]
 168:../Sources/com/term.c ****         result = clh->cmdHandler(cmd + strlen(clh->cmd));
 550              		.loc 1 168 0
 551 0090 BB69     		ldr	r3, [r7, #24]
 552 0092 1C6B     		ldr	r4, [r3, #48]
 553 0094 BB69     		ldr	r3, [r7, #24]
 554 0096 1846     		mov	r0, r3
 555 0098 FFF7FEFF 		bl	strlen
 556 009c 0246     		mov	r2, r0
 557 009e 7B68     		ldr	r3, [r7, #4]
 558 00a0 1344     		add	r3, r3, r2
 559 00a2 1846     		mov	r0, r3
 560 00a4 A047     		blx	r4
 561              	.LVL0:
 562 00a6 0346     		mov	r3, r0
 563 00a8 BB77     		strb	r3, [r7, #30]
 169:../Sources/com/term.c ****         break;
 564              		.loc 1 169 0
 565 00aa 05E0     		b	.L25
 566              	.L27:
 170:../Sources/com/term.c ****       }
 171:../Sources/com/term.c ****       clh = clh->next;
 567              		.loc 1 171 0
 568 00ac BB69     		ldr	r3, [r7, #24]
 569 00ae 5B6B     		ldr	r3, [r3, #52]
 570 00b0 BB61     		str	r3, [r7, #24]
 571              	.L26:
 163:../Sources/com/term.c ****     {
 572              		.loc 1 163 0
 573 00b2 BB69     		ldr	r3, [r7, #24]
 574 00b4 002B     		cmp	r3, #0
 575 00b6 D7D1     		bne	.L28
 576              	.L25:
 172:../Sources/com/term.c ****     }
 173:../Sources/com/term.c ****   }
 174:../Sources/com/term.c **** 
 175:../Sources/com/term.c ****   if (result != EC_SUCCESS)
 577              		.loc 1 175 0
 578 00b8 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 579 00ba 002B     		cmp	r3, #0
 580 00bc 26D0     		beq	.L30
 176:../Sources/com/term.c ****   {
 177:../Sources/com/term.c ****     termWriteLine(NULL);
 581              		.loc 1 177 0
 582 00be 0020     		movs	r0, #0
 583 00c0 FFF7FEFF 		bl	termWriteLine
 178:../Sources/com/term.c ****     termWrite(cmd);
 584              		.loc 1 178 0
 585 00c4 7868     		ldr	r0, [r7, #4]
 586 00c6 FFF7FEFF 		bl	termWrite
 179:../Sources/com/term.c ****     termWriteLine(": command not found!");
 587              		.loc 1 179 0
 588 00ca 1848     		ldr	r0, .L31+24
 589 00cc FFF7FEFF 		bl	termWriteLine
 180:../Sources/com/term.c ****     termWrite("Error Code: ");
 590              		.loc 1 180 0
 591 00d0 1748     		ldr	r0, .L31+28
 592 00d2 FFF7FEFF 		bl	termWrite
 181:../Sources/com/term.c ****     buf[0] = '\0';
 593              		.loc 1 181 0
 594 00d6 0023     		movs	r3, #0
 595 00d8 3B72     		strb	r3, [r7, #8]
 182:../Sources/com/term.c ****     utilNum16uToStr(buf, sizeof(buf), result);
 596              		.loc 1 182 0
 597 00da BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 598 00dc 9AB2     		uxth	r2, r3
 599 00de 07F10803 		add	r3, r7, #8
 600 00e2 1021     		movs	r1, #16
 601 00e4 1846     		mov	r0, r3
 602 00e6 FFF7FEFF 		bl	utilNum16uToStr
 183:../Sources/com/term.c ****     termWriteLine(buf);
 603              		.loc 1 183 0
 604 00ea 07F10803 		add	r3, r7, #8
 605 00ee 1846     		mov	r0, r3
 606 00f0 FFF7FEFF 		bl	termWriteLine
 184:../Sources/com/term.c ****     termWrite("Enter '");
 607              		.loc 1 184 0
 608 00f4 0F48     		ldr	r0, .L31+32
 609 00f6 FFF7FEFF 		bl	termWrite
 185:../Sources/com/term.c ****     termWriteSubString(cmd, 0, subCmdLength);
 610              		.loc 1 185 0
 611 00fa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 612 00fc 1A46     		mov	r2, r3
 613 00fe 0021     		movs	r1, #0
 614 0100 7868     		ldr	r0, [r7, #4]
 615 0102 FFF7FEFF 		bl	termWriteSubString
 186:../Sources/com/term.c ****     termWriteLine("help' for a list of valid commands.");
 616              		.loc 1 186 0
 617 0106 0C48     		ldr	r0, .L31+36
 618 0108 FFF7FEFF 		bl	termWriteLine
 619              	.L30:
 187:../Sources/com/term.c ****   }
 188:../Sources/com/term.c **** }
 620              		.loc 1 188 0
 621 010c 00BF     		nop
 622 010e 2437     		adds	r7, r7, #36
 623              		.cfi_def_cfa_offset 12
 624 0110 BD46     		mov	sp, r7
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 0112 90BD     		pop	{r4, r7, pc}
 628              	.L32:
 629              		.align	2
 630              	.L31:
 631 0114 00000000 		.word	head
 632 0118 04000000 		.word	.LC1
 633 011c 0C000000 		.word	.LC2
 634 0120 30000000 		.word	.LC3
 635 0124 44000000 		.word	.LC4
 636 0128 00000000 		.word	.LC0
 637 012c 48000000 		.word	.LC5
 638 0130 60000000 		.word	.LC6
 639 0134 70000000 		.word	.LC7
 640 0138 78000000 		.word	.LC8
 641              		.cfi_endproc
 642              	.LFE132:
 644              		.section	.text.termDoWork,"ax",%progbits
 645              		.align	1
 646              		.global	termDoWork
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	termDoWork:
 653              	.LFB133:
 189:../Sources/com/term.c **** 
 190:../Sources/com/term.c **** /**
 191:../Sources/com/term.c ****  * @brief Terminal do work
 192:../Sources/com/term.c ****  *
 193:../Sources/com/term.c ****  * This function reads a line from the uart and calls the
 194:../Sources/com/term.c ****  * termParseCommand function to process the command.
 195:../Sources/com/term.c ****  */
 196:../Sources/com/term.c **** void termDoWork(void)
 197:../Sources/com/term.c **** {
 654              		.loc 1 197 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 512
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658 0000 80B5     		push	{r7, lr}
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 ADF5007D 		sub	sp, sp, #512
 663              		.cfi_def_cfa_offset 520
 664 0006 00AF     		add	r7, sp, #0
 665              		.cfi_def_cfa_register 7
 198:../Sources/com/term.c ****   char cmd[512];
 199:../Sources/com/term.c ****   if (TGT_IS_MCCAR)
 666              		.loc 1 199 0
 667 0008 124B     		ldr	r3, .L36
 668 000a 03F58153 		add	r3, r3, #4128
 669 000e 0433     		adds	r3, r3, #4
 670 0010 1B68     		ldr	r3, [r3]
 200:../Sources/com/term.c ****   {
 201:../Sources/com/term.c ****     #if (UART0_EN)
 202:../Sources/com/term.c ****       if (uart0HasLineReceived())
 203:../Sources/com/term.c ****       {
 204:../Sources/com/term.c ****         destination = uart0;
 205:../Sources/com/term.c ****         uart0ReadLine(cmd, sizeof(cmd));            // process uart data from debug interface
 206:../Sources/com/term.c ****         termParseCommand(cmd);
 207:../Sources/com/term.c ****       }
 208:../Sources/com/term.c ****     #endif
 209:../Sources/com/term.c **** 
 210:../Sources/com/term.c ****     #if (LPUART0_EN)
 211:../Sources/com/term.c ****       if (lpuart0HasLineReceived())                 // process uart data from bluetooth interface
 212:../Sources/com/term.c ****       {
 213:../Sources/com/term.c ****         destination = lpuart0;
 214:../Sources/com/term.c ****         lpuart0ReadLine(cmd, sizeof(cmd));
 215:../Sources/com/term.c ****         termParseCommand(cmd);
 216:../Sources/com/term.c ****       }
 217:../Sources/com/term.c ****     #endif
 218:../Sources/com/term.c ****   }
 219:../Sources/com/term.c **** 
 220:../Sources/com/term.c ****   if (TGT_IS_TINYK22)
 671              		.loc 1 220 0
 672 0012 104B     		ldr	r3, .L36
 673 0014 03F58153 		add	r3, r3, #4128
 674 0018 0433     		adds	r3, r3, #4
 675 001a 1B68     		ldr	r3, [r3]
 676 001c 03F00F03 		and	r3, r3, #15
 677 0020 052B     		cmp	r3, #5
 678 0022 11D1     		bne	.L35
 221:../Sources/com/term.c ****   {
 222:../Sources/com/term.c ****     #if (UART1_EN)
 223:../Sources/com/term.c ****       if (uart1HasLineReceived())                   // process uart data from debug interface
 679              		.loc 1 223 0
 680 0024 FFF7FEFF 		bl	uart1HasLineReceived
 681 0028 0346     		mov	r3, r0
 682 002a 002B     		cmp	r3, #0
 683 002c 0CD0     		beq	.L35
 224:../Sources/com/term.c ****       {
 225:../Sources/com/term.c ****         destination = uart1;
 684              		.loc 1 225 0
 685 002e 0A4B     		ldr	r3, .L36+4
 686 0030 0222     		movs	r2, #2
 687 0032 1A70     		strb	r2, [r3]
 226:../Sources/com/term.c ****         uart1ReadLine(cmd, sizeof(cmd));
 688              		.loc 1 226 0
 689 0034 3B46     		mov	r3, r7
 690 0036 4FF40071 		mov	r1, #512
 691 003a 1846     		mov	r0, r3
 692 003c FFF7FEFF 		bl	uart1ReadLine
 227:../Sources/com/term.c ****         termParseCommand(cmd);
 693              		.loc 1 227 0
 694 0040 3B46     		mov	r3, r7
 695 0042 1846     		mov	r0, r3
 696 0044 FFF7FEFF 		bl	termParseCommand
 697              	.L35:
 228:../Sources/com/term.c ****       }
 229:../Sources/com/term.c ****     #endif
 230:../Sources/com/term.c ****   }
 231:../Sources/com/term.c **** }
 698              		.loc 1 231 0
 699 0048 00BF     		nop
 700 004a 07F50077 		add	r7, r7, #512
 701              		.cfi_def_cfa_offset 8
 702 004e BD46     		mov	sp, r7
 703              		.cfi_def_cfa_register 13
 704              		@ sp needed
 705 0050 80BD     		pop	{r7, pc}
 706              	.L37:
 707 0052 00BF     		.align	2
 708              	.L36:
 709 0054 00700440 		.word	1074032640
 710 0058 00000000 		.word	destination
 711              		.cfi_endproc
 712              	.LFE133:
 714              		.section	.rodata
 715              		.align	2
 716              	.LC9:
 717 009c 4D432D43 		.ascii	"MC-Car ready... :-)\000"
 717      61722072 
 717      65616479 
 717      2E2E2E20 
 717      3A2D2900 
 718              		.align	2
 719              	.LC10:
 720 00b0 74696E79 		.ascii	"tinyk22 ready... :-)\000"
 720      6B323220 
 720      72656164 
 720      792E2E2E 
 720      203A2D29 
 721              		.section	.text.termInit,"ax",%progbits
 722              		.align	1
 723              		.global	termInit
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv4-sp-d16
 729              	termInit:
 730              	.LFB134:
 232:../Sources/com/term.c **** 
 233:../Sources/com/term.c **** /**
 234:../Sources/com/term.c ****  * Initialize the terminal with the desired baudrate.
 235:../Sources/com/term.c ****  *
 236:../Sources/com/term.c ****  * @param[in] baudrate
 237:../Sources/com/term.c ****  *   the desired baudrate (for example: 9600, 19200, 57600...)
 238:../Sources/com/term.c ****  */
 239:../Sources/com/term.c **** void termInit(uint16_t baudrate)
 240:../Sources/com/term.c **** {
 731              		.loc 1 240 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 8
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 82B0     		sub	sp, sp, #8
 740              		.cfi_def_cfa_offset 16
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 0346     		mov	r3, r0
 744 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 241:../Sources/com/term.c ****   // Send the first message to all uarts
 242:../Sources/com/term.c ****   destination = uartAll;
 745              		.loc 1 242 0
 746 000a 144B     		ldr	r3, .L42
 747 000c 0722     		movs	r2, #7
 748 000e 1A70     		strb	r2, [r3]
 243:../Sources/com/term.c **** 
 244:../Sources/com/term.c ****   if (TGT_IS_MCCAR)
 749              		.loc 1 244 0
 750 0010 134B     		ldr	r3, .L42+4
 751 0012 03F58153 		add	r3, r3, #4128
 752 0016 0433     		adds	r3, r3, #4
 753 0018 1B68     		ldr	r3, [r3]
 754 001a 03F00F03 		and	r3, r3, #15
 755 001e 082B     		cmp	r3, #8
 756 0020 05D1     		bne	.L39
 245:../Sources/com/term.c ****   {
 246:../Sources/com/term.c ****     // initialize uart0 only if the uart is enabled
 247:../Sources/com/term.c ****     #if (UART0_EN)
 248:../Sources/com/term.c ****       uart0Init(baudrate);
 249:../Sources/com/term.c ****     #endif
 250:../Sources/com/term.c **** 
 251:../Sources/com/term.c ****     // initialize lpuart0 only if the uart is enabled
 252:../Sources/com/term.c ****     #if (LPUART0_EN)
 253:../Sources/com/term.c ****       lpuart0Init(baudrate);
 254:../Sources/com/term.c ****     #endif
 255:../Sources/com/term.c **** 
 256:../Sources/com/term.c ****     termWriteLine(NULL);
 757              		.loc 1 256 0
 758 0022 0020     		movs	r0, #0
 759 0024 FFF7FEFF 		bl	termWriteLine
 257:../Sources/com/term.c ****     termWriteLine("MC-Car ready... :-)");
 760              		.loc 1 257 0
 761 0028 0E48     		ldr	r0, .L42+8
 762 002a FFF7FEFF 		bl	termWriteLine
 763              	.L39:
 258:../Sources/com/term.c ****   }
 259:../Sources/com/term.c **** 
 260:../Sources/com/term.c ****   if (TGT_IS_TINYK22)
 764              		.loc 1 260 0
 765 002e 0C4B     		ldr	r3, .L42+4
 766 0030 03F58153 		add	r3, r3, #4128
 767 0034 0433     		adds	r3, r3, #4
 768 0036 1B68     		ldr	r3, [r3]
 769 0038 03F00F03 		and	r3, r3, #15
 770 003c 052B     		cmp	r3, #5
 771 003e 09D1     		bne	.L41
 261:../Sources/com/term.c ****   {
 262:../Sources/com/term.c ****     // initialize uart1 only if the uart is enabled
 263:../Sources/com/term.c ****     #if (UART1_EN)
 264:../Sources/com/term.c ****       uart1Init(baudrate);
 772              		.loc 1 264 0
 773 0040 FB88     		ldrh	r3, [r7, #6]
 774 0042 1846     		mov	r0, r3
 775 0044 FFF7FEFF 		bl	uart1Init
 265:../Sources/com/term.c ****     #endif
 266:../Sources/com/term.c ****     termWriteLine(NULL);
 776              		.loc 1 266 0
 777 0048 0020     		movs	r0, #0
 778 004a FFF7FEFF 		bl	termWriteLine
 267:../Sources/com/term.c ****     termWriteLine("tinyk22 ready... :-)");
 779              		.loc 1 267 0
 780 004e 0648     		ldr	r0, .L42+12
 781 0050 FFF7FEFF 		bl	termWriteLine
 782              	.L41:
 268:../Sources/com/term.c ****   }
 269:../Sources/com/term.c **** }
 783              		.loc 1 269 0
 784 0054 00BF     		nop
 785 0056 0837     		adds	r7, r7, #8
 786              		.cfi_def_cfa_offset 8
 787 0058 BD46     		mov	sp, r7
 788              		.cfi_def_cfa_register 13
 789              		@ sp needed
 790 005a 80BD     		pop	{r7, pc}
 791              	.L43:
 792              		.align	2
 793              	.L42:
 794 005c 00000000 		.word	destination
 795 0060 00700440 		.word	1074032640
 796 0064 9C000000 		.word	.LC9
 797 0068 B0000000 		.word	.LC10
 798              		.cfi_endproc
 799              	.LFE134:
 801              		.text
 802              	.Letext0:
 803              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 804              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 805              		.file 4 "../Includes/core_cm4.h"
 806              		.file 5 "../Includes/system_MK22F51212.h"
 807              		.file 6 "../Includes/MK22F51212.h"
 808              		.file 7 "../Includes/platform.h"
 809              		.file 8 "../Sources/com/term.h"
 810              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 811              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
 812              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-ea
 813              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
DEFINED SYMBOLS
                            *ABS*:00000000 term.c
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:20     .bss.destination:00000000 destination
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:21     .bss.destination:00000000 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:23     .bss.head:00000000 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:26     .bss.head:00000000 head
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:29     .rodata:00000000 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:33     .text.termRegisterCommandLineHandler:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:40     .text.termRegisterCommandLineHandler:00000000 termRegisterCommandLineHandler
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:108    .text.termRegisterCommandLineHandler:0000005c $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:114    .text.termWriteChar:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:121    .text.termWriteChar:00000000 termWriteChar
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:172    .text.termWriteChar:00000044 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:178    .text.termWrite:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:185    .text.termWrite:00000000 termWrite
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:236    .text.termWriteNum32s:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:243    .text.termWriteNum32s:00000000 termWriteNum32s
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:280    .text.termWriteNum16s:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:287    .text.termWriteNum16s:00000000 termWriteNum16s
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:325    .text.termWriteLine:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:332    .text.termWriteLine:00000000 termWriteLine
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:365    .text.termWriteSubString:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:372    .text.termWriteSubString:00000000 termWriteSubString
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:450    .text.termParseCommand:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:457    .text.termParseCommand:00000000 termParseCommand
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:631    .text.termParseCommand:00000114 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:645    .text.termDoWork:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:652    .text.termDoWork:00000000 termDoWork
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:709    .text.termDoWork:00000054 $d
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:722    .text.termInit:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:729    .text.termInit:00000000 termInit
C:\Users\jonas\AppData\Local\Temp\ccWz4CvJ.s:794    .text.termInit:0000005c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.a6d4f739a788c67292a3ea0a48d10bd5
                           .group:00000000 wm4.MK22F51212.h.96.792c303daa596f91c029224edd7c60aa
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.cf97d4c9a045ebab6d282f6356e11363
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.MK22F51212.h.109.eeee73bf5f54e3f06177795004b95e22
                           .group:00000000 wm4.core_cm4.h.43.f75e2f71b2e33f7a3db429cd8b0cae9e
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.a59e218d30e39d114c8962bbad645c74
                           .group:00000000 wm4.system_MK22F51212.h.94.09b5fd63c227fb82ca8c370fba9e2334
                           .group:00000000 wm4.MK22F51212.h.369.5a9c5aa32d240e03ff494f1c769cfadf
                           .group:00000000 wm4.platform.h.20.5dba9aa78ee93a87b4214fc940da3bb4
                           .group:00000000 wm4.uart.h.20.7c9bf4f44238ac4267b9e86c1201fe8d
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e

UNDEFINED SYMBOLS
strncpy
strlen
uart1WriteChar
utilNum32sToStr
utilNum16sToStr
strcmp
strncmp
utilNum16uToStr
uart1HasLineReceived
uart1ReadLine
uart1Init
