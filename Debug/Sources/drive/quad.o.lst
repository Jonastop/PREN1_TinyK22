   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"quad.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	NVIC_EnableIRQ:
  25              	.LFB108:
  26              		.file 1 "../Includes/core_cm4.h"
   1:../Includes/core_cm4.h **** /**************************************************************************//**
   2:../Includes/core_cm4.h ****  * @file     core_cm4.h
   3:../Includes/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../Includes/core_cm4.h ****  * @version  V4.10
   5:../Includes/core_cm4.h ****  * @date     18. March 2015
   6:../Includes/core_cm4.h ****  *
   7:../Includes/core_cm4.h ****  * @note
   8:../Includes/core_cm4.h ****  *
   9:../Includes/core_cm4.h ****  ******************************************************************************/
  10:../Includes/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:../Includes/core_cm4.h **** 
  12:../Includes/core_cm4.h ****    All rights reserved.
  13:../Includes/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  14:../Includes/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  15:../Includes/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  16:../Includes/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  17:../Includes/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../Includes/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  19:../Includes/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  20:../Includes/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../Includes/core_cm4.h ****      to endorse or promote products derived from this software without
  22:../Includes/core_cm4.h ****      specific prior written permission.
  23:../Includes/core_cm4.h ****    *
  24:../Includes/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../Includes/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../Includes/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../Includes/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../Includes/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../Includes/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../Includes/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../Includes/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../Includes/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../Includes/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../Includes/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../Includes/core_cm4.h ****    ---------------------------------------------------------------------------*/
  36:../Includes/core_cm4.h **** 
  37:../Includes/core_cm4.h **** 
  38:../Includes/core_cm4.h **** #if defined ( __ICCARM__ )
  39:../Includes/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../Includes/core_cm4.h **** #endif
  41:../Includes/core_cm4.h **** 
  42:../Includes/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  43:../Includes/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  44:../Includes/core_cm4.h **** 
  45:../Includes/core_cm4.h **** #ifdef __cplusplus
  46:../Includes/core_cm4.h ****  extern "C" {
  47:../Includes/core_cm4.h **** #endif
  48:../Includes/core_cm4.h **** 
  49:../Includes/core_cm4.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../Includes/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../Includes/core_cm4.h **** 
  52:../Includes/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../Includes/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../Includes/core_cm4.h **** 
  55:../Includes/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../Includes/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:../Includes/core_cm4.h **** 
  58:../Includes/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../Includes/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  60:../Includes/core_cm4.h ****  */
  61:../Includes/core_cm4.h **** 
  62:../Includes/core_cm4.h **** 
  63:../Includes/core_cm4.h **** /*******************************************************************************
  64:../Includes/core_cm4.h ****  *                 CMSIS definitions
  65:../Includes/core_cm4.h ****  ******************************************************************************/
  66:../Includes/core_cm4.h **** /** \ingroup Cortex_M4
  67:../Includes/core_cm4.h ****   @{
  68:../Includes/core_cm4.h ****  */
  69:../Includes/core_cm4.h **** 
  70:../Includes/core_cm4.h **** /*  CMSIS CM4 definitions */
  71:../Includes/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04)                                   /*!< [31:16] CMSIS HAL m
  72:../Includes/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  73:../Includes/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | \
  74:../Includes/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../Includes/core_cm4.h **** 
  76:../Includes/core_cm4.h **** #define __CORTEX_M                (0x04)                                   /*!< Cortex-M Core      
  77:../Includes/core_cm4.h **** 
  78:../Includes/core_cm4.h **** 
  79:../Includes/core_cm4.h **** #if   defined ( __CC_ARM )
  80:../Includes/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../Includes/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  83:../Includes/core_cm4.h **** 
  84:../Includes/core_cm4.h **** #elif defined ( __GNUC__ )
  85:../Includes/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:../Includes/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static inline
  88:../Includes/core_cm4.h **** 
  89:../Includes/core_cm4.h **** #elif defined ( __ICCARM__ )
  90:../Includes/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:../Includes/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static inline
  93:../Includes/core_cm4.h **** 
  94:../Includes/core_cm4.h **** #elif defined ( __TMS470__ )
  95:../Includes/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static inline
  97:../Includes/core_cm4.h **** 
  98:../Includes/core_cm4.h **** #elif defined ( __TASKING__ )
  99:../Includes/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../Includes/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static inline
 102:../Includes/core_cm4.h **** 
 103:../Includes/core_cm4.h **** #elif defined ( __CSMC__ )
 104:../Includes/core_cm4.h ****   #define __packed
 105:../Includes/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:../Includes/core_cm4.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:../Includes/core_cm4.h ****   #define __STATIC_INLINE  static inline
 108:../Includes/core_cm4.h **** 
 109:../Includes/core_cm4.h **** #endif
 110:../Includes/core_cm4.h **** 
 111:../Includes/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 112:../Includes/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 113:../Includes/core_cm4.h **** */
 114:../Includes/core_cm4.h **** #if defined ( __CC_ARM )
 115:../Includes/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 116:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:../Includes/core_cm4.h ****       #define __FPU_USED       1
 118:../Includes/core_cm4.h ****     #else
 119:../Includes/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:../Includes/core_cm4.h ****       #define __FPU_USED       0
 121:../Includes/core_cm4.h ****     #endif
 122:../Includes/core_cm4.h ****   #else
 123:../Includes/core_cm4.h ****     #define __FPU_USED         0
 124:../Includes/core_cm4.h ****   #endif
 125:../Includes/core_cm4.h **** 
 126:../Includes/core_cm4.h **** #elif defined ( __GNUC__ )
 127:../Includes/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:../Includes/core_cm4.h ****       #define __FPU_USED       1
 130:../Includes/core_cm4.h ****     #else
 131:../Includes/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:../Includes/core_cm4.h ****       #define __FPU_USED       0
 133:../Includes/core_cm4.h ****     #endif
 134:../Includes/core_cm4.h ****   #else
 135:../Includes/core_cm4.h ****     #define __FPU_USED         0
 136:../Includes/core_cm4.h ****   #endif
 137:../Includes/core_cm4.h **** 
 138:../Includes/core_cm4.h **** #elif defined ( __ICCARM__ )
 139:../Includes/core_cm4.h ****   #if defined __ARMVFP__
 140:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 141:../Includes/core_cm4.h ****       #define __FPU_USED       1
 142:../Includes/core_cm4.h ****     #else
 143:../Includes/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 144:../Includes/core_cm4.h ****       #define __FPU_USED       0
 145:../Includes/core_cm4.h ****     #endif
 146:../Includes/core_cm4.h ****   #else
 147:../Includes/core_cm4.h ****     #define __FPU_USED         0
 148:../Includes/core_cm4.h ****   #endif
 149:../Includes/core_cm4.h **** 
 150:../Includes/core_cm4.h **** #elif defined ( __TMS470__ )
 151:../Includes/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 152:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 153:../Includes/core_cm4.h ****       #define __FPU_USED       1
 154:../Includes/core_cm4.h ****     #else
 155:../Includes/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 156:../Includes/core_cm4.h ****       #define __FPU_USED       0
 157:../Includes/core_cm4.h ****     #endif
 158:../Includes/core_cm4.h ****   #else
 159:../Includes/core_cm4.h ****     #define __FPU_USED         0
 160:../Includes/core_cm4.h ****   #endif
 161:../Includes/core_cm4.h **** 
 162:../Includes/core_cm4.h **** #elif defined ( __TASKING__ )
 163:../Includes/core_cm4.h ****   #if defined __FPU_VFP__
 164:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 165:../Includes/core_cm4.h ****       #define __FPU_USED       1
 166:../Includes/core_cm4.h ****     #else
 167:../Includes/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 168:../Includes/core_cm4.h ****       #define __FPU_USED       0
 169:../Includes/core_cm4.h ****     #endif
 170:../Includes/core_cm4.h ****   #else
 171:../Includes/core_cm4.h ****     #define __FPU_USED         0
 172:../Includes/core_cm4.h ****   #endif
 173:../Includes/core_cm4.h **** 
 174:../Includes/core_cm4.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 175:../Includes/core_cm4.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 176:../Includes/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 177:../Includes/core_cm4.h ****       #define __FPU_USED       1
 178:../Includes/core_cm4.h ****     #else
 179:../Includes/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 180:../Includes/core_cm4.h ****       #define __FPU_USED       0
 181:../Includes/core_cm4.h ****     #endif
 182:../Includes/core_cm4.h ****   #else
 183:../Includes/core_cm4.h ****     #define __FPU_USED         0
 184:../Includes/core_cm4.h ****   #endif
 185:../Includes/core_cm4.h **** #endif
 186:../Includes/core_cm4.h **** 
 187:../Includes/core_cm4.h **** #include <stdint.h>                      /* standard types definitions                      */
 188:../Includes/core_cm4.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 189:../Includes/core_cm4.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 190:../Includes/core_cm4.h **** #include <core_cmSimd.h>                 /* Compiler specific SIMD Intrinsics               */
 191:../Includes/core_cm4.h **** 
 192:../Includes/core_cm4.h **** #ifdef __cplusplus
 193:../Includes/core_cm4.h **** }
 194:../Includes/core_cm4.h **** #endif
 195:../Includes/core_cm4.h **** 
 196:../Includes/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 197:../Includes/core_cm4.h **** 
 198:../Includes/core_cm4.h **** #ifndef __CMSIS_GENERIC
 199:../Includes/core_cm4.h **** 
 200:../Includes/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 201:../Includes/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 202:../Includes/core_cm4.h **** 
 203:../Includes/core_cm4.h **** #ifdef __cplusplus
 204:../Includes/core_cm4.h ****  extern "C" {
 205:../Includes/core_cm4.h **** #endif
 206:../Includes/core_cm4.h **** 
 207:../Includes/core_cm4.h **** /* check device defines and use defaults */
 208:../Includes/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 209:../Includes/core_cm4.h ****   #ifndef __CM4_REV
 210:../Includes/core_cm4.h ****     #define __CM4_REV               0x0000
 211:../Includes/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 212:../Includes/core_cm4.h ****   #endif
 213:../Includes/core_cm4.h **** 
 214:../Includes/core_cm4.h ****   #ifndef __FPU_PRESENT
 215:../Includes/core_cm4.h ****     #define __FPU_PRESENT             0
 216:../Includes/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 217:../Includes/core_cm4.h ****   #endif
 218:../Includes/core_cm4.h **** 
 219:../Includes/core_cm4.h ****   #ifndef __MPU_PRESENT
 220:../Includes/core_cm4.h ****     #define __MPU_PRESENT             0
 221:../Includes/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 222:../Includes/core_cm4.h ****   #endif
 223:../Includes/core_cm4.h **** 
 224:../Includes/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 225:../Includes/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 226:../Includes/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 227:../Includes/core_cm4.h ****   #endif
 228:../Includes/core_cm4.h **** 
 229:../Includes/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 230:../Includes/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 231:../Includes/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 232:../Includes/core_cm4.h ****   #endif
 233:../Includes/core_cm4.h **** #endif
 234:../Includes/core_cm4.h **** 
 235:../Includes/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 236:../Includes/core_cm4.h **** /**
 237:../Includes/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 238:../Includes/core_cm4.h **** 
 239:../Includes/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 240:../Includes/core_cm4.h ****     \li to specify the access to peripheral variables.
 241:../Includes/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 242:../Includes/core_cm4.h **** */
 243:../Includes/core_cm4.h **** #ifdef __cplusplus
 244:../Includes/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 245:../Includes/core_cm4.h **** #else
 246:../Includes/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 247:../Includes/core_cm4.h **** #endif
 248:../Includes/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 249:../Includes/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 250:../Includes/core_cm4.h **** 
 251:../Includes/core_cm4.h **** /*@} end of group Cortex_M4 */
 252:../Includes/core_cm4.h **** 
 253:../Includes/core_cm4.h **** 
 254:../Includes/core_cm4.h **** 
 255:../Includes/core_cm4.h **** /*******************************************************************************
 256:../Includes/core_cm4.h ****  *                 Register Abstraction
 257:../Includes/core_cm4.h ****   Core Register contain:
 258:../Includes/core_cm4.h ****   - Core Register
 259:../Includes/core_cm4.h ****   - Core NVIC Register
 260:../Includes/core_cm4.h ****   - Core SCB Register
 261:../Includes/core_cm4.h ****   - Core SysTick Register
 262:../Includes/core_cm4.h ****   - Core Debug Register
 263:../Includes/core_cm4.h ****   - Core MPU Register
 264:../Includes/core_cm4.h ****   - Core FPU Register
 265:../Includes/core_cm4.h ****  ******************************************************************************/
 266:../Includes/core_cm4.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 267:../Includes/core_cm4.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 268:../Includes/core_cm4.h **** */
 269:../Includes/core_cm4.h **** 
 270:../Includes/core_cm4.h **** /** \ingroup    CMSIS_core_register
 271:../Includes/core_cm4.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 272:../Includes/core_cm4.h ****     \brief  Core Register type definitions.
 273:../Includes/core_cm4.h ****   @{
 274:../Includes/core_cm4.h ****  */
 275:../Includes/core_cm4.h **** 
 276:../Includes/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 277:../Includes/core_cm4.h ****  */
 278:../Includes/core_cm4.h **** typedef union
 279:../Includes/core_cm4.h **** {
 280:../Includes/core_cm4.h ****   struct
 281:../Includes/core_cm4.h ****   {
 282:../Includes/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 283:../Includes/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 284:../Includes/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 285:../Includes/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 286:../Includes/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 287:../Includes/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 288:../Includes/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 289:../Includes/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 290:../Includes/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 291:../Includes/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 292:../Includes/core_cm4.h **** } APSR_Type;
 293:../Includes/core_cm4.h **** 
 294:../Includes/core_cm4.h **** /* APSR Register Definitions */
 295:../Includes/core_cm4.h **** #define APSR_N_Pos                         31                                             /*!< APSR
 296:../Includes/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 297:../Includes/core_cm4.h **** 
 298:../Includes/core_cm4.h **** #define APSR_Z_Pos                         30                                             /*!< APSR
 299:../Includes/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 300:../Includes/core_cm4.h **** 
 301:../Includes/core_cm4.h **** #define APSR_C_Pos                         29                                             /*!< APSR
 302:../Includes/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 303:../Includes/core_cm4.h **** 
 304:../Includes/core_cm4.h **** #define APSR_V_Pos                         28                                             /*!< APSR
 305:../Includes/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 306:../Includes/core_cm4.h **** 
 307:../Includes/core_cm4.h **** #define APSR_Q_Pos                         27                                             /*!< APSR
 308:../Includes/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 309:../Includes/core_cm4.h **** 
 310:../Includes/core_cm4.h **** #define APSR_GE_Pos                        16                                             /*!< APSR
 311:../Includes/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 312:../Includes/core_cm4.h **** 
 313:../Includes/core_cm4.h **** 
 314:../Includes/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 315:../Includes/core_cm4.h ****  */
 316:../Includes/core_cm4.h **** typedef union
 317:../Includes/core_cm4.h **** {
 318:../Includes/core_cm4.h ****   struct
 319:../Includes/core_cm4.h ****   {
 320:../Includes/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 321:../Includes/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 322:../Includes/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 323:../Includes/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 324:../Includes/core_cm4.h **** } IPSR_Type;
 325:../Includes/core_cm4.h **** 
 326:../Includes/core_cm4.h **** /* IPSR Register Definitions */
 327:../Includes/core_cm4.h **** #define IPSR_ISR_Pos                        0                                             /*!< IPSR
 328:../Includes/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 329:../Includes/core_cm4.h **** 
 330:../Includes/core_cm4.h **** 
 331:../Includes/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 332:../Includes/core_cm4.h ****  */
 333:../Includes/core_cm4.h **** typedef union
 334:../Includes/core_cm4.h **** {
 335:../Includes/core_cm4.h ****   struct
 336:../Includes/core_cm4.h ****   {
 337:../Includes/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 338:../Includes/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 339:../Includes/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 340:../Includes/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 341:../Includes/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 342:../Includes/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 343:../Includes/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 344:../Includes/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 345:../Includes/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 346:../Includes/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 347:../Includes/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 348:../Includes/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 349:../Includes/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 350:../Includes/core_cm4.h **** } xPSR_Type;
 351:../Includes/core_cm4.h **** 
 352:../Includes/core_cm4.h **** /* xPSR Register Definitions */
 353:../Includes/core_cm4.h **** #define xPSR_N_Pos                         31                                             /*!< xPSR
 354:../Includes/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 355:../Includes/core_cm4.h **** 
 356:../Includes/core_cm4.h **** #define xPSR_Z_Pos                         30                                             /*!< xPSR
 357:../Includes/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 358:../Includes/core_cm4.h **** 
 359:../Includes/core_cm4.h **** #define xPSR_C_Pos                         29                                             /*!< xPSR
 360:../Includes/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 361:../Includes/core_cm4.h **** 
 362:../Includes/core_cm4.h **** #define xPSR_V_Pos                         28                                             /*!< xPSR
 363:../Includes/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 364:../Includes/core_cm4.h **** 
 365:../Includes/core_cm4.h **** #define xPSR_Q_Pos                         27                                             /*!< xPSR
 366:../Includes/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 367:../Includes/core_cm4.h **** 
 368:../Includes/core_cm4.h **** #define xPSR_IT_Pos                        25                                             /*!< xPSR
 369:../Includes/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 370:../Includes/core_cm4.h **** 
 371:../Includes/core_cm4.h **** #define xPSR_T_Pos                         24                                             /*!< xPSR
 372:../Includes/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 373:../Includes/core_cm4.h **** 
 374:../Includes/core_cm4.h **** #define xPSR_GE_Pos                        16                                             /*!< xPSR
 375:../Includes/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 376:../Includes/core_cm4.h **** 
 377:../Includes/core_cm4.h **** #define xPSR_ISR_Pos                        0                                             /*!< xPSR
 378:../Includes/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 379:../Includes/core_cm4.h **** 
 380:../Includes/core_cm4.h **** 
 381:../Includes/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 382:../Includes/core_cm4.h ****  */
 383:../Includes/core_cm4.h **** typedef union
 384:../Includes/core_cm4.h **** {
 385:../Includes/core_cm4.h ****   struct
 386:../Includes/core_cm4.h ****   {
 387:../Includes/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 388:../Includes/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 389:../Includes/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 390:../Includes/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 391:../Includes/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 392:../Includes/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 393:../Includes/core_cm4.h **** } CONTROL_Type;
 394:../Includes/core_cm4.h **** 
 395:../Includes/core_cm4.h **** /* CONTROL Register Definitions */
 396:../Includes/core_cm4.h **** #define CONTROL_FPCA_Pos                    2                                             /*!< CONT
 397:../Includes/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 398:../Includes/core_cm4.h **** 
 399:../Includes/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1                                             /*!< CONT
 400:../Includes/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 401:../Includes/core_cm4.h **** 
 402:../Includes/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0                                             /*!< CONT
 403:../Includes/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 404:../Includes/core_cm4.h **** 
 405:../Includes/core_cm4.h **** /*@} end of group CMSIS_CORE */
 406:../Includes/core_cm4.h **** 
 407:../Includes/core_cm4.h **** 
 408:../Includes/core_cm4.h **** /** \ingroup    CMSIS_core_register
 409:../Includes/core_cm4.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 410:../Includes/core_cm4.h ****     \brief      Type definitions for the NVIC Registers
 411:../Includes/core_cm4.h ****   @{
 412:../Includes/core_cm4.h ****  */
 413:../Includes/core_cm4.h **** 
 414:../Includes/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 415:../Includes/core_cm4.h ****  */
 416:../Includes/core_cm4.h **** typedef struct
 417:../Includes/core_cm4.h **** {
 418:../Includes/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 419:../Includes/core_cm4.h ****        uint32_t RESERVED0[24];
 420:../Includes/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 421:../Includes/core_cm4.h ****        uint32_t RSERVED1[24];
 422:../Includes/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 423:../Includes/core_cm4.h ****        uint32_t RESERVED2[24];
 424:../Includes/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 425:../Includes/core_cm4.h ****        uint32_t RESERVED3[24];
 426:../Includes/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 427:../Includes/core_cm4.h ****        uint32_t RESERVED4[56];
 428:../Includes/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 429:../Includes/core_cm4.h ****        uint32_t RESERVED5[644];
 430:../Includes/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 431:../Includes/core_cm4.h **** }  NVIC_Type;
 432:../Includes/core_cm4.h **** 
 433:../Includes/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 434:../Includes/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 435:../Includes/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 436:../Includes/core_cm4.h **** 
 437:../Includes/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 438:../Includes/core_cm4.h **** 
 439:../Includes/core_cm4.h **** 
 440:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 441:../Includes/core_cm4.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 442:../Includes/core_cm4.h ****     \brief      Type definitions for the System Control Block Registers
 443:../Includes/core_cm4.h ****   @{
 444:../Includes/core_cm4.h ****  */
 445:../Includes/core_cm4.h **** 
 446:../Includes/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 447:../Includes/core_cm4.h ****  */
 448:../Includes/core_cm4.h **** typedef struct
 449:../Includes/core_cm4.h **** {
 450:../Includes/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 451:../Includes/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 452:../Includes/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 453:../Includes/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 454:../Includes/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 455:../Includes/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 456:../Includes/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 457:../Includes/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 458:../Includes/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 459:../Includes/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 460:../Includes/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 461:../Includes/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 462:../Includes/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 463:../Includes/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 464:../Includes/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 465:../Includes/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 466:../Includes/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 467:../Includes/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 468:../Includes/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 469:../Includes/core_cm4.h ****        uint32_t RESERVED0[5];
 470:../Includes/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 471:../Includes/core_cm4.h **** } SCB_Type;
 472:../Includes/core_cm4.h **** 
 473:../Includes/core_cm4.h **** /* SCB CPUID Register Definitions */
 474:../Includes/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 475:../Includes/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 476:../Includes/core_cm4.h **** 
 477:../Includes/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 478:../Includes/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 479:../Includes/core_cm4.h **** 
 480:../Includes/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 481:../Includes/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 482:../Includes/core_cm4.h **** 
 483:../Includes/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 484:../Includes/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 485:../Includes/core_cm4.h **** 
 486:../Includes/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 487:../Includes/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 488:../Includes/core_cm4.h **** 
 489:../Includes/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 490:../Includes/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 491:../Includes/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 492:../Includes/core_cm4.h **** 
 493:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 494:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 495:../Includes/core_cm4.h **** 
 496:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 497:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 498:../Includes/core_cm4.h **** 
 499:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 500:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 501:../Includes/core_cm4.h **** 
 502:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 503:../Includes/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 504:../Includes/core_cm4.h **** 
 505:../Includes/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 506:../Includes/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 507:../Includes/core_cm4.h **** 
 508:../Includes/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 509:../Includes/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 510:../Includes/core_cm4.h **** 
 511:../Includes/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 512:../Includes/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 513:../Includes/core_cm4.h **** 
 514:../Includes/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 515:../Includes/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 516:../Includes/core_cm4.h **** 
 517:../Includes/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 518:../Includes/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 519:../Includes/core_cm4.h **** 
 520:../Includes/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 521:../Includes/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 522:../Includes/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 523:../Includes/core_cm4.h **** 
 524:../Includes/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 525:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 526:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 527:../Includes/core_cm4.h **** 
 528:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 529:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 530:../Includes/core_cm4.h **** 
 531:../Includes/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 532:../Includes/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 533:../Includes/core_cm4.h **** 
 534:../Includes/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 535:../Includes/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 536:../Includes/core_cm4.h **** 
 537:../Includes/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 538:../Includes/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 539:../Includes/core_cm4.h **** 
 540:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 541:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 542:../Includes/core_cm4.h **** 
 543:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 544:../Includes/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 545:../Includes/core_cm4.h **** 
 546:../Includes/core_cm4.h **** /* SCB System Control Register Definitions */
 547:../Includes/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 548:../Includes/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 549:../Includes/core_cm4.h **** 
 550:../Includes/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 551:../Includes/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 552:../Includes/core_cm4.h **** 
 553:../Includes/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 554:../Includes/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 555:../Includes/core_cm4.h **** 
 556:../Includes/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 557:../Includes/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 558:../Includes/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 559:../Includes/core_cm4.h **** 
 560:../Includes/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 561:../Includes/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 562:../Includes/core_cm4.h **** 
 563:../Includes/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 564:../Includes/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 565:../Includes/core_cm4.h **** 
 566:../Includes/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 567:../Includes/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 568:../Includes/core_cm4.h **** 
 569:../Includes/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 570:../Includes/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 571:../Includes/core_cm4.h **** 
 572:../Includes/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 573:../Includes/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 574:../Includes/core_cm4.h **** 
 575:../Includes/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 576:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 577:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 578:../Includes/core_cm4.h **** 
 579:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 580:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 581:../Includes/core_cm4.h **** 
 582:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 583:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 584:../Includes/core_cm4.h **** 
 585:../Includes/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 586:../Includes/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 587:../Includes/core_cm4.h **** 
 588:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 589:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 590:../Includes/core_cm4.h **** 
 591:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 592:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 593:../Includes/core_cm4.h **** 
 594:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 595:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 596:../Includes/core_cm4.h **** 
 597:../Includes/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 598:../Includes/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 599:../Includes/core_cm4.h **** 
 600:../Includes/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 601:../Includes/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 602:../Includes/core_cm4.h **** 
 603:../Includes/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 604:../Includes/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 605:../Includes/core_cm4.h **** 
 606:../Includes/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 607:../Includes/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 608:../Includes/core_cm4.h **** 
 609:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 610:../Includes/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 611:../Includes/core_cm4.h **** 
 612:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 613:../Includes/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 614:../Includes/core_cm4.h **** 
 615:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 616:../Includes/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 617:../Includes/core_cm4.h **** 
 618:../Includes/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 619:../Includes/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 620:../Includes/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 621:../Includes/core_cm4.h **** 
 622:../Includes/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 623:../Includes/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 624:../Includes/core_cm4.h **** 
 625:../Includes/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 626:../Includes/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 627:../Includes/core_cm4.h **** 
 628:../Includes/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 629:../Includes/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 630:../Includes/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 631:../Includes/core_cm4.h **** 
 632:../Includes/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 633:../Includes/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 634:../Includes/core_cm4.h **** 
 635:../Includes/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 636:../Includes/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 637:../Includes/core_cm4.h **** 
 638:../Includes/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 639:../Includes/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 640:../Includes/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 641:../Includes/core_cm4.h **** 
 642:../Includes/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 643:../Includes/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 644:../Includes/core_cm4.h **** 
 645:../Includes/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 646:../Includes/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 647:../Includes/core_cm4.h **** 
 648:../Includes/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 649:../Includes/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 650:../Includes/core_cm4.h **** 
 651:../Includes/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 652:../Includes/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 653:../Includes/core_cm4.h **** 
 654:../Includes/core_cm4.h **** /*@} end of group CMSIS_SCB */
 655:../Includes/core_cm4.h **** 
 656:../Includes/core_cm4.h **** 
 657:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 658:../Includes/core_cm4.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 659:../Includes/core_cm4.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 660:../Includes/core_cm4.h ****   @{
 661:../Includes/core_cm4.h ****  */
 662:../Includes/core_cm4.h **** 
 663:../Includes/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 664:../Includes/core_cm4.h ****  */
 665:../Includes/core_cm4.h **** typedef struct
 666:../Includes/core_cm4.h **** {
 667:../Includes/core_cm4.h ****        uint32_t RESERVED0[1];
 668:../Includes/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 669:../Includes/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 670:../Includes/core_cm4.h **** } SCnSCB_Type;
 671:../Includes/core_cm4.h **** 
 672:../Includes/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 673:../Includes/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 674:../Includes/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 675:../Includes/core_cm4.h **** 
 676:../Includes/core_cm4.h **** /* Auxiliary Control Register Definitions */
 677:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 678:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 679:../Includes/core_cm4.h **** 
 680:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 681:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 682:../Includes/core_cm4.h **** 
 683:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 684:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 685:../Includes/core_cm4.h **** 
 686:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 687:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 688:../Includes/core_cm4.h **** 
 689:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 690:../Includes/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 691:../Includes/core_cm4.h **** 
 692:../Includes/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 693:../Includes/core_cm4.h **** 
 694:../Includes/core_cm4.h **** 
 695:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 696:../Includes/core_cm4.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 697:../Includes/core_cm4.h ****     \brief      Type definitions for the System Timer Registers.
 698:../Includes/core_cm4.h ****   @{
 699:../Includes/core_cm4.h ****  */
 700:../Includes/core_cm4.h **** 
 701:../Includes/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 702:../Includes/core_cm4.h ****  */
 703:../Includes/core_cm4.h **** typedef struct
 704:../Includes/core_cm4.h **** {
 705:../Includes/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 706:../Includes/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 707:../Includes/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 708:../Includes/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 709:../Includes/core_cm4.h **** } SysTick_Type;
 710:../Includes/core_cm4.h **** 
 711:../Includes/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 712:../Includes/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 713:../Includes/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 714:../Includes/core_cm4.h **** 
 715:../Includes/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 716:../Includes/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 717:../Includes/core_cm4.h **** 
 718:../Includes/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 719:../Includes/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 720:../Includes/core_cm4.h **** 
 721:../Includes/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 722:../Includes/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 723:../Includes/core_cm4.h **** 
 724:../Includes/core_cm4.h **** /* SysTick Reload Register Definitions */
 725:../Includes/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 726:../Includes/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 727:../Includes/core_cm4.h **** 
 728:../Includes/core_cm4.h **** /* SysTick Current Register Definitions */
 729:../Includes/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 730:../Includes/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 731:../Includes/core_cm4.h **** 
 732:../Includes/core_cm4.h **** /* SysTick Calibration Register Definitions */
 733:../Includes/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 734:../Includes/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 735:../Includes/core_cm4.h **** 
 736:../Includes/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 737:../Includes/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 738:../Includes/core_cm4.h **** 
 739:../Includes/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 740:../Includes/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 741:../Includes/core_cm4.h **** 
 742:../Includes/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 743:../Includes/core_cm4.h **** 
 744:../Includes/core_cm4.h **** 
 745:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 746:../Includes/core_cm4.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 747:../Includes/core_cm4.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 748:../Includes/core_cm4.h ****   @{
 749:../Includes/core_cm4.h ****  */
 750:../Includes/core_cm4.h **** 
 751:../Includes/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 752:../Includes/core_cm4.h ****  */
 753:../Includes/core_cm4.h **** typedef struct
 754:../Includes/core_cm4.h **** {
 755:../Includes/core_cm4.h ****   __O  union
 756:../Includes/core_cm4.h ****   {
 757:../Includes/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 758:../Includes/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 759:../Includes/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 760:../Includes/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 761:../Includes/core_cm4.h ****        uint32_t RESERVED0[864];
 762:../Includes/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 763:../Includes/core_cm4.h ****        uint32_t RESERVED1[15];
 764:../Includes/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 765:../Includes/core_cm4.h ****        uint32_t RESERVED2[15];
 766:../Includes/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 767:../Includes/core_cm4.h ****        uint32_t RESERVED3[29];
 768:../Includes/core_cm4.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 769:../Includes/core_cm4.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 770:../Includes/core_cm4.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 771:../Includes/core_cm4.h ****        uint32_t RESERVED4[43];
 772:../Includes/core_cm4.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 773:../Includes/core_cm4.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 774:../Includes/core_cm4.h ****        uint32_t RESERVED5[6];
 775:../Includes/core_cm4.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 776:../Includes/core_cm4.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 777:../Includes/core_cm4.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 778:../Includes/core_cm4.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 779:../Includes/core_cm4.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 780:../Includes/core_cm4.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 781:../Includes/core_cm4.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 782:../Includes/core_cm4.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 783:../Includes/core_cm4.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 784:../Includes/core_cm4.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 785:../Includes/core_cm4.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 786:../Includes/core_cm4.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 787:../Includes/core_cm4.h **** } ITM_Type;
 788:../Includes/core_cm4.h **** 
 789:../Includes/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 790:../Includes/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 791:../Includes/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 792:../Includes/core_cm4.h **** 
 793:../Includes/core_cm4.h **** /* ITM Trace Control Register Definitions */
 794:../Includes/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 795:../Includes/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 796:../Includes/core_cm4.h **** 
 797:../Includes/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 798:../Includes/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 799:../Includes/core_cm4.h **** 
 800:../Includes/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 801:../Includes/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 802:../Includes/core_cm4.h **** 
 803:../Includes/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 804:../Includes/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 805:../Includes/core_cm4.h **** 
 806:../Includes/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 807:../Includes/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 808:../Includes/core_cm4.h **** 
 809:../Includes/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 810:../Includes/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 811:../Includes/core_cm4.h **** 
 812:../Includes/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 813:../Includes/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 814:../Includes/core_cm4.h **** 
 815:../Includes/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 816:../Includes/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 817:../Includes/core_cm4.h **** 
 818:../Includes/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 819:../Includes/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 820:../Includes/core_cm4.h **** 
 821:../Includes/core_cm4.h **** /* ITM Integration Write Register Definitions */
 822:../Includes/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 823:../Includes/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 824:../Includes/core_cm4.h **** 
 825:../Includes/core_cm4.h **** /* ITM Integration Read Register Definitions */
 826:../Includes/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 827:../Includes/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 828:../Includes/core_cm4.h **** 
 829:../Includes/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 830:../Includes/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 831:../Includes/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 832:../Includes/core_cm4.h **** 
 833:../Includes/core_cm4.h **** /* ITM Lock Status Register Definitions */
 834:../Includes/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 835:../Includes/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 836:../Includes/core_cm4.h **** 
 837:../Includes/core_cm4.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 838:../Includes/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 839:../Includes/core_cm4.h **** 
 840:../Includes/core_cm4.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 841:../Includes/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 842:../Includes/core_cm4.h **** 
 843:../Includes/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 844:../Includes/core_cm4.h **** 
 845:../Includes/core_cm4.h **** 
 846:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 847:../Includes/core_cm4.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 848:../Includes/core_cm4.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 849:../Includes/core_cm4.h ****   @{
 850:../Includes/core_cm4.h ****  */
 851:../Includes/core_cm4.h **** 
 852:../Includes/core_cm4.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 853:../Includes/core_cm4.h ****  */
 854:../Includes/core_cm4.h **** typedef struct
 855:../Includes/core_cm4.h **** {
 856:../Includes/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 857:../Includes/core_cm4.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 858:../Includes/core_cm4.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 859:../Includes/core_cm4.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 860:../Includes/core_cm4.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 861:../Includes/core_cm4.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 862:../Includes/core_cm4.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 863:../Includes/core_cm4.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 864:../Includes/core_cm4.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 865:../Includes/core_cm4.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 866:../Includes/core_cm4.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 867:../Includes/core_cm4.h ****        uint32_t RESERVED0[1];
 868:../Includes/core_cm4.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 869:../Includes/core_cm4.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 870:../Includes/core_cm4.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 871:../Includes/core_cm4.h ****        uint32_t RESERVED1[1];
 872:../Includes/core_cm4.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 873:../Includes/core_cm4.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 874:../Includes/core_cm4.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 875:../Includes/core_cm4.h ****        uint32_t RESERVED2[1];
 876:../Includes/core_cm4.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 877:../Includes/core_cm4.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 878:../Includes/core_cm4.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 879:../Includes/core_cm4.h **** } DWT_Type;
 880:../Includes/core_cm4.h **** 
 881:../Includes/core_cm4.h **** /* DWT Control Register Definitions */
 882:../Includes/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 883:../Includes/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 884:../Includes/core_cm4.h **** 
 885:../Includes/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 886:../Includes/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 887:../Includes/core_cm4.h **** 
 888:../Includes/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 889:../Includes/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 890:../Includes/core_cm4.h **** 
 891:../Includes/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 892:../Includes/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 893:../Includes/core_cm4.h **** 
 894:../Includes/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 895:../Includes/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 896:../Includes/core_cm4.h **** 
 897:../Includes/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 898:../Includes/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 899:../Includes/core_cm4.h **** 
 900:../Includes/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 901:../Includes/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 902:../Includes/core_cm4.h **** 
 903:../Includes/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 904:../Includes/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 905:../Includes/core_cm4.h **** 
 906:../Includes/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 907:../Includes/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 908:../Includes/core_cm4.h **** 
 909:../Includes/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 910:../Includes/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 911:../Includes/core_cm4.h **** 
 912:../Includes/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 913:../Includes/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 914:../Includes/core_cm4.h **** 
 915:../Includes/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 916:../Includes/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 917:../Includes/core_cm4.h **** 
 918:../Includes/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 919:../Includes/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 920:../Includes/core_cm4.h **** 
 921:../Includes/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 922:../Includes/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 923:../Includes/core_cm4.h **** 
 924:../Includes/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 925:../Includes/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 926:../Includes/core_cm4.h **** 
 927:../Includes/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 928:../Includes/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 929:../Includes/core_cm4.h **** 
 930:../Includes/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 931:../Includes/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 932:../Includes/core_cm4.h **** 
 933:../Includes/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 934:../Includes/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 935:../Includes/core_cm4.h **** 
 936:../Includes/core_cm4.h **** /* DWT CPI Count Register Definitions */
 937:../Includes/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 938:../Includes/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 939:../Includes/core_cm4.h **** 
 940:../Includes/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 941:../Includes/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 942:../Includes/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 943:../Includes/core_cm4.h **** 
 944:../Includes/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 945:../Includes/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 946:../Includes/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 947:../Includes/core_cm4.h **** 
 948:../Includes/core_cm4.h **** /* DWT LSU Count Register Definitions */
 949:../Includes/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 950:../Includes/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 951:../Includes/core_cm4.h **** 
 952:../Includes/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 953:../Includes/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 954:../Includes/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 955:../Includes/core_cm4.h **** 
 956:../Includes/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
 957:../Includes/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 958:../Includes/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 959:../Includes/core_cm4.h **** 
 960:../Includes/core_cm4.h **** /* DWT Comparator Function Register Definitions */
 961:../Includes/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 962:../Includes/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 963:../Includes/core_cm4.h **** 
 964:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 965:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 966:../Includes/core_cm4.h **** 
 967:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 968:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 969:../Includes/core_cm4.h **** 
 970:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 971:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 972:../Includes/core_cm4.h **** 
 973:../Includes/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 974:../Includes/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 975:../Includes/core_cm4.h **** 
 976:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 977:../Includes/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 978:../Includes/core_cm4.h **** 
 979:../Includes/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 980:../Includes/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 981:../Includes/core_cm4.h **** 
 982:../Includes/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 983:../Includes/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 984:../Includes/core_cm4.h **** 
 985:../Includes/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 986:../Includes/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 987:../Includes/core_cm4.h **** 
 988:../Includes/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
 989:../Includes/core_cm4.h **** 
 990:../Includes/core_cm4.h **** 
 991:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
 992:../Includes/core_cm4.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 993:../Includes/core_cm4.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 994:../Includes/core_cm4.h ****   @{
 995:../Includes/core_cm4.h ****  */
 996:../Includes/core_cm4.h **** 
 997:../Includes/core_cm4.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 998:../Includes/core_cm4.h ****  */
 999:../Includes/core_cm4.h **** typedef struct
1000:../Includes/core_cm4.h **** {
1001:../Includes/core_cm4.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1002:../Includes/core_cm4.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1003:../Includes/core_cm4.h ****        uint32_t RESERVED0[2];
1004:../Includes/core_cm4.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1005:../Includes/core_cm4.h ****        uint32_t RESERVED1[55];
1006:../Includes/core_cm4.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1007:../Includes/core_cm4.h ****        uint32_t RESERVED2[131];
1008:../Includes/core_cm4.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1009:../Includes/core_cm4.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1010:../Includes/core_cm4.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1011:../Includes/core_cm4.h ****        uint32_t RESERVED3[759];
1012:../Includes/core_cm4.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1013:../Includes/core_cm4.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1014:../Includes/core_cm4.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1015:../Includes/core_cm4.h ****        uint32_t RESERVED4[1];
1016:../Includes/core_cm4.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1017:../Includes/core_cm4.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1018:../Includes/core_cm4.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1019:../Includes/core_cm4.h ****        uint32_t RESERVED5[39];
1020:../Includes/core_cm4.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1021:../Includes/core_cm4.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1022:../Includes/core_cm4.h ****        uint32_t RESERVED7[8];
1023:../Includes/core_cm4.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1024:../Includes/core_cm4.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1025:../Includes/core_cm4.h **** } TPI_Type;
1026:../Includes/core_cm4.h **** 
1027:../Includes/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1028:../Includes/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
1029:../Includes/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1030:../Includes/core_cm4.h **** 
1031:../Includes/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1032:../Includes/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
1033:../Includes/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1034:../Includes/core_cm4.h **** 
1035:../Includes/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1036:../Includes/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
1037:../Includes/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1038:../Includes/core_cm4.h **** 
1039:../Includes/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
1040:../Includes/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1041:../Includes/core_cm4.h **** 
1042:../Includes/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
1043:../Includes/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1044:../Includes/core_cm4.h **** 
1045:../Includes/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
1046:../Includes/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1047:../Includes/core_cm4.h **** 
1048:../Includes/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1049:../Includes/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
1050:../Includes/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1051:../Includes/core_cm4.h **** 
1052:../Includes/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
1053:../Includes/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1054:../Includes/core_cm4.h **** 
1055:../Includes/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1056:../Includes/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
1057:../Includes/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1058:../Includes/core_cm4.h **** 
1059:../Includes/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1060:../Includes/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1061:../Includes/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1062:../Includes/core_cm4.h **** 
1063:../Includes/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1064:../Includes/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1065:../Includes/core_cm4.h **** 
1066:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1067:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1068:../Includes/core_cm4.h **** 
1069:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1070:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1071:../Includes/core_cm4.h **** 
1072:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
1073:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1074:../Includes/core_cm4.h **** 
1075:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
1076:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1077:../Includes/core_cm4.h **** 
1078:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
1079:../Includes/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1080:../Includes/core_cm4.h **** 
1081:../Includes/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1082:../Includes/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
1083:../Includes/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1084:../Includes/core_cm4.h **** 
1085:../Includes/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
1087:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:../Includes/core_cm4.h **** 
1089:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
1090:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:../Includes/core_cm4.h **** 
1092:../Includes/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
1093:../Includes/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:../Includes/core_cm4.h **** 
1095:../Includes/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
1096:../Includes/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:../Includes/core_cm4.h **** 
1098:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
1099:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:../Includes/core_cm4.h **** 
1101:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
1102:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:../Includes/core_cm4.h **** 
1104:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
1105:../Includes/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:../Includes/core_cm4.h **** 
1107:../Includes/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1108:../Includes/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
1109:../Includes/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1110:../Includes/core_cm4.h **** 
1111:../Includes/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1112:../Includes/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1113:../Includes/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1114:../Includes/core_cm4.h **** 
1115:../Includes/core_cm4.h **** /* TPI DEVID Register Definitions */
1116:../Includes/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1117:../Includes/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1118:../Includes/core_cm4.h **** 
1119:../Includes/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1120:../Includes/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1121:../Includes/core_cm4.h **** 
1122:../Includes/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1123:../Includes/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1124:../Includes/core_cm4.h **** 
1125:../Includes/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1126:../Includes/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1127:../Includes/core_cm4.h **** 
1128:../Includes/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1129:../Includes/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1130:../Includes/core_cm4.h **** 
1131:../Includes/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1132:../Includes/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1133:../Includes/core_cm4.h **** 
1134:../Includes/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1135:../Includes/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1136:../Includes/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1137:../Includes/core_cm4.h **** 
1138:../Includes/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1139:../Includes/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:../Includes/core_cm4.h **** 
1141:../Includes/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1142:../Includes/core_cm4.h **** 
1143:../Includes/core_cm4.h **** 
1144:../Includes/core_cm4.h **** #if (__MPU_PRESENT == 1)
1145:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
1146:../Includes/core_cm4.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1147:../Includes/core_cm4.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1148:../Includes/core_cm4.h ****   @{
1149:../Includes/core_cm4.h ****  */
1150:../Includes/core_cm4.h **** 
1151:../Includes/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1152:../Includes/core_cm4.h ****  */
1153:../Includes/core_cm4.h **** typedef struct
1154:../Includes/core_cm4.h **** {
1155:../Includes/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1156:../Includes/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1157:../Includes/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1158:../Includes/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1159:../Includes/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1160:../Includes/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1161:../Includes/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1162:../Includes/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1163:../Includes/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1164:../Includes/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1165:../Includes/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1166:../Includes/core_cm4.h **** } MPU_Type;
1167:../Includes/core_cm4.h **** 
1168:../Includes/core_cm4.h **** /* MPU Type Register */
1169:../Includes/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1170:../Includes/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1171:../Includes/core_cm4.h **** 
1172:../Includes/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1173:../Includes/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1174:../Includes/core_cm4.h **** 
1175:../Includes/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1176:../Includes/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1177:../Includes/core_cm4.h **** 
1178:../Includes/core_cm4.h **** /* MPU Control Register */
1179:../Includes/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1180:../Includes/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1181:../Includes/core_cm4.h **** 
1182:../Includes/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1183:../Includes/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1184:../Includes/core_cm4.h **** 
1185:../Includes/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1186:../Includes/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1187:../Includes/core_cm4.h **** 
1188:../Includes/core_cm4.h **** /* MPU Region Number Register */
1189:../Includes/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1190:../Includes/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1191:../Includes/core_cm4.h **** 
1192:../Includes/core_cm4.h **** /* MPU Region Base Address Register */
1193:../Includes/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1194:../Includes/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1195:../Includes/core_cm4.h **** 
1196:../Includes/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1197:../Includes/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1198:../Includes/core_cm4.h **** 
1199:../Includes/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1200:../Includes/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1201:../Includes/core_cm4.h **** 
1202:../Includes/core_cm4.h **** /* MPU Region Attribute and Size Register */
1203:../Includes/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1204:../Includes/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1205:../Includes/core_cm4.h **** 
1206:../Includes/core_cm4.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1207:../Includes/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1208:../Includes/core_cm4.h **** 
1209:../Includes/core_cm4.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1210:../Includes/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1211:../Includes/core_cm4.h **** 
1212:../Includes/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1213:../Includes/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1214:../Includes/core_cm4.h **** 
1215:../Includes/core_cm4.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1216:../Includes/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1217:../Includes/core_cm4.h **** 
1218:../Includes/core_cm4.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1219:../Includes/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1220:../Includes/core_cm4.h **** 
1221:../Includes/core_cm4.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1222:../Includes/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1223:../Includes/core_cm4.h **** 
1224:../Includes/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1225:../Includes/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1226:../Includes/core_cm4.h **** 
1227:../Includes/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1228:../Includes/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1229:../Includes/core_cm4.h **** 
1230:../Includes/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1231:../Includes/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1232:../Includes/core_cm4.h **** 
1233:../Includes/core_cm4.h **** /*@} end of group CMSIS_MPU */
1234:../Includes/core_cm4.h **** #endif
1235:../Includes/core_cm4.h **** 
1236:../Includes/core_cm4.h **** 
1237:../Includes/core_cm4.h **** #if (__FPU_PRESENT == 1)
1238:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
1239:../Includes/core_cm4.h ****     \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1240:../Includes/core_cm4.h ****     \brief      Type definitions for the Floating Point Unit (FPU)
1241:../Includes/core_cm4.h ****   @{
1242:../Includes/core_cm4.h ****  */
1243:../Includes/core_cm4.h **** 
1244:../Includes/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
1245:../Includes/core_cm4.h ****  */
1246:../Includes/core_cm4.h **** typedef struct
1247:../Includes/core_cm4.h **** {
1248:../Includes/core_cm4.h ****        uint32_t RESERVED0[1];
1249:../Includes/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1250:../Includes/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1251:../Includes/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1252:../Includes/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1253:../Includes/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1254:../Includes/core_cm4.h **** } FPU_Type;
1255:../Includes/core_cm4.h **** 
1256:../Includes/core_cm4.h **** /* Floating-Point Context Control Register */
1257:../Includes/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
1258:../Includes/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1259:../Includes/core_cm4.h **** 
1260:../Includes/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
1261:../Includes/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1262:../Includes/core_cm4.h **** 
1263:../Includes/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
1264:../Includes/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1265:../Includes/core_cm4.h **** 
1266:../Includes/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
1267:../Includes/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1268:../Includes/core_cm4.h **** 
1269:../Includes/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
1270:../Includes/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1271:../Includes/core_cm4.h **** 
1272:../Includes/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
1273:../Includes/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1274:../Includes/core_cm4.h **** 
1275:../Includes/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
1276:../Includes/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1277:../Includes/core_cm4.h **** 
1278:../Includes/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
1279:../Includes/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1280:../Includes/core_cm4.h **** 
1281:../Includes/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
1282:../Includes/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1283:../Includes/core_cm4.h **** 
1284:../Includes/core_cm4.h **** /* Floating-Point Context Address Register */
1285:../Includes/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
1286:../Includes/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1287:../Includes/core_cm4.h **** 
1288:../Includes/core_cm4.h **** /* Floating-Point Default Status Control Register */
1289:../Includes/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
1290:../Includes/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1291:../Includes/core_cm4.h **** 
1292:../Includes/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
1293:../Includes/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1294:../Includes/core_cm4.h **** 
1295:../Includes/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
1296:../Includes/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1297:../Includes/core_cm4.h **** 
1298:../Includes/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
1299:../Includes/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1300:../Includes/core_cm4.h **** 
1301:../Includes/core_cm4.h **** /* Media and FP Feature Register 0 */
1302:../Includes/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
1303:../Includes/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1304:../Includes/core_cm4.h **** 
1305:../Includes/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
1306:../Includes/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1307:../Includes/core_cm4.h **** 
1308:../Includes/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
1309:../Includes/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1310:../Includes/core_cm4.h **** 
1311:../Includes/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
1312:../Includes/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1313:../Includes/core_cm4.h **** 
1314:../Includes/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
1315:../Includes/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1316:../Includes/core_cm4.h **** 
1317:../Includes/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
1318:../Includes/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1319:../Includes/core_cm4.h **** 
1320:../Includes/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
1321:../Includes/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1322:../Includes/core_cm4.h **** 
1323:../Includes/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
1324:../Includes/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1325:../Includes/core_cm4.h **** 
1326:../Includes/core_cm4.h **** /* Media and FP Feature Register 1 */
1327:../Includes/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
1328:../Includes/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1329:../Includes/core_cm4.h **** 
1330:../Includes/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
1331:../Includes/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1332:../Includes/core_cm4.h **** 
1333:../Includes/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
1334:../Includes/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1335:../Includes/core_cm4.h **** 
1336:../Includes/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
1337:../Includes/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1338:../Includes/core_cm4.h **** 
1339:../Includes/core_cm4.h **** /*@} end of group CMSIS_FPU */
1340:../Includes/core_cm4.h **** #endif
1341:../Includes/core_cm4.h **** 
1342:../Includes/core_cm4.h **** 
1343:../Includes/core_cm4.h **** /** \ingroup  CMSIS_core_register
1344:../Includes/core_cm4.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1345:../Includes/core_cm4.h ****     \brief      Type definitions for the Core Debug Registers
1346:../Includes/core_cm4.h ****   @{
1347:../Includes/core_cm4.h ****  */
1348:../Includes/core_cm4.h **** 
1349:../Includes/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1350:../Includes/core_cm4.h ****  */
1351:../Includes/core_cm4.h **** typedef struct
1352:../Includes/core_cm4.h **** {
1353:../Includes/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1354:../Includes/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1355:../Includes/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1356:../Includes/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1357:../Includes/core_cm4.h **** } CoreDebug_Type;
1358:../Includes/core_cm4.h **** 
1359:../Includes/core_cm4.h **** /* Debug Halting Control and Status Register */
1360:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1361:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1362:../Includes/core_cm4.h **** 
1363:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1364:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1365:../Includes/core_cm4.h **** 
1366:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1367:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1368:../Includes/core_cm4.h **** 
1369:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1370:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1371:../Includes/core_cm4.h **** 
1372:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1373:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1374:../Includes/core_cm4.h **** 
1375:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1376:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1377:../Includes/core_cm4.h **** 
1378:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1379:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1380:../Includes/core_cm4.h **** 
1381:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1382:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1383:../Includes/core_cm4.h **** 
1384:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1385:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1386:../Includes/core_cm4.h **** 
1387:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1388:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1389:../Includes/core_cm4.h **** 
1390:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1391:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1392:../Includes/core_cm4.h **** 
1393:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1394:../Includes/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1395:../Includes/core_cm4.h **** 
1396:../Includes/core_cm4.h **** /* Debug Core Register Selector Register */
1397:../Includes/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1398:../Includes/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1399:../Includes/core_cm4.h **** 
1400:../Includes/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1401:../Includes/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1402:../Includes/core_cm4.h **** 
1403:../Includes/core_cm4.h **** /* Debug Exception and Monitor Control Register */
1404:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1405:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1406:../Includes/core_cm4.h **** 
1407:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1408:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1409:../Includes/core_cm4.h **** 
1410:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1411:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1412:../Includes/core_cm4.h **** 
1413:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1414:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1415:../Includes/core_cm4.h **** 
1416:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1417:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1418:../Includes/core_cm4.h **** 
1419:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1420:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1421:../Includes/core_cm4.h **** 
1422:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1423:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1424:../Includes/core_cm4.h **** 
1425:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1426:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1427:../Includes/core_cm4.h **** 
1428:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1429:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1430:../Includes/core_cm4.h **** 
1431:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1432:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1433:../Includes/core_cm4.h **** 
1434:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1435:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1436:../Includes/core_cm4.h **** 
1437:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1438:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1439:../Includes/core_cm4.h **** 
1440:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1441:../Includes/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1442:../Includes/core_cm4.h **** 
1443:../Includes/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1444:../Includes/core_cm4.h **** 
1445:../Includes/core_cm4.h **** 
1446:../Includes/core_cm4.h **** /** \ingroup    CMSIS_core_register
1447:../Includes/core_cm4.h ****     \defgroup   CMSIS_core_base     Core Definitions
1448:../Includes/core_cm4.h ****     \brief      Definitions for base addresses, unions, and structures.
1449:../Includes/core_cm4.h ****   @{
1450:../Includes/core_cm4.h ****  */
1451:../Includes/core_cm4.h **** 
1452:../Includes/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1453:../Includes/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1454:../Includes/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1455:../Includes/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1456:../Includes/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1457:../Includes/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1458:../Includes/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1459:../Includes/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1460:../Includes/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1461:../Includes/core_cm4.h **** 
1462:../Includes/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1463:../Includes/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1464:../Includes/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1465:../Includes/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1466:../Includes/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1467:../Includes/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1468:../Includes/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1469:../Includes/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1470:../Includes/core_cm4.h **** 
1471:../Includes/core_cm4.h **** #if (__MPU_PRESENT == 1)
1472:../Includes/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1473:../Includes/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1474:../Includes/core_cm4.h **** #endif
1475:../Includes/core_cm4.h **** 
1476:../Includes/core_cm4.h **** #if (__FPU_PRESENT == 1)
1477:../Includes/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1478:../Includes/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1479:../Includes/core_cm4.h **** #endif
1480:../Includes/core_cm4.h **** 
1481:../Includes/core_cm4.h **** /*@} */
1482:../Includes/core_cm4.h **** 
1483:../Includes/core_cm4.h **** 
1484:../Includes/core_cm4.h **** 
1485:../Includes/core_cm4.h **** /*******************************************************************************
1486:../Includes/core_cm4.h ****  *                Hardware Abstraction Layer
1487:../Includes/core_cm4.h ****   Core Function Interface contains:
1488:../Includes/core_cm4.h ****   - Core NVIC Functions
1489:../Includes/core_cm4.h ****   - Core SysTick Functions
1490:../Includes/core_cm4.h ****   - Core Debug Functions
1491:../Includes/core_cm4.h ****   - Core Register Access Functions
1492:../Includes/core_cm4.h ****  ******************************************************************************/
1493:../Includes/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1494:../Includes/core_cm4.h **** */
1495:../Includes/core_cm4.h **** 
1496:../Includes/core_cm4.h **** 
1497:../Includes/core_cm4.h **** 
1498:../Includes/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1499:../Includes/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1500:../Includes/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1501:../Includes/core_cm4.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1502:../Includes/core_cm4.h ****     @{
1503:../Includes/core_cm4.h ****  */
1504:../Includes/core_cm4.h **** 
1505:../Includes/core_cm4.h **** /** \brief  Set Priority Grouping
1506:../Includes/core_cm4.h **** 
1507:../Includes/core_cm4.h ****   The function sets the priority grouping field using the required unlock sequence.
1508:../Includes/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1509:../Includes/core_cm4.h ****   Only values from 0..7 are used.
1510:../Includes/core_cm4.h ****   In case of a conflict between priority grouping and available
1511:../Includes/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1512:../Includes/core_cm4.h **** 
1513:../Includes/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field.
1514:../Includes/core_cm4.h ****  */
1515:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1516:../Includes/core_cm4.h **** {
1517:../Includes/core_cm4.h ****   uint32_t reg_value;
1518:../Includes/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1519:../Includes/core_cm4.h **** 
1520:../Includes/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1521:../Includes/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear 
1522:../Includes/core_cm4.h ****   reg_value  =  (reg_value                                   |
1523:../Includes/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1524:../Includes/core_cm4.h ****                 (PriorityGroupTmp << 8)                       );              /* Insert write key a
1525:../Includes/core_cm4.h ****   SCB->AIRCR =  reg_value;
1526:../Includes/core_cm4.h **** }
1527:../Includes/core_cm4.h **** 
1528:../Includes/core_cm4.h **** 
1529:../Includes/core_cm4.h **** /** \brief  Get Priority Grouping
1530:../Includes/core_cm4.h **** 
1531:../Includes/core_cm4.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1532:../Includes/core_cm4.h **** 
1533:../Includes/core_cm4.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1534:../Includes/core_cm4.h ****  */
1535:../Includes/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1536:../Includes/core_cm4.h **** {
1537:../Includes/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1538:../Includes/core_cm4.h **** }
1539:../Includes/core_cm4.h **** 
1540:../Includes/core_cm4.h **** 
1541:../Includes/core_cm4.h **** /** \brief  Enable External Interrupt
1542:../Includes/core_cm4.h **** 
1543:../Includes/core_cm4.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1544:../Includes/core_cm4.h **** 
1545:../Includes/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1546:../Includes/core_cm4.h ****  */
1547:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1548:../Includes/core_cm4.h **** {
  27              		.loc 1 1548 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 0346     		mov	r3, r0
  40 0008 FB71     		strb	r3, [r7, #7]
1549:../Includes/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  41              		.loc 1 1549 0
  42 000a 0949     		ldr	r1, .L2
  43 000c 97F90730 		ldrsb	r3, [r7, #7]
  44 0010 5B09     		lsrs	r3, r3, #5
  45 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  46 0014 02F01F02 		and	r2, r2, #31
  47 0018 0120     		movs	r0, #1
  48 001a 00FA02F2 		lsl	r2, r0, r2
  49 001e 41F82320 		str	r2, [r1, r3, lsl #2]
1550:../Includes/core_cm4.h **** }
  50              		.loc 1 1550 0
  51 0022 00BF     		nop
  52 0024 0C37     		adds	r7, r7, #12
  53              		.cfi_def_cfa_offset 4
  54 0026 BD46     		mov	sp, r7
  55              		.cfi_def_cfa_register 13
  56              		@ sp needed
  57 0028 5DF8047B 		ldr	r7, [sp], #4
  58              		.cfi_restore 7
  59              		.cfi_def_cfa_offset 0
  60 002c 7047     		bx	lr
  61              	.L3:
  62 002e 00BF     		.align	2
  63              	.L2:
  64 0030 00E100E0 		.word	-536813312
  65              		.cfi_endproc
  66              	.LFE108:
  68              		.section	.text.NVIC_SetPriority,"ax",%progbits
  69              		.align	1
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	NVIC_SetPriority:
  76              	.LFB114:
1551:../Includes/core_cm4.h **** 
1552:../Includes/core_cm4.h **** 
1553:../Includes/core_cm4.h **** /** \brief  Disable External Interrupt
1554:../Includes/core_cm4.h **** 
1555:../Includes/core_cm4.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1556:../Includes/core_cm4.h **** 
1557:../Includes/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1558:../Includes/core_cm4.h ****  */
1559:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1560:../Includes/core_cm4.h **** {
1561:../Includes/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1562:../Includes/core_cm4.h **** }
1563:../Includes/core_cm4.h **** 
1564:../Includes/core_cm4.h **** 
1565:../Includes/core_cm4.h **** /** \brief  Get Pending Interrupt
1566:../Includes/core_cm4.h **** 
1567:../Includes/core_cm4.h ****     The function reads the pending register in the NVIC and returns the pending bit
1568:../Includes/core_cm4.h ****     for the specified interrupt.
1569:../Includes/core_cm4.h **** 
1570:../Includes/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1571:../Includes/core_cm4.h **** 
1572:../Includes/core_cm4.h ****     \return             0  Interrupt status is not pending.
1573:../Includes/core_cm4.h ****     \return             1  Interrupt status is pending.
1574:../Includes/core_cm4.h ****  */
1575:../Includes/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1576:../Includes/core_cm4.h **** {
1577:../Includes/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1578:../Includes/core_cm4.h **** }
1579:../Includes/core_cm4.h **** 
1580:../Includes/core_cm4.h **** 
1581:../Includes/core_cm4.h **** /** \brief  Set Pending Interrupt
1582:../Includes/core_cm4.h **** 
1583:../Includes/core_cm4.h ****     The function sets the pending bit of an external interrupt.
1584:../Includes/core_cm4.h **** 
1585:../Includes/core_cm4.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1586:../Includes/core_cm4.h ****  */
1587:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1588:../Includes/core_cm4.h **** {
1589:../Includes/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1590:../Includes/core_cm4.h **** }
1591:../Includes/core_cm4.h **** 
1592:../Includes/core_cm4.h **** 
1593:../Includes/core_cm4.h **** /** \brief  Clear Pending Interrupt
1594:../Includes/core_cm4.h **** 
1595:../Includes/core_cm4.h ****     The function clears the pending bit of an external interrupt.
1596:../Includes/core_cm4.h **** 
1597:../Includes/core_cm4.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1598:../Includes/core_cm4.h ****  */
1599:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1600:../Includes/core_cm4.h **** {
1601:../Includes/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1602:../Includes/core_cm4.h **** }
1603:../Includes/core_cm4.h **** 
1604:../Includes/core_cm4.h **** 
1605:../Includes/core_cm4.h **** /** \brief  Get Active Interrupt
1606:../Includes/core_cm4.h **** 
1607:../Includes/core_cm4.h ****     The function reads the active register in NVIC and returns the active bit.
1608:../Includes/core_cm4.h **** 
1609:../Includes/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1610:../Includes/core_cm4.h **** 
1611:../Includes/core_cm4.h ****     \return             0  Interrupt status is not active.
1612:../Includes/core_cm4.h ****     \return             1  Interrupt status is active.
1613:../Includes/core_cm4.h ****  */
1614:../Includes/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1615:../Includes/core_cm4.h **** {
1616:../Includes/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1617:../Includes/core_cm4.h **** }
1618:../Includes/core_cm4.h **** 
1619:../Includes/core_cm4.h **** 
1620:../Includes/core_cm4.h **** /** \brief  Set Interrupt Priority
1621:../Includes/core_cm4.h **** 
1622:../Includes/core_cm4.h ****     The function sets the priority of an interrupt.
1623:../Includes/core_cm4.h **** 
1624:../Includes/core_cm4.h ****     \note The priority cannot be set for every core interrupt.
1625:../Includes/core_cm4.h **** 
1626:../Includes/core_cm4.h ****     \param [in]      IRQn  Interrupt number.
1627:../Includes/core_cm4.h ****     \param [in]  priority  Priority to set.
1628:../Includes/core_cm4.h ****  */
1629:../Includes/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1630:../Includes/core_cm4.h **** {
  77              		.loc 1 1630 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 83B0     		sub	sp, sp, #12
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  89 0006 0346     		mov	r3, r0
  90 0008 3960     		str	r1, [r7]
  91 000a FB71     		strb	r3, [r7, #7]
1631:../Includes/core_cm4.h ****   if((int32_t)IRQn < 0) {
  92              		.loc 1 1631 0
  93 000c 97F90730 		ldrsb	r3, [r7, #7]
  94 0010 002B     		cmp	r3, #0
  95 0012 0BDA     		bge	.L5
1632:../Includes/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BIT
  96              		.loc 1 1632 0
  97 0014 0D49     		ldr	r1, .L8
  98 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  99 0018 03F00F03 		and	r3, r3, #15
 100 001c 043B     		subs	r3, r3, #4
 101 001e 3A68     		ldr	r2, [r7]
 102 0020 D2B2     		uxtb	r2, r2
 103 0022 1201     		lsls	r2, r2, #4
 104 0024 D2B2     		uxtb	r2, r2
 105 0026 0B44     		add	r3, r3, r1
 106 0028 1A76     		strb	r2, [r3, #24]
1633:../Includes/core_cm4.h ****   }
1634:../Includes/core_cm4.h ****   else {
1635:../Includes/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BIT
1636:../Includes/core_cm4.h ****   }
1637:../Includes/core_cm4.h **** }
 107              		.loc 1 1637 0
 108 002a 09E0     		b	.L7
 109              	.L5:
1635:../Includes/core_cm4.h ****   }
 110              		.loc 1 1635 0
 111 002c 0849     		ldr	r1, .L8+4
 112 002e 97F90730 		ldrsb	r3, [r7, #7]
 113 0032 3A68     		ldr	r2, [r7]
 114 0034 D2B2     		uxtb	r2, r2
 115 0036 1201     		lsls	r2, r2, #4
 116 0038 D2B2     		uxtb	r2, r2
 117 003a 0B44     		add	r3, r3, r1
 118 003c 83F80023 		strb	r2, [r3, #768]
 119              	.L7:
 120              		.loc 1 1637 0
 121 0040 00BF     		nop
 122 0042 0C37     		adds	r7, r7, #12
 123              		.cfi_def_cfa_offset 4
 124 0044 BD46     		mov	sp, r7
 125              		.cfi_def_cfa_register 13
 126              		@ sp needed
 127 0046 5DF8047B 		ldr	r7, [sp], #4
 128              		.cfi_restore 7
 129              		.cfi_def_cfa_offset 0
 130 004a 7047     		bx	lr
 131              	.L9:
 132              		.align	2
 133              	.L8:
 134 004c 00ED00E0 		.word	-536810240
 135 0050 00E100E0 		.word	-536813312
 136              		.cfi_endproc
 137              	.LFE114:
 139              		.section	.rodata.quadTable,"a",%progbits
 140              		.align	2
 143              	quadTable:
 144 0000 05       		.byte	5
 145 0001 FF       		.byte	-1
 146 0002 01       		.byte	1
 147 0003 05       		.byte	5
 148 0004 01       		.byte	1
 149 0005 05       		.byte	5
 150 0006 05       		.byte	5
 151 0007 FF       		.byte	-1
 152 0008 FF       		.byte	-1
 153 0009 05       		.byte	5
 154 000a 05       		.byte	5
 155 000b 01       		.byte	1
 156 000c 05       		.byte	5
 157 000d 01       		.byte	1
 158 000e FF       		.byte	-1
 159 000f 05       		.byte	5
 160              		.section	.bss.ticksLeft,"aw",%nobits
 161              		.align	2
 164              	ticksLeft:
 165 0000 00000000 		.space	4
 166              		.section	.bss.errorLeft,"aw",%nobits
 169              	errorLeft:
 170 0000 00       		.space	1
 171              		.section	.bss.timeLeft,"aw",%nobits
 172              		.align	2
 175              	timeLeft:
 176 0000 00000000 		.space	4
 177              		.section	.bss.ticksRight,"aw",%nobits
 178              		.align	2
 181              	ticksRight:
 182 0000 00000000 		.space	4
 183              		.section	.bss.errorRight,"aw",%nobits
 186              	errorRight:
 187 0000 00       		.space	1
 188              		.section	.bss.timeRight,"aw",%nobits
 189              		.align	2
 192              	timeRight:
 193 0000 00000000 		.space	4
 194              		.section	.bss.clh,"aw",%nobits
 195              		.align	2
 198              	clh:
 199 0000 00000000 		.space	56
 199      00000000 
 199      00000000 
 199      00000000 
 199      00000000 
 200              		.section	.text.FTM1_IRQHandler,"ax",%progbits
 201              		.align	1
 202              		.global	FTM1_IRQHandler
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	FTM1_IRQHandler:
 209              	.LFB125:
 210              		.file 2 "../Sources/drive/quad.c"
   1:../Sources/drive/quad.c **** /**
   2:../Sources/drive/quad.c ****  *--------------------------------------------------------------------\n
   3:../Sources/drive/quad.c ****  *          HSLU T&A Hochschule Luzern Technik+Architektur            \n
   4:../Sources/drive/quad.c ****  *--------------------------------------------------------------------\n
   5:../Sources/drive/quad.c ****  *
   6:../Sources/drive/quad.c ****  * \brief         quadrature decoder
   7:../Sources/drive/quad.c ****  * \file
   8:../Sources/drive/quad.c ****  * \author        Christian Jost, christian.jost@hslu.ch
   9:../Sources/drive/quad.c ****  * \date          03.04.20018
  10:../Sources/drive/quad.c ****  *
  11:../Sources/drive/quad.c ****  * $Id: quad.c 87 2018-04-17 09:32:21Z zajost $
  12:../Sources/drive/quad.c ****  *
  13:../Sources/drive/quad.c ****  *--------------------------------------------------------------------
  14:../Sources/drive/quad.c ****  */
  15:../Sources/drive/quad.c **** 
  16:../Sources/drive/quad.c **** #include <string.h>
  17:../Sources/drive/quad.c **** #include "platform.h"
  18:../Sources/drive/quad.c **** #include "quad.h"
  19:../Sources/drive/quad.c **** #include "util.h"
  20:../Sources/drive/quad.c **** #include "term.h"
  21:../Sources/drive/quad.c **** 
  22:../Sources/drive/quad.c **** #define ERR 5
  23:../Sources/drive/quad.c **** 
  24:../Sources/drive/quad.c **** #define FTM_CLOCK                 250000    // 250 kHz
  25:../Sources/drive/quad.c **** #define FTM_PRESCALE              1         // div 1
  26:../Sources/drive/quad.c **** #define WHEEL_DIAMETER            110      // 120 mm
  27:../Sources/drive/quad.c **** #define TICKS_PER_REVOLUTION      142       // 142 ticks per wheel revolution
  28:../Sources/drive/quad.c **** 
  29:../Sources/drive/quad.c **** #define PERIODS_PER_REVOLUTION    (TICKS_PER_REVOLUTION / 4.0)                                     
  30:../Sources/drive/quad.c **** #define WHEEL_CIRCUMFERENCE       (WHEEL_DIAMETER * 3.141593)                                      
  31:../Sources/drive/quad.c **** #define UM_PER_TICK               (((10000.0 * WHEEL_CIRCUMFERENCE / TICKS_PER_REVOLUTION)+5)/10)  
  32:../Sources/drive/quad.c **** 
  33:../Sources/drive/quad.c **** // velocity  = (19.2mm * PI * 250'000 * 4) / (142 * Ticks) = (19.2mm * PI * 250'000) / (35.5 * Tick
  34:../Sources/drive/quad.c **** #define VELOCITY_PER_PERIOD       ((((uint32_t)(10 * WHEEL_CIRCUMFERENCE * FTM_CLOCK)) / (PERIODS_P
  35:../Sources/drive/quad.c **** 
  36:../Sources/drive/quad.c **** #define QuadLeftA                 ((GPIOA_PDIR & (1<<13)) != 0) // FTM1_CH1
  37:../Sources/drive/quad.c **** #define QuadLeftB                 ((GPIOA_PDIR & (1<<12)) != 0) // FTM1_CH0
  38:../Sources/drive/quad.c **** #define QuadRightA                ((GPIOB_PDIR & (1<<18)) != 0) // FTM2_CH1
  39:../Sources/drive/quad.c **** #define QuadRightB                ((GPIOB_PDIR & (1<<19)) != 0) // FTM2_CH0
  40:../Sources/drive/quad.c **** //#define QuadLeftA               (BITBAND_REG8(GPIOA_PDIR, 13))
  41:../Sources/drive/quad.c **** //#define QuadLeftB               (BITBAND_REG8(GPIOA_PDIR, 12))
  42:../Sources/drive/quad.c **** 
  43:../Sources/drive/quad.c **** 
  44:../Sources/drive/quad.c **** static const int8_t quadTable[16] =
  45:../Sources/drive/quad.c **** {       // prev  new
  46:../Sources/drive/quad.c ****         //  AB -> AB+
  47:../Sources/drive/quad.c ****   ERR,  //  00    00
  48:../Sources/drive/quad.c ****   -1,   //  00    01
  49:../Sources/drive/quad.c ****   +1,   //  00    10
  50:../Sources/drive/quad.c ****   ERR,  //  00    11
  51:../Sources/drive/quad.c **** 
  52:../Sources/drive/quad.c ****   +1,   //  01    00
  53:../Sources/drive/quad.c ****   ERR,  //  01    01
  54:../Sources/drive/quad.c ****   ERR,  //  01    10
  55:../Sources/drive/quad.c ****   -1,   //  01    11
  56:../Sources/drive/quad.c **** 
  57:../Sources/drive/quad.c ****   -1,   //  10    00
  58:../Sources/drive/quad.c ****   ERR,  //  10    01
  59:../Sources/drive/quad.c ****   ERR,  //  10    10
  60:../Sources/drive/quad.c ****   +1,   //  10    11
  61:../Sources/drive/quad.c **** 
  62:../Sources/drive/quad.c ****   ERR,  //  11    00
  63:../Sources/drive/quad.c ****   +1,   //  11    01
  64:../Sources/drive/quad.c ****   -1,   //  11    10
  65:../Sources/drive/quad.c ****   ERR,  //  11    11
  66:../Sources/drive/quad.c **** };
  67:../Sources/drive/quad.c **** 
  68:../Sources/drive/quad.c **** 
  69:../Sources/drive/quad.c **** static int32_t ticksLeft;
  70:../Sources/drive/quad.c **** static uint8_t errorLeft;
  71:../Sources/drive/quad.c **** static int32_t timeLeft;
  72:../Sources/drive/quad.c **** 
  73:../Sources/drive/quad.c **** static int32_t ticksRight;
  74:../Sources/drive/quad.c **** static uint8_t errorRight;
  75:../Sources/drive/quad.c **** static int32_t timeRight;
  76:../Sources/drive/quad.c **** 
  77:../Sources/drive/quad.c **** static tCommandLineHandler clh;                       // terminal command line handler
  78:../Sources/drive/quad.c **** 
  79:../Sources/drive/quad.c **** 
  80:../Sources/drive/quad.c **** //uint16_t times[256];
  81:../Sources/drive/quad.c **** //uint8_t index;
  82:../Sources/drive/quad.c **** //
  83:../Sources/drive/quad.c **** //int32_t speed[256];
  84:../Sources/drive/quad.c **** //uint8_t i;
  85:../Sources/drive/quad.c **** 
  86:../Sources/drive/quad.c **** 
  87:../Sources/drive/quad.c **** /**
  88:../Sources/drive/quad.c ****  * Interrupt service routine handles the
  89:../Sources/drive/quad.c ****  * left quadrature decoder
  90:../Sources/drive/quad.c ****  */
  91:../Sources/drive/quad.c **** void FTM1_IRQHandler(void)
  92:../Sources/drive/quad.c **** {
 211              		.loc 2 92 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 8
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 0000 80B4     		push	{r7}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 0002 83B0     		sub	sp, sp, #12
 220              		.cfi_def_cfa_offset 16
 221 0004 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
  93:../Sources/drive/quad.c ****   static uint8_t bits = 0;
  94:../Sources/drive/quad.c ****   static bool risingOkB = FALSE, fallingOkB = FALSE;
  95:../Sources/drive/quad.c ****   static bool risingOkA = FALSE, fallingOkA = FALSE;
  96:../Sources/drive/quad.c ****   static uint32_t risingB, fallingB;
  97:../Sources/drive/quad.c ****   static uint32_t risingA, fallingA;
  98:../Sources/drive/quad.c ****   static bool init = TRUE;
  99:../Sources/drive/quad.c ****   int8_t quadValue;
 100:../Sources/drive/quad.c ****   uint16_t chValue;
 101:../Sources/drive/quad.c ****   uint32_t time=0;
 223              		.loc 2 101 0
 224 0006 0023     		movs	r3, #0
 225 0008 3B60     		str	r3, [r7]
 102:../Sources/drive/quad.c ****   OnEnterQuadLeftISR();
 226              		.loc 2 102 0
 227 000a 894B     		ldr	r3, .L27
 228 000c 4FF40062 		mov	r2, #2048
 229 0010 9A60     		str	r2, [r3, #8]
 103:../Sources/drive/quad.c **** 
 104:../Sources/drive/quad.c ****   if (FTM1_SC & FTM_SC_TOF_MASK) {                  // check for timer overflow
 230              		.loc 2 104 0
 231 0012 884B     		ldr	r3, .L27+4
 232 0014 1B68     		ldr	r3, [r3]
 233 0016 03F08003 		and	r3, r3, #128
 234 001a 002B     		cmp	r3, #0
 235 001c 16D0     		beq	.L11
 105:../Sources/drive/quad.c ****     FTM1_SC &= ~FTM_SC_TOF_MASK;                    // Clear tof flag
 236              		.loc 2 105 0
 237 001e 854A     		ldr	r2, .L27+4
 238 0020 844B     		ldr	r3, .L27+4
 239 0022 1B68     		ldr	r3, [r3]
 240 0024 23F08003 		bic	r3, r3, #128
 241 0028 1360     		str	r3, [r2]
 106:../Sources/drive/quad.c ****     risingOkB = fallingOkB = FALSE;                 // timeout => v=0 => unsync, wait for rising or
 242              		.loc 2 106 0
 243 002a 834B     		ldr	r3, .L27+8
 244 002c 0022     		movs	r2, #0
 245 002e 1A70     		strb	r2, [r3]
 246 0030 814B     		ldr	r3, .L27+8
 247 0032 93F90020 		ldrsb	r2, [r3]
 248 0036 814B     		ldr	r3, .L27+12
 249 0038 1A70     		strb	r2, [r3]
 107:../Sources/drive/quad.c ****     risingOkA = fallingOkA = FALSE;
 250              		.loc 2 107 0
 251 003a 814B     		ldr	r3, .L27+16
 252 003c 0022     		movs	r2, #0
 253 003e 1A70     		strb	r2, [r3]
 254 0040 7F4B     		ldr	r3, .L27+16
 255 0042 93F90020 		ldrsb	r2, [r3]
 256 0046 7F4B     		ldr	r3, .L27+20
 257 0048 1A70     		strb	r2, [r3]
 258 004a 55E0     		b	.L12
 259              	.L11:
 108:../Sources/drive/quad.c ****   }
 109:../Sources/drive/quad.c ****   else {
 110:../Sources/drive/quad.c ****     bits <<= 1;                                     // quad decoder => determine the state
 260              		.loc 2 110 0
 261 004c 7E4B     		ldr	r3, .L27+24
 262 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 263 0050 5B00     		lsls	r3, r3, #1
 264 0052 DAB2     		uxtb	r2, r3
 265 0054 7C4B     		ldr	r3, .L27+24
 266 0056 1A70     		strb	r2, [r3]
 111:../Sources/drive/quad.c ****     bits |= QuadLeftA;
 267              		.loc 2 111 0
 268 0058 7C4B     		ldr	r3, .L27+28
 269 005a 1B69     		ldr	r3, [r3, #16]
 270 005c 03F40053 		and	r3, r3, #8192
 271 0060 002B     		cmp	r3, #0
 272 0062 14BF     		ite	ne
 273 0064 0123     		movne	r3, #1
 274 0066 0023     		moveq	r3, #0
 275 0068 DBB2     		uxtb	r3, r3
 276 006a 5AB2     		sxtb	r2, r3
 277 006c 764B     		ldr	r3, .L27+24
 278 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 279 0070 5BB2     		sxtb	r3, r3
 280 0072 1343     		orrs	r3, r3, r2
 281 0074 5BB2     		sxtb	r3, r3
 282 0076 DAB2     		uxtb	r2, r3
 283 0078 734B     		ldr	r3, .L27+24
 284 007a 1A70     		strb	r2, [r3]
 112:../Sources/drive/quad.c ****     bits <<= 1;
 285              		.loc 2 112 0
 286 007c 724B     		ldr	r3, .L27+24
 287 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288 0080 5B00     		lsls	r3, r3, #1
 289 0082 DAB2     		uxtb	r2, r3
 290 0084 704B     		ldr	r3, .L27+24
 291 0086 1A70     		strb	r2, [r3]
 113:../Sources/drive/quad.c ****     bits |= QuadLeftB;
 292              		.loc 2 113 0
 293 0088 704B     		ldr	r3, .L27+28
 294 008a 1B69     		ldr	r3, [r3, #16]
 295 008c 03F48053 		and	r3, r3, #4096
 296 0090 002B     		cmp	r3, #0
 297 0092 14BF     		ite	ne
 298 0094 0123     		movne	r3, #1
 299 0096 0023     		moveq	r3, #0
 300 0098 DBB2     		uxtb	r3, r3
 301 009a 5AB2     		sxtb	r2, r3
 302 009c 6A4B     		ldr	r3, .L27+24
 303 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 304 00a0 5BB2     		sxtb	r3, r3
 305 00a2 1343     		orrs	r3, r3, r2
 306 00a4 5BB2     		sxtb	r3, r3
 307 00a6 DAB2     		uxtb	r2, r3
 308 00a8 674B     		ldr	r3, .L27+24
 309 00aa 1A70     		strb	r2, [r3]
 114:../Sources/drive/quad.c **** 
 115:../Sources/drive/quad.c ****     if (init) init = FALSE;                         // ignore the first call
 310              		.loc 2 115 0
 311 00ac 684B     		ldr	r3, .L27+32
 312 00ae 93F90030 		ldrsb	r3, [r3]
 313 00b2 002B     		cmp	r3, #0
 314 00b4 03D0     		beq	.L13
 315              		.loc 2 115 0 is_stmt 0 discriminator 1
 316 00b6 664B     		ldr	r3, .L27+32
 317 00b8 0022     		movs	r2, #0
 318 00ba 1A70     		strb	r2, [r3]
 319 00bc 1CE0     		b	.L12
 320              	.L13:
 116:../Sources/drive/quad.c ****     else {
 117:../Sources/drive/quad.c ****       quadValue = quadTable[bits & 0x0F];           // calc new value with lookup-table
 321              		.loc 2 117 0 is_stmt 1
 322 00be 624B     		ldr	r3, .L27+24
 323 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 324 00c2 03F00F03 		and	r3, r3, #15
 325 00c6 634A     		ldr	r2, .L27+36
 326 00c8 D35C     		ldrb	r3, [r2, r3]
 327 00ca FB71     		strb	r3, [r7, #7]
 118:../Sources/drive/quad.c ****       if (quadValue != ERR) ticksLeft += quadValue; // add/sub tick
 328              		.loc 2 118 0
 329 00cc 97F90730 		ldrsb	r3, [r7, #7]
 330 00d0 052B     		cmp	r3, #5
 331 00d2 07D0     		beq	.L14
 332              		.loc 2 118 0 is_stmt 0 discriminator 1
 333 00d4 97F90720 		ldrsb	r2, [r7, #7]
 334 00d8 5F4B     		ldr	r3, .L27+40
 335 00da 1B68     		ldr	r3, [r3]
 336 00dc 1344     		add	r3, r3, r2
 337 00de 5E4A     		ldr	r2, .L27+40
 338 00e0 1360     		str	r3, [r2]
 339 00e2 09E0     		b	.L12
 340              	.L14:
 119:../Sources/drive/quad.c ****       else if (errorLeft < 255) errorLeft++;        // increment error counter if error has been oc
 341              		.loc 2 119 0 is_stmt 1
 342 00e4 5D4B     		ldr	r3, .L27+44
 343 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 344 00e8 FF2B     		cmp	r3, #255
 345 00ea 05D0     		beq	.L12
 346              		.loc 2 119 0 is_stmt 0 discriminator 1
 347 00ec 5B4B     		ldr	r3, .L27+44
 348 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 349 00f0 0133     		adds	r3, r3, #1
 350 00f2 DAB2     		uxtb	r2, r3
 351 00f4 594B     		ldr	r3, .L27+44
 352 00f6 1A70     		strb	r2, [r3]
 353              	.L12:
 120:../Sources/drive/quad.c ****     }
 121:../Sources/drive/quad.c ****   }
 122:../Sources/drive/quad.c **** 
 123:../Sources/drive/quad.c ****   if (FTM1_C0SC & FTM_CnSC_CHF_MASK) chValue = FTM1_C0V;  // determine the channel chValue of this 
 354              		.loc 2 123 0 is_stmt 1
 355 00f8 4E4B     		ldr	r3, .L27+4
 356 00fa DB68     		ldr	r3, [r3, #12]
 357 00fc 03F08003 		and	r3, r3, #128
 358 0100 002B     		cmp	r3, #0
 359 0102 02D0     		beq	.L15
 360              		.loc 2 123 0 is_stmt 0 discriminator 1
 361 0104 4B4B     		ldr	r3, .L27+4
 362 0106 1B69     		ldr	r3, [r3, #16]
 363 0108 BB80     		strh	r3, [r7, #4]	@ movhi
 364              	.L15:
 124:../Sources/drive/quad.c ****   if (FTM1_C1SC & FTM_CnSC_CHF_MASK) chValue = FTM1_C1V;
 365              		.loc 2 124 0 is_stmt 1
 366 010a 4A4B     		ldr	r3, .L27+4
 367 010c 5B69     		ldr	r3, [r3, #20]
 368 010e 03F08003 		and	r3, r3, #128
 369 0112 002B     		cmp	r3, #0
 370 0114 02D0     		beq	.L16
 371              		.loc 2 124 0 is_stmt 0 discriminator 1
 372 0116 474B     		ldr	r3, .L27+4
 373 0118 9B69     		ldr	r3, [r3, #24]
 374 011a BB80     		strh	r3, [r7, #4]	@ movhi
 375              	.L16:
 125:../Sources/drive/quad.c **** 
 126:../Sources/drive/quad.c ****   risingB += chValue;                         // add the channel chValue to all measurements
 376              		.loc 2 126 0 is_stmt 1
 377 011c BA88     		ldrh	r2, [r7, #4]
 378 011e 504B     		ldr	r3, .L27+48
 379 0120 1B68     		ldr	r3, [r3]
 380 0122 1344     		add	r3, r3, r2
 381 0124 4E4A     		ldr	r2, .L27+48
 382 0126 1360     		str	r3, [r2]
 127:../Sources/drive/quad.c ****   fallingB += chValue;
 383              		.loc 2 127 0
 384 0128 BA88     		ldrh	r2, [r7, #4]
 385 012a 4E4B     		ldr	r3, .L27+52
 386 012c 1B68     		ldr	r3, [r3]
 387 012e 1344     		add	r3, r3, r2
 388 0130 4C4A     		ldr	r2, .L27+52
 389 0132 1360     		str	r3, [r2]
 128:../Sources/drive/quad.c ****   risingA += chValue;
 390              		.loc 2 128 0
 391 0134 BA88     		ldrh	r2, [r7, #4]
 392 0136 4C4B     		ldr	r3, .L27+56
 393 0138 1B68     		ldr	r3, [r3]
 394 013a 1344     		add	r3, r3, r2
 395 013c 4A4A     		ldr	r2, .L27+56
 396 013e 1360     		str	r3, [r2]
 129:../Sources/drive/quad.c ****   fallingA += chValue;
 397              		.loc 2 129 0
 398 0140 BA88     		ldrh	r2, [r7, #4]
 399 0142 4A4B     		ldr	r3, .L27+60
 400 0144 1B68     		ldr	r3, [r3]
 401 0146 1344     		add	r3, r3, r2
 402 0148 484A     		ldr	r2, .L27+60
 403 014a 1360     		str	r3, [r2]
 130:../Sources/drive/quad.c **** 
 131:../Sources/drive/quad.c ****   if (FTM1_C0SC & FTM_CnSC_CHF_MASK) {      // check for channel 0 interrupt
 404              		.loc 2 131 0
 405 014c 394B     		ldr	r3, .L27+4
 406 014e DB68     		ldr	r3, [r3, #12]
 407 0150 03F08003 		and	r3, r3, #128
 408 0154 002B     		cmp	r3, #0
 409 0156 28D0     		beq	.L17
 132:../Sources/drive/quad.c ****     FTM1_C0SC &= ~FTM_CnSC_CHF_MASK;        // clear interrupt flag
 410              		.loc 2 132 0
 411 0158 364A     		ldr	r2, .L27+4
 412 015a 364B     		ldr	r3, .L27+4
 413 015c DB68     		ldr	r3, [r3, #12]
 414 015e 23F08003 		bic	r3, r3, #128
 415 0162 D360     		str	r3, [r2, #12]
 133:../Sources/drive/quad.c ****     if (QuadLeftB) {                        // rising edge:
 416              		.loc 2 133 0
 417 0164 394B     		ldr	r3, .L27+28
 418 0166 1B69     		ldr	r3, [r3, #16]
 419 0168 03F48053 		and	r3, r3, #4096
 420 016c 002B     		cmp	r3, #0
 421 016e 0ED0     		beq	.L18
 134:../Sources/drive/quad.c ****       if (risingOkB) time = risingB;        //   if second or later call => period is valid
 422              		.loc 2 134 0
 423 0170 324B     		ldr	r3, .L27+12
 424 0172 93F90030 		ldrsb	r3, [r3]
 425 0176 002B     		cmp	r3, #0
 426 0178 02D0     		beq	.L19
 427              		.loc 2 134 0 is_stmt 0 discriminator 1
 428 017a 394B     		ldr	r3, .L27+48
 429 017c 1B68     		ldr	r3, [r3]
 430 017e 3B60     		str	r3, [r7]
 431              	.L19:
 135:../Sources/drive/quad.c ****       risingB = 0;                          //   reset period measuring time
 432              		.loc 2 135 0 is_stmt 1
 433 0180 374B     		ldr	r3, .L27+48
 434 0182 0022     		movs	r2, #0
 435 0184 1A60     		str	r2, [r3]
 136:../Sources/drive/quad.c ****       risingOkB = TRUE;                     //   set the flag after first call
 436              		.loc 2 136 0
 437 0186 2D4B     		ldr	r3, .L27+12
 438 0188 0122     		movs	r2, #1
 439 018a 1A70     		strb	r2, [r3]
 440 018c 0DE0     		b	.L17
 441              	.L18:
 137:../Sources/drive/quad.c ****     }
 138:../Sources/drive/quad.c ****     else {                                  // falling edge:
 139:../Sources/drive/quad.c ****       if (fallingOkB) time = fallingB;      //   if second or later call => period is valid
 442              		.loc 2 139 0
 443 018e 2A4B     		ldr	r3, .L27+8
 444 0190 93F90030 		ldrsb	r3, [r3]
 445 0194 002B     		cmp	r3, #0
 446 0196 02D0     		beq	.L20
 447              		.loc 2 139 0 is_stmt 0 discriminator 1
 448 0198 324B     		ldr	r3, .L27+52
 449 019a 1B68     		ldr	r3, [r3]
 450 019c 3B60     		str	r3, [r7]
 451              	.L20:
 140:../Sources/drive/quad.c ****       fallingB = 0;                         //   reset period measuring time
 452              		.loc 2 140 0 is_stmt 1
 453 019e 314B     		ldr	r3, .L27+52
 454 01a0 0022     		movs	r2, #0
 455 01a2 1A60     		str	r2, [r3]
 141:../Sources/drive/quad.c ****       fallingOkB = TRUE;                    //   set the flag after first call
 456              		.loc 2 141 0
 457 01a4 244B     		ldr	r3, .L27+8
 458 01a6 0122     		movs	r2, #1
 459 01a8 1A70     		strb	r2, [r3]
 460              	.L17:
 142:../Sources/drive/quad.c ****     }
 143:../Sources/drive/quad.c ****   }
 144:../Sources/drive/quad.c **** 
 145:../Sources/drive/quad.c ****   if (FTM1_C1SC & FTM_CnSC_CHF_MASK) {      // check for channel 1 interrupte
 461              		.loc 2 145 0
 462 01aa 224B     		ldr	r3, .L27+4
 463 01ac 5B69     		ldr	r3, [r3, #20]
 464 01ae 03F08003 		and	r3, r3, #128
 465 01b2 002B     		cmp	r3, #0
 466 01b4 28D0     		beq	.L21
 146:../Sources/drive/quad.c ****     FTM1_C1SC &= ~FTM_CnSC_CHF_MASK;        // clear interrupt fla
 467              		.loc 2 146 0
 468 01b6 1F4A     		ldr	r2, .L27+4
 469 01b8 1E4B     		ldr	r3, .L27+4
 470 01ba 5B69     		ldr	r3, [r3, #20]
 471 01bc 23F08003 		bic	r3, r3, #128
 472 01c0 5361     		str	r3, [r2, #20]
 147:../Sources/drive/quad.c ****     if (QuadLeftA) {                        // rising edge:
 473              		.loc 2 147 0
 474 01c2 224B     		ldr	r3, .L27+28
 475 01c4 1B69     		ldr	r3, [r3, #16]
 476 01c6 03F40053 		and	r3, r3, #8192
 477 01ca 002B     		cmp	r3, #0
 478 01cc 0ED0     		beq	.L22
 148:../Sources/drive/quad.c ****       if (risingOkA) time = risingA;        //   if second or later call => period is valid
 479              		.loc 2 148 0
 480 01ce 1D4B     		ldr	r3, .L27+20
 481 01d0 93F90030 		ldrsb	r3, [r3]
 482 01d4 002B     		cmp	r3, #0
 483 01d6 02D0     		beq	.L23
 484              		.loc 2 148 0 is_stmt 0 discriminator 1
 485 01d8 234B     		ldr	r3, .L27+56
 486 01da 1B68     		ldr	r3, [r3]
 487 01dc 3B60     		str	r3, [r7]
 488              	.L23:
 149:../Sources/drive/quad.c ****       risingA = 0;                          //   reset period measuring time
 489              		.loc 2 149 0 is_stmt 1
 490 01de 224B     		ldr	r3, .L27+56
 491 01e0 0022     		movs	r2, #0
 492 01e2 1A60     		str	r2, [r3]
 150:../Sources/drive/quad.c ****       risingOkA = TRUE;                     //   set flag after first call
 493              		.loc 2 150 0
 494 01e4 174B     		ldr	r3, .L27+20
 495 01e6 0122     		movs	r2, #1
 496 01e8 1A70     		strb	r2, [r3]
 497 01ea 0DE0     		b	.L21
 498              	.L22:
 151:../Sources/drive/quad.c ****     }
 152:../Sources/drive/quad.c ****     else {                                  // falling edge:
 153:../Sources/drive/quad.c ****       if (fallingOkA) time = fallingA;      //   if second or later call => period is valid
 499              		.loc 2 153 0
 500 01ec 144B     		ldr	r3, .L27+16
 501 01ee 93F90030 		ldrsb	r3, [r3]
 502 01f2 002B     		cmp	r3, #0
 503 01f4 02D0     		beq	.L24
 504              		.loc 2 153 0 is_stmt 0 discriminator 1
 505 01f6 1D4B     		ldr	r3, .L27+60
 506 01f8 1B68     		ldr	r3, [r3]
 507 01fa 3B60     		str	r3, [r7]
 508              	.L24:
 154:../Sources/drive/quad.c ****       fallingA = 0;                         //   reset period measuring timer
 509              		.loc 2 154 0 is_stmt 1
 510 01fc 1B4B     		ldr	r3, .L27+60
 511 01fe 0022     		movs	r2, #0
 512 0200 1A60     		str	r2, [r3]
 155:../Sources/drive/quad.c ****       fallingOkA = TRUE;                    //   set the flag after first call
 513              		.loc 2 155 0
 514 0202 0F4B     		ldr	r3, .L27+16
 515 0204 0122     		movs	r2, #1
 516 0206 1A70     		strb	r2, [r3]
 517              	.L21:
 156:../Sources/drive/quad.c ****     }
 157:../Sources/drive/quad.c ****   }
 158:../Sources/drive/quad.c ****   timeLeft = (quadValue > 0) ? time : -time; // determine forward/backward driving
 518              		.loc 2 158 0
 519 0208 97F90730 		ldrsb	r3, [r7, #7]
 520 020c 002B     		cmp	r3, #0
 521 020e 02DC     		bgt	.L25
 522              		.loc 2 158 0 is_stmt 0 discriminator 1
 523 0210 3B68     		ldr	r3, [r7]
 524 0212 5B42     		negs	r3, r3
 525 0214 00E0     		b	.L26
 526              	.L25:
 527              		.loc 2 158 0 discriminator 2
 528 0216 3B68     		ldr	r3, [r7]
 529              	.L26:
 530              		.loc 2 158 0 discriminator 4
 531 0218 154A     		ldr	r2, .L27+64
 532 021a 1360     		str	r3, [r2]
 159:../Sources/drive/quad.c ****   OnExitQuadLeftISR();
 533              		.loc 2 159 0 is_stmt 1 discriminator 4
 534 021c 044B     		ldr	r3, .L27
 535 021e 4FF40062 		mov	r2, #2048
 536 0222 5A60     		str	r2, [r3, #4]
 160:../Sources/drive/quad.c **** }
 537              		.loc 2 160 0 discriminator 4
 538 0224 00BF     		nop
 539 0226 0C37     		adds	r7, r7, #12
 540              		.cfi_def_cfa_offset 4
 541 0228 BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 022a 5DF8047B 		ldr	r7, [sp], #4
 545              		.cfi_restore 7
 546              		.cfi_def_cfa_offset 0
 547 022e 7047     		bx	lr
 548              	.L28:
 549              		.align	2
 550              	.L27:
 551 0230 80F00F40 		.word	1074786432
 552 0234 00900340 		.word	1073975296
 553 0238 00000000 		.word	fallingOkB.7080
 554 023c 00000000 		.word	risingOkB.7079
 555 0240 00000000 		.word	fallingOkA.7082
 556 0244 00000000 		.word	risingOkA.7081
 557 0248 00000000 		.word	bits.7078
 558 024c 00F00F40 		.word	1074786304
 559 0250 00000000 		.word	init.7087
 560 0254 00000000 		.word	quadTable
 561 0258 00000000 		.word	ticksLeft
 562 025c 00000000 		.word	errorLeft
 563 0260 00000000 		.word	risingB.7083
 564 0264 00000000 		.word	fallingB.7084
 565 0268 00000000 		.word	risingA.7085
 566 026c 00000000 		.word	fallingA.7086
 567 0270 00000000 		.word	timeLeft
 568              		.cfi_endproc
 569              	.LFE125:
 571              		.section	.text.FTM2_IRQHandler,"ax",%progbits
 572              		.align	1
 573              		.global	FTM2_IRQHandler
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv4-sp-d16
 579              	FTM2_IRQHandler:
 580              	.LFB126:
 161:../Sources/drive/quad.c **** 
 162:../Sources/drive/quad.c **** 
 163:../Sources/drive/quad.c **** /**
 164:../Sources/drive/quad.c ****  * Interrupt service routine handles the
 165:../Sources/drive/quad.c ****  * right quadrature decoder
 166:../Sources/drive/quad.c ****  */
 167:../Sources/drive/quad.c **** void FTM2_IRQHandler(void)
 168:../Sources/drive/quad.c **** {
 581              		.loc 2 168 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 8
 584              		@ frame_needed = 1, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586 0000 80B4     		push	{r7}
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 83B0     		sub	sp, sp, #12
 590              		.cfi_def_cfa_offset 16
 591 0004 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 169:../Sources/drive/quad.c ****   static uint8_t bits = 0;
 170:../Sources/drive/quad.c ****   static bool risingOkB = FALSE, fallingOkB = FALSE;
 171:../Sources/drive/quad.c ****   static bool risingOkA = FALSE, fallingOkA = FALSE;
 172:../Sources/drive/quad.c ****   static uint32_t risingB, fallingB;
 173:../Sources/drive/quad.c ****   static uint32_t risingA, fallingA;
 174:../Sources/drive/quad.c ****   static bool init = TRUE;
 175:../Sources/drive/quad.c ****   int8_t quadValue;
 176:../Sources/drive/quad.c ****   uint16_t chValue;
 177:../Sources/drive/quad.c ****   uint32_t time=0;
 593              		.loc 2 177 0
 594 0006 0023     		movs	r3, #0
 595 0008 3B60     		str	r3, [r7]
 178:../Sources/drive/quad.c ****   OnEnterQuadRightISR();
 596              		.loc 2 178 0
 597 000a 894B     		ldr	r3, .L46
 598 000c 4FF40062 		mov	r2, #2048
 599 0010 9A60     		str	r2, [r3, #8]
 179:../Sources/drive/quad.c **** 
 180:../Sources/drive/quad.c ****   if (FTM2_SC & FTM_SC_TOF_MASK) {
 600              		.loc 2 180 0
 601 0012 884B     		ldr	r3, .L46+4
 602 0014 1B68     		ldr	r3, [r3]
 603 0016 03F08003 		and	r3, r3, #128
 604 001a 002B     		cmp	r3, #0
 605 001c 16D0     		beq	.L30
 181:../Sources/drive/quad.c ****     FTM2_SC &= ~FTM_SC_TOF_MASK;
 606              		.loc 2 181 0
 607 001e 854A     		ldr	r2, .L46+4
 608 0020 844B     		ldr	r3, .L46+4
 609 0022 1B68     		ldr	r3, [r3]
 610 0024 23F08003 		bic	r3, r3, #128
 611 0028 1360     		str	r3, [r2]
 182:../Sources/drive/quad.c ****     risingOkB = fallingOkB = FALSE;
 612              		.loc 2 182 0
 613 002a 834B     		ldr	r3, .L46+8
 614 002c 0022     		movs	r2, #0
 615 002e 1A70     		strb	r2, [r3]
 616 0030 814B     		ldr	r3, .L46+8
 617 0032 93F90020 		ldrsb	r2, [r3]
 618 0036 814B     		ldr	r3, .L46+12
 619 0038 1A70     		strb	r2, [r3]
 183:../Sources/drive/quad.c ****     risingOkA = fallingOkA = FALSE;
 620              		.loc 2 183 0
 621 003a 814B     		ldr	r3, .L46+16
 622 003c 0022     		movs	r2, #0
 623 003e 1A70     		strb	r2, [r3]
 624 0040 7F4B     		ldr	r3, .L46+16
 625 0042 93F90020 		ldrsb	r2, [r3]
 626 0046 7F4B     		ldr	r3, .L46+20
 627 0048 1A70     		strb	r2, [r3]
 628 004a 55E0     		b	.L31
 629              	.L30:
 184:../Sources/drive/quad.c ****   }
 185:../Sources/drive/quad.c ****   else {
 186:../Sources/drive/quad.c ****     bits <<= 1;
 630              		.loc 2 186 0
 631 004c 7E4B     		ldr	r3, .L46+24
 632 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 633 0050 5B00     		lsls	r3, r3, #1
 634 0052 DAB2     		uxtb	r2, r3
 635 0054 7C4B     		ldr	r3, .L46+24
 636 0056 1A70     		strb	r2, [r3]
 187:../Sources/drive/quad.c ****     bits |= QuadRightA;
 637              		.loc 2 187 0
 638 0058 7C4B     		ldr	r3, .L46+28
 639 005a 1B69     		ldr	r3, [r3, #16]
 640 005c 03F48023 		and	r3, r3, #262144
 641 0060 002B     		cmp	r3, #0
 642 0062 14BF     		ite	ne
 643 0064 0123     		movne	r3, #1
 644 0066 0023     		moveq	r3, #0
 645 0068 DBB2     		uxtb	r3, r3
 646 006a 5AB2     		sxtb	r2, r3
 647 006c 764B     		ldr	r3, .L46+24
 648 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 649 0070 5BB2     		sxtb	r3, r3
 650 0072 1343     		orrs	r3, r3, r2
 651 0074 5BB2     		sxtb	r3, r3
 652 0076 DAB2     		uxtb	r2, r3
 653 0078 734B     		ldr	r3, .L46+24
 654 007a 1A70     		strb	r2, [r3]
 188:../Sources/drive/quad.c ****     bits <<= 1;
 655              		.loc 2 188 0
 656 007c 724B     		ldr	r3, .L46+24
 657 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 658 0080 5B00     		lsls	r3, r3, #1
 659 0082 DAB2     		uxtb	r2, r3
 660 0084 704B     		ldr	r3, .L46+24
 661 0086 1A70     		strb	r2, [r3]
 189:../Sources/drive/quad.c ****     bits |= QuadRightB;
 662              		.loc 2 189 0
 663 0088 704B     		ldr	r3, .L46+28
 664 008a 1B69     		ldr	r3, [r3, #16]
 665 008c 03F40023 		and	r3, r3, #524288
 666 0090 002B     		cmp	r3, #0
 667 0092 14BF     		ite	ne
 668 0094 0123     		movne	r3, #1
 669 0096 0023     		moveq	r3, #0
 670 0098 DBB2     		uxtb	r3, r3
 671 009a 5AB2     		sxtb	r2, r3
 672 009c 6A4B     		ldr	r3, .L46+24
 673 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 674 00a0 5BB2     		sxtb	r3, r3
 675 00a2 1343     		orrs	r3, r3, r2
 676 00a4 5BB2     		sxtb	r3, r3
 677 00a6 DAB2     		uxtb	r2, r3
 678 00a8 674B     		ldr	r3, .L46+24
 679 00aa 1A70     		strb	r2, [r3]
 190:../Sources/drive/quad.c **** 
 191:../Sources/drive/quad.c ****     if (init) init = FALSE;
 680              		.loc 2 191 0
 681 00ac 684B     		ldr	r3, .L46+32
 682 00ae 93F90030 		ldrsb	r3, [r3]
 683 00b2 002B     		cmp	r3, #0
 684 00b4 03D0     		beq	.L32
 685              		.loc 2 191 0 is_stmt 0 discriminator 1
 686 00b6 664B     		ldr	r3, .L46+32
 687 00b8 0022     		movs	r2, #0
 688 00ba 1A70     		strb	r2, [r3]
 689 00bc 1CE0     		b	.L31
 690              	.L32:
 192:../Sources/drive/quad.c ****     else {
 193:../Sources/drive/quad.c ****       quadValue = quadTable[bits & 0x0F];
 691              		.loc 2 193 0 is_stmt 1
 692 00be 624B     		ldr	r3, .L46+24
 693 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 694 00c2 03F00F03 		and	r3, r3, #15
 695 00c6 634A     		ldr	r2, .L46+36
 696 00c8 D35C     		ldrb	r3, [r2, r3]
 697 00ca FB71     		strb	r3, [r7, #7]
 194:../Sources/drive/quad.c ****       if (quadValue != ERR) ticksRight -= quadValue;
 698              		.loc 2 194 0
 699 00cc 97F90730 		ldrsb	r3, [r7, #7]
 700 00d0 052B     		cmp	r3, #5
 701 00d2 07D0     		beq	.L33
 702              		.loc 2 194 0 is_stmt 0 discriminator 1
 703 00d4 604B     		ldr	r3, .L46+40
 704 00d6 1A68     		ldr	r2, [r3]
 705 00d8 97F90730 		ldrsb	r3, [r7, #7]
 706 00dc D31A     		subs	r3, r2, r3
 707 00de 5E4A     		ldr	r2, .L46+40
 708 00e0 1360     		str	r3, [r2]
 709 00e2 09E0     		b	.L31
 710              	.L33:
 195:../Sources/drive/quad.c ****       else if (errorRight < 255) errorRight++;
 711              		.loc 2 195 0 is_stmt 1
 712 00e4 5D4B     		ldr	r3, .L46+44
 713 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 714 00e8 FF2B     		cmp	r3, #255
 715 00ea 05D0     		beq	.L31
 716              		.loc 2 195 0 is_stmt 0 discriminator 1
 717 00ec 5B4B     		ldr	r3, .L46+44
 718 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 719 00f0 0133     		adds	r3, r3, #1
 720 00f2 DAB2     		uxtb	r2, r3
 721 00f4 594B     		ldr	r3, .L46+44
 722 00f6 1A70     		strb	r2, [r3]
 723              	.L31:
 196:../Sources/drive/quad.c ****     }
 197:../Sources/drive/quad.c ****   }
 198:../Sources/drive/quad.c **** 
 199:../Sources/drive/quad.c ****   if (FTM2_C0SC & FTM_CnSC_CHF_MASK) chValue = FTM2_C0V;
 724              		.loc 2 199 0 is_stmt 1
 725 00f8 4E4B     		ldr	r3, .L46+4
 726 00fa DB68     		ldr	r3, [r3, #12]
 727 00fc 03F08003 		and	r3, r3, #128
 728 0100 002B     		cmp	r3, #0
 729 0102 02D0     		beq	.L34
 730              		.loc 2 199 0 is_stmt 0 discriminator 1
 731 0104 4B4B     		ldr	r3, .L46+4
 732 0106 1B69     		ldr	r3, [r3, #16]
 733 0108 BB80     		strh	r3, [r7, #4]	@ movhi
 734              	.L34:
 200:../Sources/drive/quad.c ****   if (FTM2_C1SC & FTM_CnSC_CHF_MASK) chValue = FTM2_C1V;
 735              		.loc 2 200 0 is_stmt 1
 736 010a 4A4B     		ldr	r3, .L46+4
 737 010c 5B69     		ldr	r3, [r3, #20]
 738 010e 03F08003 		and	r3, r3, #128
 739 0112 002B     		cmp	r3, #0
 740 0114 02D0     		beq	.L35
 741              		.loc 2 200 0 is_stmt 0 discriminator 1
 742 0116 474B     		ldr	r3, .L46+4
 743 0118 9B69     		ldr	r3, [r3, #24]
 744 011a BB80     		strh	r3, [r7, #4]	@ movhi
 745              	.L35:
 201:../Sources/drive/quad.c **** 
 202:../Sources/drive/quad.c ****   risingB += chValue;
 746              		.loc 2 202 0 is_stmt 1
 747 011c BA88     		ldrh	r2, [r7, #4]
 748 011e 504B     		ldr	r3, .L46+48
 749 0120 1B68     		ldr	r3, [r3]
 750 0122 1344     		add	r3, r3, r2
 751 0124 4E4A     		ldr	r2, .L46+48
 752 0126 1360     		str	r3, [r2]
 203:../Sources/drive/quad.c ****   fallingB += chValue;
 753              		.loc 2 203 0
 754 0128 BA88     		ldrh	r2, [r7, #4]
 755 012a 4E4B     		ldr	r3, .L46+52
 756 012c 1B68     		ldr	r3, [r3]
 757 012e 1344     		add	r3, r3, r2
 758 0130 4C4A     		ldr	r2, .L46+52
 759 0132 1360     		str	r3, [r2]
 204:../Sources/drive/quad.c ****   risingA += chValue;
 760              		.loc 2 204 0
 761 0134 BA88     		ldrh	r2, [r7, #4]
 762 0136 4C4B     		ldr	r3, .L46+56
 763 0138 1B68     		ldr	r3, [r3]
 764 013a 1344     		add	r3, r3, r2
 765 013c 4A4A     		ldr	r2, .L46+56
 766 013e 1360     		str	r3, [r2]
 205:../Sources/drive/quad.c ****   fallingA += chValue;
 767              		.loc 2 205 0
 768 0140 BA88     		ldrh	r2, [r7, #4]
 769 0142 4A4B     		ldr	r3, .L46+60
 770 0144 1B68     		ldr	r3, [r3]
 771 0146 1344     		add	r3, r3, r2
 772 0148 484A     		ldr	r2, .L46+60
 773 014a 1360     		str	r3, [r2]
 206:../Sources/drive/quad.c **** 
 207:../Sources/drive/quad.c ****   if (FTM2_C0SC & FTM_CnSC_CHF_MASK) {
 774              		.loc 2 207 0
 775 014c 394B     		ldr	r3, .L46+4
 776 014e DB68     		ldr	r3, [r3, #12]
 777 0150 03F08003 		and	r3, r3, #128
 778 0154 002B     		cmp	r3, #0
 779 0156 28D0     		beq	.L36
 208:../Sources/drive/quad.c ****     FTM2_C0SC &= ~FTM_CnSC_CHF_MASK;
 780              		.loc 2 208 0
 781 0158 364A     		ldr	r2, .L46+4
 782 015a 364B     		ldr	r3, .L46+4
 783 015c DB68     		ldr	r3, [r3, #12]
 784 015e 23F08003 		bic	r3, r3, #128
 785 0162 D360     		str	r3, [r2, #12]
 209:../Sources/drive/quad.c ****     if (QuadRightB) {
 786              		.loc 2 209 0
 787 0164 394B     		ldr	r3, .L46+28
 788 0166 1B69     		ldr	r3, [r3, #16]
 789 0168 03F40023 		and	r3, r3, #524288
 790 016c 002B     		cmp	r3, #0
 791 016e 0ED0     		beq	.L37
 210:../Sources/drive/quad.c ****       if (risingOkB) time = risingB;
 792              		.loc 2 210 0
 793 0170 324B     		ldr	r3, .L46+12
 794 0172 93F90030 		ldrsb	r3, [r3]
 795 0176 002B     		cmp	r3, #0
 796 0178 02D0     		beq	.L38
 797              		.loc 2 210 0 is_stmt 0 discriminator 1
 798 017a 394B     		ldr	r3, .L46+48
 799 017c 1B68     		ldr	r3, [r3]
 800 017e 3B60     		str	r3, [r7]
 801              	.L38:
 211:../Sources/drive/quad.c ****       risingB = 0;
 802              		.loc 2 211 0 is_stmt 1
 803 0180 374B     		ldr	r3, .L46+48
 804 0182 0022     		movs	r2, #0
 805 0184 1A60     		str	r2, [r3]
 212:../Sources/drive/quad.c ****       risingOkB = TRUE;
 806              		.loc 2 212 0
 807 0186 2D4B     		ldr	r3, .L46+12
 808 0188 0122     		movs	r2, #1
 809 018a 1A70     		strb	r2, [r3]
 810 018c 0DE0     		b	.L36
 811              	.L37:
 213:../Sources/drive/quad.c ****     }
 214:../Sources/drive/quad.c ****     else {
 215:../Sources/drive/quad.c ****       if (fallingOkB) time = fallingB;
 812              		.loc 2 215 0
 813 018e 2A4B     		ldr	r3, .L46+8
 814 0190 93F90030 		ldrsb	r3, [r3]
 815 0194 002B     		cmp	r3, #0
 816 0196 02D0     		beq	.L39
 817              		.loc 2 215 0 is_stmt 0 discriminator 1
 818 0198 324B     		ldr	r3, .L46+52
 819 019a 1B68     		ldr	r3, [r3]
 820 019c 3B60     		str	r3, [r7]
 821              	.L39:
 216:../Sources/drive/quad.c ****       fallingB = 0;
 822              		.loc 2 216 0 is_stmt 1
 823 019e 314B     		ldr	r3, .L46+52
 824 01a0 0022     		movs	r2, #0
 825 01a2 1A60     		str	r2, [r3]
 217:../Sources/drive/quad.c ****       fallingOkB = TRUE;
 826              		.loc 2 217 0
 827 01a4 244B     		ldr	r3, .L46+8
 828 01a6 0122     		movs	r2, #1
 829 01a8 1A70     		strb	r2, [r3]
 830              	.L36:
 218:../Sources/drive/quad.c ****     }
 219:../Sources/drive/quad.c ****   }
 220:../Sources/drive/quad.c **** 
 221:../Sources/drive/quad.c ****   if (FTM2_C1SC & FTM_CnSC_CHF_MASK) {
 831              		.loc 2 221 0
 832 01aa 224B     		ldr	r3, .L46+4
 833 01ac 5B69     		ldr	r3, [r3, #20]
 834 01ae 03F08003 		and	r3, r3, #128
 835 01b2 002B     		cmp	r3, #0
 836 01b4 28D0     		beq	.L40
 222:../Sources/drive/quad.c ****     FTM2_C1SC &= ~FTM_CnSC_CHF_MASK;
 837              		.loc 2 222 0
 838 01b6 1F4A     		ldr	r2, .L46+4
 839 01b8 1E4B     		ldr	r3, .L46+4
 840 01ba 5B69     		ldr	r3, [r3, #20]
 841 01bc 23F08003 		bic	r3, r3, #128
 842 01c0 5361     		str	r3, [r2, #20]
 223:../Sources/drive/quad.c ****     if (QuadRightA) {
 843              		.loc 2 223 0
 844 01c2 224B     		ldr	r3, .L46+28
 845 01c4 1B69     		ldr	r3, [r3, #16]
 846 01c6 03F48023 		and	r3, r3, #262144
 847 01ca 002B     		cmp	r3, #0
 848 01cc 0ED0     		beq	.L41
 224:../Sources/drive/quad.c ****       if (risingOkA) time = risingA;
 849              		.loc 2 224 0
 850 01ce 1D4B     		ldr	r3, .L46+20
 851 01d0 93F90030 		ldrsb	r3, [r3]
 852 01d4 002B     		cmp	r3, #0
 853 01d6 02D0     		beq	.L42
 854              		.loc 2 224 0 is_stmt 0 discriminator 1
 855 01d8 234B     		ldr	r3, .L46+56
 856 01da 1B68     		ldr	r3, [r3]
 857 01dc 3B60     		str	r3, [r7]
 858              	.L42:
 225:../Sources/drive/quad.c ****       risingA = 0;
 859              		.loc 2 225 0 is_stmt 1
 860 01de 224B     		ldr	r3, .L46+56
 861 01e0 0022     		movs	r2, #0
 862 01e2 1A60     		str	r2, [r3]
 226:../Sources/drive/quad.c ****       risingOkA = TRUE;
 863              		.loc 2 226 0
 864 01e4 174B     		ldr	r3, .L46+20
 865 01e6 0122     		movs	r2, #1
 866 01e8 1A70     		strb	r2, [r3]
 867 01ea 0DE0     		b	.L40
 868              	.L41:
 227:../Sources/drive/quad.c ****     }
 228:../Sources/drive/quad.c ****     else {
 229:../Sources/drive/quad.c ****       if (fallingOkA) time = fallingA;
 869              		.loc 2 229 0
 870 01ec 144B     		ldr	r3, .L46+16
 871 01ee 93F90030 		ldrsb	r3, [r3]
 872 01f2 002B     		cmp	r3, #0
 873 01f4 02D0     		beq	.L43
 874              		.loc 2 229 0 is_stmt 0 discriminator 1
 875 01f6 1D4B     		ldr	r3, .L46+60
 876 01f8 1B68     		ldr	r3, [r3]
 877 01fa 3B60     		str	r3, [r7]
 878              	.L43:
 230:../Sources/drive/quad.c ****       fallingA = 0;
 879              		.loc 2 230 0 is_stmt 1
 880 01fc 1B4B     		ldr	r3, .L46+60
 881 01fe 0022     		movs	r2, #0
 882 0200 1A60     		str	r2, [r3]
 231:../Sources/drive/quad.c ****       fallingOkA = TRUE;
 883              		.loc 2 231 0
 884 0202 0F4B     		ldr	r3, .L46+16
 885 0204 0122     		movs	r2, #1
 886 0206 1A70     		strb	r2, [r3]
 887              	.L40:
 232:../Sources/drive/quad.c ****     }
 233:../Sources/drive/quad.c ****   }
 234:../Sources/drive/quad.c ****   timeRight = (quadValue > 0) ? -time : time;
 888              		.loc 2 234 0
 889 0208 97F90730 		ldrsb	r3, [r7, #7]
 890 020c 002B     		cmp	r3, #0
 891 020e 02DD     		ble	.L44
 892              		.loc 2 234 0 is_stmt 0 discriminator 1
 893 0210 3B68     		ldr	r3, [r7]
 894 0212 5B42     		negs	r3, r3
 895 0214 00E0     		b	.L45
 896              	.L44:
 897              		.loc 2 234 0 discriminator 2
 898 0216 3B68     		ldr	r3, [r7]
 899              	.L45:
 900              		.loc 2 234 0 discriminator 4
 901 0218 154A     		ldr	r2, .L46+64
 902 021a 1360     		str	r3, [r2]
 235:../Sources/drive/quad.c ****   OnExitQuadRightISR();
 903              		.loc 2 235 0 is_stmt 1 discriminator 4
 904 021c 044B     		ldr	r3, .L46
 905 021e 4FF40062 		mov	r2, #2048
 906 0222 5A60     		str	r2, [r3, #4]
 236:../Sources/drive/quad.c **** }
 907              		.loc 2 236 0 discriminator 4
 908 0224 00BF     		nop
 909 0226 0C37     		adds	r7, r7, #12
 910              		.cfi_def_cfa_offset 4
 911 0228 BD46     		mov	sp, r7
 912              		.cfi_def_cfa_register 13
 913              		@ sp needed
 914 022a 5DF8047B 		ldr	r7, [sp], #4
 915              		.cfi_restore 7
 916              		.cfi_def_cfa_offset 0
 917 022e 7047     		bx	lr
 918              	.L47:
 919              		.align	2
 920              	.L46:
 921 0230 80F00F40 		.word	1074786432
 922 0234 00A00340 		.word	1073979392
 923 0238 00000000 		.word	fallingOkB.7096
 924 023c 00000000 		.word	risingOkB.7095
 925 0240 00000000 		.word	fallingOkA.7098
 926 0244 00000000 		.word	risingOkA.7097
 927 0248 00000000 		.word	bits.7094
 928 024c 40F00F40 		.word	1074786368
 929 0250 00000000 		.word	init.7103
 930 0254 00000000 		.word	quadTable
 931 0258 00000000 		.word	ticksRight
 932 025c 00000000 		.word	errorRight
 933 0260 00000000 		.word	risingB.7099
 934 0264 00000000 		.word	fallingB.7100
 935 0268 00000000 		.word	risingA.7101
 936 026c 00000000 		.word	fallingA.7102
 937 0270 00000000 		.word	timeRight
 938              		.cfi_endproc
 939              	.LFE126:
 941              		.section	.text.quadGetSpeedLeft,"ax",%progbits
 942              		.align	1
 943              		.global	quadGetSpeedLeft
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	quadGetSpeedLeft:
 950              	.LFB127:
 237:../Sources/drive/quad.c **** 
 238:../Sources/drive/quad.c **** 
 239:../Sources/drive/quad.c **** 
 240:../Sources/drive/quad.c **** /**
 241:../Sources/drive/quad.c ****  * Returns the velocity of the left wheel
 242:../Sources/drive/quad.c ****  * @return
 243:../Sources/drive/quad.c ****  *   the distance in mm
 244:../Sources/drive/quad.c ****  */
 245:../Sources/drive/quad.c **** int16_t quadGetSpeedLeft(void)
 246:../Sources/drive/quad.c **** {
 951              		.loc 2 246 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 1, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956 0000 80B4     		push	{r7}
 957              		.cfi_def_cfa_offset 4
 958              		.cfi_offset 7, -4
 959 0002 00AF     		add	r7, sp, #0
 960              		.cfi_def_cfa_register 7
 247:../Sources/drive/quad.c ****   if (timeLeft) return  (int16_t)(((int32_t)VELOCITY_PER_PERIOD) / timeLeft);
 961              		.loc 2 247 0
 962 0004 084B     		ldr	r3, .L51
 963 0006 1B68     		ldr	r3, [r3]
 964 0008 002B     		cmp	r3, #0
 965 000a 06D0     		beq	.L49
 966              		.loc 2 247 0 is_stmt 0 discriminator 1
 967 000c 064B     		ldr	r3, .L51
 968 000e 1B68     		ldr	r3, [r3]
 969 0010 064A     		ldr	r2, .L51+4
 970 0012 92FBF3F3 		sdiv	r3, r2, r3
 971 0016 1BB2     		sxth	r3, r3
 972 0018 00E0     		b	.L50
 973              	.L49:
 248:../Sources/drive/quad.c ****   else return 0;
 974              		.loc 2 248 0 is_stmt 1
 975 001a 0023     		movs	r3, #0
 976              	.L50:
 249:../Sources/drive/quad.c **** }
 977              		.loc 2 249 0
 978 001c 1846     		mov	r0, r3
 979 001e BD46     		mov	sp, r7
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 0020 5DF8047B 		ldr	r7, [sp], #4
 983              		.cfi_restore 7
 984              		.cfi_def_cfa_offset 0
 985 0024 7047     		bx	lr
 986              	.L52:
 987 0026 00BF     		.align	2
 988              	.L51:
 989 0028 00000000 		.word	timeLeft
 990 002c 5C222500 		.word	2433628
 991              		.cfi_endproc
 992              	.LFE127:
 994              		.section	.text.quadGetSpeedRight,"ax",%progbits
 995              		.align	1
 996              		.global	quadGetSpeedRight
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	quadGetSpeedRight:
 1003              	.LFB128:
 250:../Sources/drive/quad.c **** 
 251:../Sources/drive/quad.c **** /**
 252:../Sources/drive/quad.c ****  * Returns the velocity of the right wheel
 253:../Sources/drive/quad.c ****  * @return
 254:../Sources/drive/quad.c ****  *   the distance in mm
 255:../Sources/drive/quad.c ****  */
 256:../Sources/drive/quad.c **** int16_t quadGetSpeedRight(void)
 257:../Sources/drive/quad.c **** {
 1004              		.loc 2 257 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 1, uses_anonymous_args = 0
 1008              		@ link register save eliminated.
 1009 0000 80B4     		push	{r7}
 1010              		.cfi_def_cfa_offset 4
 1011              		.cfi_offset 7, -4
 1012 0002 00AF     		add	r7, sp, #0
 1013              		.cfi_def_cfa_register 7
 258:../Sources/drive/quad.c ****   if (timeRight) return (int16_t)(((int32_t)VELOCITY_PER_PERIOD) / timeRight);
 1014              		.loc 2 258 0
 1015 0004 084B     		ldr	r3, .L56
 1016 0006 1B68     		ldr	r3, [r3]
 1017 0008 002B     		cmp	r3, #0
 1018 000a 06D0     		beq	.L54
 1019              		.loc 2 258 0 is_stmt 0 discriminator 1
 1020 000c 064B     		ldr	r3, .L56
 1021 000e 1B68     		ldr	r3, [r3]
 1022 0010 064A     		ldr	r2, .L56+4
 1023 0012 92FBF3F3 		sdiv	r3, r2, r3
 1024 0016 1BB2     		sxth	r3, r3
 1025 0018 00E0     		b	.L55
 1026              	.L54:
 259:../Sources/drive/quad.c ****   else return 0;
 1027              		.loc 2 259 0 is_stmt 1
 1028 001a 0023     		movs	r3, #0
 1029              	.L55:
 260:../Sources/drive/quad.c **** }
 1030              		.loc 2 260 0
 1031 001c 1846     		mov	r0, r3
 1032 001e BD46     		mov	sp, r7
 1033              		.cfi_def_cfa_register 13
 1034              		@ sp needed
 1035 0020 5DF8047B 		ldr	r7, [sp], #4
 1036              		.cfi_restore 7
 1037              		.cfi_def_cfa_offset 0
 1038 0024 7047     		bx	lr
 1039              	.L57:
 1040 0026 00BF     		.align	2
 1041              	.L56:
 1042 0028 00000000 		.word	timeRight
 1043 002c 5C222500 		.word	2433628
 1044              		.cfi_endproc
 1045              	.LFE128:
 1047              		.global	__aeabi_i2d
 1048              		.global	__aeabi_dmul
 1049              		.global	__aeabi_ddiv
 1050              		.global	__aeabi_d2iz
 1051              		.section	.text.quadGetDistanceLeft,"ax",%progbits
 1052              		.align	1
 1053              		.global	quadGetDistanceLeft
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	quadGetDistanceLeft:
 1060              	.LFB129:
 261:../Sources/drive/quad.c **** 
 262:../Sources/drive/quad.c **** /**
 263:../Sources/drive/quad.c ****  * Returns the distance the left wheel has covered
 264:../Sources/drive/quad.c ****  * @return
 265:../Sources/drive/quad.c ****  *   the distance in mm
 266:../Sources/drive/quad.c ****  */
 267:../Sources/drive/quad.c **** int16_t quadGetDistanceLeft(void)
 268:../Sources/drive/quad.c **** {
 1061              		.loc 2 268 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 98B5     		push	{r3, r4, r7, lr}
 1066              		.cfi_def_cfa_offset 16
 1067              		.cfi_offset 3, -16
 1068              		.cfi_offset 4, -12
 1069              		.cfi_offset 7, -8
 1070              		.cfi_offset 14, -4
 1071 0002 00AF     		add	r7, sp, #0
 1072              		.cfi_def_cfa_register 7
 269:../Sources/drive/quad.c ****    return (int16_t)((ticksLeft * UM_PER_TICK) / 1000);
 1073              		.loc 2 269 0
 1074 0004 104B     		ldr	r3, .L60+8
 1075 0006 1B68     		ldr	r3, [r3]
 1076 0008 1846     		mov	r0, r3
 1077 000a FFF7FEFF 		bl	__aeabi_i2d
 1078              	.LVL0:
 1079 000e 0CA3     		adr	r3, .L60
 1080 0010 D3E90023 		ldrd	r2, [r3]
 1081 0014 FFF7FEFF 		bl	__aeabi_dmul
 1082              	.LVL1:
 1083 0018 0346     		mov	r3, r0
 1084 001a 0C46     		mov	r4, r1
 1085 001c 1846     		mov	r0, r3
 1086 001e 2146     		mov	r1, r4
 1087 0020 4FF00002 		mov	r2, #0
 1088 0024 094B     		ldr	r3, .L60+12
 1089 0026 FFF7FEFF 		bl	__aeabi_ddiv
 1090              	.LVL2:
 1091 002a 0346     		mov	r3, r0
 1092 002c 0C46     		mov	r4, r1
 1093 002e 1846     		mov	r0, r3
 1094 0030 2146     		mov	r1, r4
 1095 0032 FFF7FEFF 		bl	__aeabi_d2iz
 1096              	.LVL3:
 1097 0036 0346     		mov	r3, r0
 1098 0038 1BB2     		sxth	r3, r3
 270:../Sources/drive/quad.c **** }
 1099              		.loc 2 270 0
 1100 003a 1846     		mov	r0, r3
 1101 003c 98BD     		pop	{r3, r4, r7, pc}
 1102              	.L61:
 1103 003e 00BF     		.align	3
 1104              	.L60:
 1105 0040 9E6E0FBB 		.word	-1156616546
 1106 0044 4104A340 		.word	1084425281
 1107 0048 00000000 		.word	ticksLeft
 1108 004c 00408F40 		.word	1083129856
 1109              		.cfi_endproc
 1110              	.LFE129:
 1112              		.section	.text.quadGetDistanceRight,"ax",%progbits
 1113              		.align	1
 1114              		.global	quadGetDistanceRight
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	quadGetDistanceRight:
 1121              	.LFB130:
 271:../Sources/drive/quad.c **** 
 272:../Sources/drive/quad.c **** /**
 273:../Sources/drive/quad.c ****  * Returns the distance the right wheel has covered
 274:../Sources/drive/quad.c ****  * @return
 275:../Sources/drive/quad.c ****  *   the distance in mm
 276:../Sources/drive/quad.c ****  */
 277:../Sources/drive/quad.c **** int16_t quadGetDistanceRight(void)
 278:../Sources/drive/quad.c **** {
 1122              		.loc 2 278 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126 0000 98B5     		push	{r3, r4, r7, lr}
 1127              		.cfi_def_cfa_offset 16
 1128              		.cfi_offset 3, -16
 1129              		.cfi_offset 4, -12
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
 1132 0002 00AF     		add	r7, sp, #0
 1133              		.cfi_def_cfa_register 7
 279:../Sources/drive/quad.c ****    return (int16_t)((ticksRight * UM_PER_TICK) / 1000);
 1134              		.loc 2 279 0
 1135 0004 104B     		ldr	r3, .L64+8
 1136 0006 1B68     		ldr	r3, [r3]
 1137 0008 1846     		mov	r0, r3
 1138 000a FFF7FEFF 		bl	__aeabi_i2d
 1139              	.LVL4:
 1140 000e 0CA3     		adr	r3, .L64
 1141 0010 D3E90023 		ldrd	r2, [r3]
 1142 0014 FFF7FEFF 		bl	__aeabi_dmul
 1143              	.LVL5:
 1144 0018 0346     		mov	r3, r0
 1145 001a 0C46     		mov	r4, r1
 1146 001c 1846     		mov	r0, r3
 1147 001e 2146     		mov	r1, r4
 1148 0020 4FF00002 		mov	r2, #0
 1149 0024 094B     		ldr	r3, .L64+12
 1150 0026 FFF7FEFF 		bl	__aeabi_ddiv
 1151              	.LVL6:
 1152 002a 0346     		mov	r3, r0
 1153 002c 0C46     		mov	r4, r1
 1154 002e 1846     		mov	r0, r3
 1155 0030 2146     		mov	r1, r4
 1156 0032 FFF7FEFF 		bl	__aeabi_d2iz
 1157              	.LVL7:
 1158 0036 0346     		mov	r3, r0
 1159 0038 1BB2     		sxth	r3, r3
 280:../Sources/drive/quad.c **** }
 1160              		.loc 2 280 0
 1161 003a 1846     		mov	r0, r3
 1162 003c 98BD     		pop	{r3, r4, r7, pc}
 1163              	.L65:
 1164 003e 00BF     		.align	3
 1165              	.L64:
 1166 0040 9E6E0FBB 		.word	-1156616546
 1167 0044 4104A340 		.word	1084425281
 1168 0048 00000000 		.word	ticksRight
 1169 004c 00408F40 		.word	1083129856
 1170              		.cfi_endproc
 1171              	.LFE130:
 1173              		.section	.rodata
 1174              		.align	2
 1175              	.LC0:
 1176 0000 68656C70 		.ascii	"help\000"
 1176      00
 1177 0005 000000   		.align	2
 1178              	.LC1:
 1179 0008 71202871 		.ascii	"q (quad) commands:\000"
 1179      75616429 
 1179      20636F6D 
 1179      6D616E64 
 1179      733A00
 1180 001b 00       		.align	2
 1181              	.LC2:
 1182 001c 20206865 		.ascii	"  help\000"
 1182      6C7000
 1183 0023 00       		.align	2
 1184              	.LC3:
 1185 0024 20207374 		.ascii	"  status\000"
 1185      61747573 
 1185      00
 1186 002d 000000   		.align	2
 1187              	.LC4:
 1188 0030 20207265 		.ascii	"  reset\000"
 1188      73657400 
 1189              		.align	2
 1190              	.LC5:
 1191 0038 73746174 		.ascii	"status\000"
 1191      757300
 1192 003f 00       		.align	2
 1193              	.LC6:
 1194 0040 71756164 		.ascii	"quad status:\000"
 1194      20737461 
 1194      7475733A 
 1194      00
 1195 004d 000000   		.align	2
 1196              	.LC7:
 1197 0050 4C3A00   		.ascii	"L:\000"
 1198 0053 00       		.align	2
 1199              	.LC8:
 1200 0054 2000     		.ascii	" \000"
 1201 0056 0000     		.align	2
 1202              	.LC9:
 1203 0058 00       		.ascii	"\000"
 1204 0059 000000   		.align	2
 1205              	.LC10:
 1206 005c 523A00   		.ascii	"R:\000"
 1207 005f 00       		.align	2
 1208              	.LC11:
 1209 0060 0A00     		.ascii	"\012\000"
 1210 0062 0000     		.align	2
 1211              	.LC12:
 1212 0064 72657365 		.ascii	"reset\000"
 1212      7400
 1213 006a 0000     		.align	2
 1214              	.LC13:
 1215 006c 4F4B00   		.ascii	"OK\000"
 1216              		.section	.text.quadParseCommand,"ax",%progbits
 1217              		.align	1
 1218              		.global	quadParseCommand
 1219              		.syntax unified
 1220              		.thumb
 1221              		.thumb_func
 1222              		.fpu fpv4-sp-d16
 1224              	quadParseCommand:
 1225              	.LFB131:
 281:../Sources/drive/quad.c **** 
 282:../Sources/drive/quad.c **** 
 283:../Sources/drive/quad.c **** /**
 284:../Sources/drive/quad.c ****  * Command line parser for this file.
 285:../Sources/drive/quad.c ****  * This code is complete and works.
 286:../Sources/drive/quad.c ****  *
 287:../Sources/drive/quad.c ****  * @param[in] cmd
 288:../Sources/drive/quad.c ****  *   the command to parse
 289:../Sources/drive/quad.c ****  */
 290:../Sources/drive/quad.c **** tError quadParseCommand(const unsigned char *cmd)
 291:../Sources/drive/quad.c **** {
 1226              		.loc 2 291 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 16
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230 0000 80B5     		push	{r7, lr}
 1231              		.cfi_def_cfa_offset 8
 1232              		.cfi_offset 7, -8
 1233              		.cfi_offset 14, -4
 1234 0002 84B0     		sub	sp, sp, #16
 1235              		.cfi_def_cfa_offset 24
 1236 0004 00AF     		add	r7, sp, #0
 1237              		.cfi_def_cfa_register 7
 1238 0006 7860     		str	r0, [r7, #4]
 292:../Sources/drive/quad.c ****   tError result = EC_INVALID_ARG;
 1239              		.loc 2 292 0
 1240 0008 0223     		movs	r3, #2
 1241 000a FB73     		strb	r3, [r7, #15]
 293:../Sources/drive/quad.c ****   if (strcmp(cmd, "help") == 0)
 1242              		.loc 2 293 0
 1243 000c 4149     		ldr	r1, .L71
 1244 000e 7868     		ldr	r0, [r7, #4]
 1245 0010 FFF7FEFF 		bl	strcmp
 1246 0014 0346     		mov	r3, r0
 1247 0016 002B     		cmp	r3, #0
 1248 0018 0ED1     		bne	.L67
 294:../Sources/drive/quad.c ****   {
 295:../Sources/drive/quad.c ****     termWriteLine("q (quad) commands:");
 1249              		.loc 2 295 0
 1250 001a 3F48     		ldr	r0, .L71+4
 1251 001c FFF7FEFF 		bl	termWriteLine
 296:../Sources/drive/quad.c ****     termWriteLine("  help");
 1252              		.loc 2 296 0
 1253 0020 3E48     		ldr	r0, .L71+8
 1254 0022 FFF7FEFF 		bl	termWriteLine
 297:../Sources/drive/quad.c ****     termWriteLine("  status");
 1255              		.loc 2 297 0
 1256 0026 3E48     		ldr	r0, .L71+12
 1257 0028 FFF7FEFF 		bl	termWriteLine
 298:../Sources/drive/quad.c ****     termWriteLine("  reset");
 1258              		.loc 2 298 0
 1259 002c 3D48     		ldr	r0, .L71+16
 1260 002e FFF7FEFF 		bl	termWriteLine
 299:../Sources/drive/quad.c ****     result = EC_SUCCESS;
 1261              		.loc 2 299 0
 1262 0032 0023     		movs	r3, #0
 1263 0034 FB73     		strb	r3, [r7, #15]
 1264 0036 67E0     		b	.L68
 1265              	.L67:
 300:../Sources/drive/quad.c ****   }
 301:../Sources/drive/quad.c ****   else if (strncmp(cmd, "status", sizeof("status")-1) == 0)
 1266              		.loc 2 301 0
 1267 0038 0622     		movs	r2, #6
 1268 003a 3B49     		ldr	r1, .L71+20
 1269 003c 7868     		ldr	r0, [r7, #4]
 1270 003e FFF7FEFF 		bl	strncmp
 1271 0042 0346     		mov	r3, r0
 1272 0044 002B     		cmp	r3, #0
 1273 0046 3FD1     		bne	.L69
 302:../Sources/drive/quad.c ****   {
 303:../Sources/drive/quad.c ****     termWriteLine("quad status:");
 1274              		.loc 2 303 0
 1275 0048 3848     		ldr	r0, .L71+24
 1276 004a FFF7FEFF 		bl	termWriteLine
 304:../Sources/drive/quad.c ****     termWrite("L:");
 1277              		.loc 2 304 0
 1278 004e 3848     		ldr	r0, .L71+28
 1279 0050 FFF7FEFF 		bl	termWrite
 305:../Sources/drive/quad.c ****     termWriteNum32s(ticksLeft);
 1280              		.loc 2 305 0
 1281 0054 374B     		ldr	r3, .L71+32
 1282 0056 1B68     		ldr	r3, [r3]
 1283 0058 1846     		mov	r0, r3
 1284 005a FFF7FEFF 		bl	termWriteNum32s
 306:../Sources/drive/quad.c ****     termWrite(" ");
 1285              		.loc 2 306 0
 1286 005e 3648     		ldr	r0, .L71+36
 1287 0060 FFF7FEFF 		bl	termWrite
 307:../Sources/drive/quad.c ****     termWriteNum16s(quadGetDistanceLeft());
 1288              		.loc 2 307 0
 1289 0064 FFF7FEFF 		bl	quadGetDistanceLeft
 1290 0068 0346     		mov	r3, r0
 1291 006a 1846     		mov	r0, r3
 1292 006c FFF7FEFF 		bl	termWriteNum16s
 308:../Sources/drive/quad.c ****     termWrite(" ");
 1293              		.loc 2 308 0
 1294 0070 3148     		ldr	r0, .L71+36
 1295 0072 FFF7FEFF 		bl	termWrite
 309:../Sources/drive/quad.c ****     termWriteNum16s(quadGetSpeedLeft());
 1296              		.loc 2 309 0
 1297 0076 FFF7FEFF 		bl	quadGetSpeedLeft
 1298 007a 0346     		mov	r3, r0
 1299 007c 1846     		mov	r0, r3
 1300 007e FFF7FEFF 		bl	termWriteNum16s
 310:../Sources/drive/quad.c ****     termWriteLine("");
 1301              		.loc 2 310 0
 1302 0082 2E48     		ldr	r0, .L71+40
 1303 0084 FFF7FEFF 		bl	termWriteLine
 311:../Sources/drive/quad.c **** 
 312:../Sources/drive/quad.c ****     termWrite("R:");
 1304              		.loc 2 312 0
 1305 0088 2D48     		ldr	r0, .L71+44
 1306 008a FFF7FEFF 		bl	termWrite
 313:../Sources/drive/quad.c ****     termWriteNum32s(ticksRight);
 1307              		.loc 2 313 0
 1308 008e 2D4B     		ldr	r3, .L71+48
 1309 0090 1B68     		ldr	r3, [r3]
 1310 0092 1846     		mov	r0, r3
 1311 0094 FFF7FEFF 		bl	termWriteNum32s
 314:../Sources/drive/quad.c ****     termWrite(" ");
 1312              		.loc 2 314 0
 1313 0098 2748     		ldr	r0, .L71+36
 1314 009a FFF7FEFF 		bl	termWrite
 315:../Sources/drive/quad.c ****     termWriteNum16s(quadGetDistanceRight());
 1315              		.loc 2 315 0
 1316 009e FFF7FEFF 		bl	quadGetDistanceRight
 1317 00a2 0346     		mov	r3, r0
 1318 00a4 1846     		mov	r0, r3
 1319 00a6 FFF7FEFF 		bl	termWriteNum16s
 316:../Sources/drive/quad.c ****     termWrite(" ");
 1320              		.loc 2 316 0
 1321 00aa 2348     		ldr	r0, .L71+36
 1322 00ac FFF7FEFF 		bl	termWrite
 317:../Sources/drive/quad.c ****     termWriteNum16s(quadGetSpeedRight());
 1323              		.loc 2 317 0
 1324 00b0 FFF7FEFF 		bl	quadGetSpeedRight
 1325 00b4 0346     		mov	r3, r0
 1326 00b6 1846     		mov	r0, r3
 1327 00b8 FFF7FEFF 		bl	termWriteNum16s
 318:../Sources/drive/quad.c ****     termWrite("\n");
 1328              		.loc 2 318 0
 1329 00bc 2248     		ldr	r0, .L71+52
 1330 00be FFF7FEFF 		bl	termWrite
 319:../Sources/drive/quad.c ****     result = EC_SUCCESS;
 1331              		.loc 2 319 0
 1332 00c2 0023     		movs	r3, #0
 1333 00c4 FB73     		strb	r3, [r7, #15]
 1334 00c6 1FE0     		b	.L68
 1335              	.L69:
 320:../Sources/drive/quad.c ****   }
 321:../Sources/drive/quad.c ****   else if (strncmp(cmd, "reset", sizeof("reset")-1) == 0)
 1336              		.loc 2 321 0
 1337 00c8 0522     		movs	r2, #5
 1338 00ca 2049     		ldr	r1, .L71+56
 1339 00cc 7868     		ldr	r0, [r7, #4]
 1340 00ce FFF7FEFF 		bl	strncmp
 1341 00d2 0346     		mov	r3, r0
 1342 00d4 002B     		cmp	r3, #0
 1343 00d6 17D1     		bne	.L68
 322:../Sources/drive/quad.c ****   {
 323:../Sources/drive/quad.c ****     cmd += sizeof("reset");
 1344              		.loc 2 323 0
 1345 00d8 7B68     		ldr	r3, [r7, #4]
 1346 00da 0633     		adds	r3, r3, #6
 1347 00dc 7B60     		str	r3, [r7, #4]
 324:../Sources/drive/quad.c ****     ticksLeft = ticksRight = errorLeft = errorRight = 0;
 1348              		.loc 2 324 0
 1349 00de 1C4B     		ldr	r3, .L71+60
 1350 00e0 0022     		movs	r2, #0
 1351 00e2 1A70     		strb	r2, [r3]
 1352 00e4 1A4B     		ldr	r3, .L71+60
 1353 00e6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1354 00e8 1A4B     		ldr	r3, .L71+64
 1355 00ea 1A70     		strb	r2, [r3]
 1356 00ec 194B     		ldr	r3, .L71+64
 1357 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1358 00f0 1A46     		mov	r2, r3
 1359 00f2 144B     		ldr	r3, .L71+48
 1360 00f4 1A60     		str	r2, [r3]
 1361 00f6 134B     		ldr	r3, .L71+48
 1362 00f8 1B68     		ldr	r3, [r3]
 1363 00fa 0E4A     		ldr	r2, .L71+32
 1364 00fc 1360     		str	r3, [r2]
 325:../Sources/drive/quad.c ****     termWriteLine("OK");
 1365              		.loc 2 325 0
 1366 00fe 1648     		ldr	r0, .L71+68
 1367 0100 FFF7FEFF 		bl	termWriteLine
 326:../Sources/drive/quad.c ****     result = EC_SUCCESS;
 1368              		.loc 2 326 0
 1369 0104 0023     		movs	r3, #0
 1370 0106 FB73     		strb	r3, [r7, #15]
 1371              	.L68:
 327:../Sources/drive/quad.c ****   }
 328:../Sources/drive/quad.c ****   return result;
 1372              		.loc 2 328 0
 1373 0108 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 329:../Sources/drive/quad.c **** }
 1374              		.loc 2 329 0
 1375 010a 1846     		mov	r0, r3
 1376 010c 1037     		adds	r7, r7, #16
 1377              		.cfi_def_cfa_offset 8
 1378 010e BD46     		mov	sp, r7
 1379              		.cfi_def_cfa_register 13
 1380              		@ sp needed
 1381 0110 80BD     		pop	{r7, pc}
 1382              	.L72:
 1383 0112 00BF     		.align	2
 1384              	.L71:
 1385 0114 00000000 		.word	.LC0
 1386 0118 08000000 		.word	.LC1
 1387 011c 1C000000 		.word	.LC2
 1388 0120 24000000 		.word	.LC3
 1389 0124 30000000 		.word	.LC4
 1390 0128 38000000 		.word	.LC5
 1391 012c 40000000 		.word	.LC6
 1392 0130 50000000 		.word	.LC7
 1393 0134 00000000 		.word	ticksLeft
 1394 0138 54000000 		.word	.LC8
 1395 013c 58000000 		.word	.LC9
 1396 0140 5C000000 		.word	.LC10
 1397 0144 00000000 		.word	ticksRight
 1398 0148 60000000 		.word	.LC11
 1399 014c 64000000 		.word	.LC12
 1400 0150 00000000 		.word	errorRight
 1401 0154 00000000 		.word	errorLeft
 1402 0158 6C000000 		.word	.LC13
 1403              		.cfi_endproc
 1404              	.LFE131:
 1406              		.section	.rodata
 1407 006f 00       		.align	2
 1408              	.LC14:
 1409 0070 28717561 		.ascii	"(quad)\000"
 1409      642900
 1410 0077 00       		.align	2
 1411              	.LC15:
 1412 0078 7100     		.ascii	"q\000"
 1413              		.section	.text.quadInit,"ax",%progbits
 1414              		.align	1
 1415              		.global	quadInit
 1416              		.syntax unified
 1417              		.thumb
 1418              		.thumb_func
 1419              		.fpu fpv4-sp-d16
 1421              	quadInit:
 1422              	.LFB132:
 330:../Sources/drive/quad.c **** 
 331:../Sources/drive/quad.c **** 
 332:../Sources/drive/quad.c **** /**
 333:../Sources/drive/quad.c ****  * Initializes the quadrature signal decoder:
 334:../Sources/drive/quad.c ****  * - Hallsensor motor left
 335:../Sources/drive/quad.c ****  *   A: PTA13, FTM1_QD_PHB Mux:3 (7)
 336:../Sources/drive/quad.c ****  *   B: PTA12, FTM1_QD_PHA Mux:3 (7)
 337:../Sources/drive/quad.c ****  *
 338:../Sources/drive/quad.c ****  * - Hallsensor motor right
 339:../Sources/drive/quad.c ****  *   A: PTB18, FTM2_QD_PHA Mux:3 (6)
 340:../Sources/drive/quad.c ****  *   B: PTB19, FTM2_QD_PHB Mux:3 (6)
 341:../Sources/drive/quad.c ****  */
 342:../Sources/drive/quad.c **** void quadInit(void)
 343:../Sources/drive/quad.c **** {
 1423              		.loc 2 343 0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 7, -8
 1430              		.cfi_offset 14, -4
 1431 0002 00AF     		add	r7, sp, #0
 1432              		.cfi_def_cfa_register 7
 344:../Sources/drive/quad.c ****   PORTB_PCR18 = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1);
 1433              		.loc 2 344 0
 1434 0004 214B     		ldr	r3, .L74
 1435 0006 40F20332 		movw	r2, #771
 1436 000a 9A64     		str	r2, [r3, #72]
 345:../Sources/drive/quad.c ****   PORTB_PCR19 = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1);
 1437              		.loc 2 345 0
 1438 000c 1F4B     		ldr	r3, .L74
 1439 000e 40F20332 		movw	r2, #771
 1440 0012 DA64     		str	r2, [r3, #76]
 346:../Sources/drive/quad.c ****   PORTA_PCR12 = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1);
 1441              		.loc 2 346 0
 1442 0014 1E4B     		ldr	r3, .L74+4
 1443 0016 40F20332 		movw	r2, #771
 1444 001a 1A63     		str	r2, [r3, #48]
 347:../Sources/drive/quad.c ****   PORTA_PCR13 = PORT_PCR_MUX(3) | PORT_PCR_PE(1) | PORT_PCR_PS(1);
 1445              		.loc 2 347 0
 1446 001c 1C4B     		ldr	r3, .L74+4
 1447 001e 40F20332 		movw	r2, #771
 1448 0022 5A63     		str	r2, [r3, #52]
 348:../Sources/drive/quad.c **** 
 349:../Sources/drive/quad.c ****   // set clockgating for FTM1 & FTM2
 350:../Sources/drive/quad.c ****   SIM_SCGC6 |= SIM_SCGC6_FTM1_MASK | SIM_SCGC6_FTM2_MASK;
 1449              		.loc 2 350 0
 1450 0024 1B49     		ldr	r1, .L74+8
 1451 0026 1B4B     		ldr	r3, .L74+8
 1452 0028 03F58153 		add	r3, r3, #4128
 1453 002c 1C33     		adds	r3, r3, #28
 1454 002e 1B68     		ldr	r3, [r3]
 1455 0030 43F0C062 		orr	r2, r3, #100663296
 1456 0034 01F58153 		add	r3, r1, #4128
 1457 0038 1C33     		adds	r3, r3, #28
 1458 003a 1A60     		str	r2, [r3]
 351:../Sources/drive/quad.c **** 
 352:../Sources/drive/quad.c ****   // configure the timer with "Fixed frequency clock" as clocksource and with a "Prescaler" of 0 =>
 353:../Sources/drive/quad.c ****   FTM1_SC = FTM_SC_CLKS(2) |  FTM_SC_PS(0) | FTM_SC_TOIE(1);
 1459              		.loc 2 353 0
 1460 003c 164B     		ldr	r3, .L74+12
 1461 003e 5022     		movs	r2, #80
 1462 0040 1A60     		str	r2, [r3]
 354:../Sources/drive/quad.c ****   FTM2_SC = FTM_SC_CLKS(2) |  FTM_SC_PS(0) | FTM_SC_TOIE(1);
 1463              		.loc 2 354 0
 1464 0042 164B     		ldr	r3, .L74+16
 1465 0044 5022     		movs	r2, #80
 1466 0046 1A60     		str	r2, [r3]
 355:../Sources/drive/quad.c **** 
 356:../Sources/drive/quad.c ****   // Enable FTM0 interrupt on NVIC with Prio: PRIO_FTM0 (defined in platform.h)
 357:../Sources/drive/quad.c ****   NVIC_SetPriority(FTM1_IRQn, PRIO_FTM1);       // set interrupt priority
 1467              		.loc 2 357 0
 1468 0048 0421     		movs	r1, #4
 1469 004a 2B20     		movs	r0, #43
 1470 004c FFF7FEFF 		bl	NVIC_SetPriority
 358:../Sources/drive/quad.c ****   NVIC_EnableIRQ(FTM1_IRQn);                    // enable interrupt
 1471              		.loc 2 358 0
 1472 0050 2B20     		movs	r0, #43
 1473 0052 FFF7FEFF 		bl	NVIC_EnableIRQ
 359:../Sources/drive/quad.c **** 
 360:../Sources/drive/quad.c ****   NVIC_SetPriority(FTM2_IRQn, PRIO_FTM2);       // set interrupt priority
 1474              		.loc 2 360 0
 1475 0056 0421     		movs	r1, #4
 1476 0058 2C20     		movs	r0, #44
 1477 005a FFF7FEFF 		bl	NVIC_SetPriority
 361:../Sources/drive/quad.c ****   NVIC_EnableIRQ(FTM2_IRQn);                    // enable interrupt
 1478              		.loc 2 361 0
 1479 005e 2C20     		movs	r0, #44
 1480 0060 FFF7FEFF 		bl	NVIC_EnableIRQ
 362:../Sources/drive/quad.c **** 
 363:../Sources/drive/quad.c ****   // configure channels as input capture
 364:../Sources/drive/quad.c ****   FTM1_C0SC = FTM_CnSC_CHIE(1) | FTM_CnSC_MSx(0) | FTM_CnSC_ELSx(3) | FTM_CnSC_ICRST(1);
 1481              		.loc 2 364 0
 1482 0064 0C4B     		ldr	r3, .L74+12
 1483 0066 4E22     		movs	r2, #78
 1484 0068 DA60     		str	r2, [r3, #12]
 365:../Sources/drive/quad.c ****   FTM1_C1SC = FTM_CnSC_CHIE(1) | FTM_CnSC_MSx(0) | FTM_CnSC_ELSx(3) | FTM_CnSC_ICRST(1);
 1485              		.loc 2 365 0
 1486 006a 0B4B     		ldr	r3, .L74+12
 1487 006c 4E22     		movs	r2, #78
 1488 006e 5A61     		str	r2, [r3, #20]
 366:../Sources/drive/quad.c **** 
 367:../Sources/drive/quad.c ****   FTM2_C0SC = FTM_CnSC_CHIE(1) | FTM_CnSC_MSx(0) | FTM_CnSC_ELSx(3) | FTM_CnSC_ICRST(1);
 1489              		.loc 2 367 0
 1490 0070 0A4B     		ldr	r3, .L74+16
 1491 0072 4E22     		movs	r2, #78
 1492 0074 DA60     		str	r2, [r3, #12]
 368:../Sources/drive/quad.c ****   FTM2_C1SC = FTM_CnSC_CHIE(1) | FTM_CnSC_MSx(0) | FTM_CnSC_ELSx(3) | FTM_CnSC_ICRST(1);
 1493              		.loc 2 368 0
 1494 0076 094B     		ldr	r3, .L74+16
 1495 0078 4E22     		movs	r2, #78
 1496 007a 5A61     		str	r2, [r3, #20]
 369:../Sources/drive/quad.c **** 
 370:../Sources/drive/quad.c ****   // register terminal command line handler
 371:../Sources/drive/quad.c ****   termRegisterCommandLineHandler(&clh, "q", "(quad)", quadParseCommand);
 1497              		.loc 2 371 0
 1498 007c 084B     		ldr	r3, .L74+20
 1499 007e 094A     		ldr	r2, .L74+24
 1500 0080 0949     		ldr	r1, .L74+28
 1501 0082 0A48     		ldr	r0, .L74+32
 1502 0084 FFF7FEFF 		bl	termRegisterCommandLineHandler
 372:../Sources/drive/quad.c **** }
 1503              		.loc 2 372 0
 1504 0088 00BF     		nop
 1505 008a 80BD     		pop	{r7, pc}
 1506              	.L75:
 1507              		.align	2
 1508              	.L74:
 1509 008c 00A00440 		.word	1074044928
 1510 0090 00900440 		.word	1074040832
 1511 0094 00700440 		.word	1074032640
 1512 0098 00900340 		.word	1073975296
 1513 009c 00A00340 		.word	1073979392
 1514 00a0 00000000 		.word	quadParseCommand
 1515 00a4 70000000 		.word	.LC14
 1516 00a8 78000000 		.word	.LC15
 1517 00ac 00000000 		.word	clh
 1518              		.cfi_endproc
 1519              	.LFE132:
 1521              		.section	.bss.fallingOkB.7080,"aw",%nobits
 1524              	fallingOkB.7080:
 1525 0000 00       		.space	1
 1526              		.section	.bss.risingOkB.7079,"aw",%nobits
 1529              	risingOkB.7079:
 1530 0000 00       		.space	1
 1531              		.section	.bss.fallingOkA.7082,"aw",%nobits
 1534              	fallingOkA.7082:
 1535 0000 00       		.space	1
 1536              		.section	.bss.risingOkA.7081,"aw",%nobits
 1539              	risingOkA.7081:
 1540 0000 00       		.space	1
 1541              		.section	.bss.bits.7078,"aw",%nobits
 1544              	bits.7078:
 1545 0000 00       		.space	1
 1546              		.section	.data.init.7087,"aw",%progbits
 1549              	init.7087:
 1550 0000 01       		.byte	1
 1551              		.section	.bss.risingB.7083,"aw",%nobits
 1552              		.align	2
 1555              	risingB.7083:
 1556 0000 00000000 		.space	4
 1557              		.section	.bss.fallingB.7084,"aw",%nobits
 1558              		.align	2
 1561              	fallingB.7084:
 1562 0000 00000000 		.space	4
 1563              		.section	.bss.risingA.7085,"aw",%nobits
 1564              		.align	2
 1567              	risingA.7085:
 1568 0000 00000000 		.space	4
 1569              		.section	.bss.fallingA.7086,"aw",%nobits
 1570              		.align	2
 1573              	fallingA.7086:
 1574 0000 00000000 		.space	4
 1575              		.section	.bss.fallingOkB.7096,"aw",%nobits
 1578              	fallingOkB.7096:
 1579 0000 00       		.space	1
 1580              		.section	.bss.risingOkB.7095,"aw",%nobits
 1583              	risingOkB.7095:
 1584 0000 00       		.space	1
 1585              		.section	.bss.fallingOkA.7098,"aw",%nobits
 1588              	fallingOkA.7098:
 1589 0000 00       		.space	1
 1590              		.section	.bss.risingOkA.7097,"aw",%nobits
 1593              	risingOkA.7097:
 1594 0000 00       		.space	1
 1595              		.section	.bss.bits.7094,"aw",%nobits
 1598              	bits.7094:
 1599 0000 00       		.space	1
 1600              		.section	.data.init.7103,"aw",%progbits
 1603              	init.7103:
 1604 0000 01       		.byte	1
 1605              		.section	.bss.risingB.7099,"aw",%nobits
 1606              		.align	2
 1609              	risingB.7099:
 1610 0000 00000000 		.space	4
 1611              		.section	.bss.fallingB.7100,"aw",%nobits
 1612              		.align	2
 1615              	fallingB.7100:
 1616 0000 00000000 		.space	4
 1617              		.section	.bss.risingA.7101,"aw",%nobits
 1618              		.align	2
 1621              	risingA.7101:
 1622 0000 00000000 		.space	4
 1623              		.section	.bss.fallingA.7102,"aw",%nobits
 1624              		.align	2
 1627              	fallingA.7102:
 1628 0000 00000000 		.space	4
 1629              		.text
 1630              	.Letext0:
 1631              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1632              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1633              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1634              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 1635              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1636              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1637              		.file 9 "../Includes/MK22F51212.h"
 1638              		.file 10 "../Includes/system_MK22F51212.h"
 1639              		.file 11 "../Includes/platform.h"
 1640              		.file 12 "../Sources/com/term.h"
DEFINED SYMBOLS
                            *ABS*:00000000 quad.c
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:24     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:64     .text.NVIC_EnableIRQ:00000030 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:69     .text.NVIC_SetPriority:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:75     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:134    .text.NVIC_SetPriority:0000004c $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:140    .rodata.quadTable:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:143    .rodata.quadTable:00000000 quadTable
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:161    .bss.ticksLeft:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:164    .bss.ticksLeft:00000000 ticksLeft
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:169    .bss.errorLeft:00000000 errorLeft
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:170    .bss.errorLeft:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:172    .bss.timeLeft:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:175    .bss.timeLeft:00000000 timeLeft
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:178    .bss.ticksRight:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:181    .bss.ticksRight:00000000 ticksRight
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:186    .bss.errorRight:00000000 errorRight
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:187    .bss.errorRight:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:189    .bss.timeRight:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:192    .bss.timeRight:00000000 timeRight
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:195    .bss.clh:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:198    .bss.clh:00000000 clh
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:201    .text.FTM1_IRQHandler:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:208    .text.FTM1_IRQHandler:00000000 FTM1_IRQHandler
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:551    .text.FTM1_IRQHandler:00000230 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1524   .bss.fallingOkB.7080:00000000 fallingOkB.7080
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1529   .bss.risingOkB.7079:00000000 risingOkB.7079
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1534   .bss.fallingOkA.7082:00000000 fallingOkA.7082
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1539   .bss.risingOkA.7081:00000000 risingOkA.7081
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1544   .bss.bits.7078:00000000 bits.7078
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1549   .data.init.7087:00000000 init.7087
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1555   .bss.risingB.7083:00000000 risingB.7083
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1561   .bss.fallingB.7084:00000000 fallingB.7084
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1567   .bss.risingA.7085:00000000 risingA.7085
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1573   .bss.fallingA.7086:00000000 fallingA.7086
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:572    .text.FTM2_IRQHandler:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:579    .text.FTM2_IRQHandler:00000000 FTM2_IRQHandler
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:921    .text.FTM2_IRQHandler:00000230 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1578   .bss.fallingOkB.7096:00000000 fallingOkB.7096
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1583   .bss.risingOkB.7095:00000000 risingOkB.7095
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1588   .bss.fallingOkA.7098:00000000 fallingOkA.7098
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1593   .bss.risingOkA.7097:00000000 risingOkA.7097
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1598   .bss.bits.7094:00000000 bits.7094
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1603   .data.init.7103:00000000 init.7103
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1609   .bss.risingB.7099:00000000 risingB.7099
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1615   .bss.fallingB.7100:00000000 fallingB.7100
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1621   .bss.risingA.7101:00000000 risingA.7101
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1627   .bss.fallingA.7102:00000000 fallingA.7102
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:942    .text.quadGetSpeedLeft:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:949    .text.quadGetSpeedLeft:00000000 quadGetSpeedLeft
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:989    .text.quadGetSpeedLeft:00000028 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:995    .text.quadGetSpeedRight:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1002   .text.quadGetSpeedRight:00000000 quadGetSpeedRight
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1042   .text.quadGetSpeedRight:00000028 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1052   .text.quadGetDistanceLeft:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1059   .text.quadGetDistanceLeft:00000000 quadGetDistanceLeft
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1105   .text.quadGetDistanceLeft:00000040 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1113   .text.quadGetDistanceRight:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1120   .text.quadGetDistanceRight:00000000 quadGetDistanceRight
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1166   .text.quadGetDistanceRight:00000040 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1174   .rodata:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1217   .text.quadParseCommand:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1224   .text.quadParseCommand:00000000 quadParseCommand
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1385   .text.quadParseCommand:00000114 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1414   .text.quadInit:00000000 $t
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1421   .text.quadInit:00000000 quadInit
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1509   .text.quadInit:0000008c $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1525   .bss.fallingOkB.7080:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1530   .bss.risingOkB.7079:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1535   .bss.fallingOkA.7082:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1540   .bss.risingOkA.7081:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1545   .bss.bits.7078:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1552   .bss.risingB.7083:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1558   .bss.fallingB.7084:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1564   .bss.risingA.7085:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1570   .bss.fallingA.7086:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1579   .bss.fallingOkB.7096:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1584   .bss.risingOkB.7095:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1589   .bss.fallingOkA.7098:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1594   .bss.risingOkA.7097:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1599   .bss.bits.7094:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1606   .bss.risingB.7099:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1612   .bss.fallingB.7100:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1618   .bss.risingA.7101:00000000 $d
C:\Users\Marco\AppData\Local\Temp\ccB8S4Oe.s:1624   .bss.fallingA.7102:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.a6d4f739a788c67292a3ea0a48d10bd5
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.newlib.h.21.59901f4bf241ab46c63694665baa7297
                           .group:00000000 wm4.features.h.22.0e8d07d991f6850e8439e4b604e8e02e
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.MK22F51212.h.96.792c303daa596f91c029224edd7c60aa
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.MK22F51212.h.109.eeee73bf5f54e3f06177795004b95e22
                           .group:00000000 wm4.core_cm4.h.43.f75e2f71b2e33f7a3db429cd8b0cae9e
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.a59e218d30e39d114c8962bbad645c74
                           .group:00000000 wm4.system_MK22F51212.h.94.09b5fd63c227fb82ca8c370fba9e2334
                           .group:00000000 wm4.MK22F51212.h.369.5a9c5aa32d240e03ff494f1c769cfadf
                           .group:00000000 wm4.platform.h.20.5dba9aa78ee93a87b4214fc940da3bb4

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2iz
strcmp
termWriteLine
strncmp
termWrite
termWriteNum32s
termWriteNum16s
termRegisterCommandLineHandler
