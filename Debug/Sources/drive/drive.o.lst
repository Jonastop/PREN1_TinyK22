   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"drive.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.setValueLeft,"aw",%nobits
  18              		.align	1
  21              	setValueLeft:
  22 0000 0000     		.space	2
  23              		.section	.bss.setValueRight,"aw",%nobits
  24              		.align	1
  27              	setValueRight:
  28 0000 0000     		.space	2
  29              		.section	.bss.kpL,"aw",%nobits
  32              	kpL:
  33 0000 00       		.space	1
  34              		.section	.bss.kiL,"aw",%nobits
  37              	kiL:
  38 0000 00       		.space	1
  39              		.section	.bss.kdL,"aw",%nobits
  42              	kdL:
  43 0000 00       		.space	1
  44              		.section	.bss.kpR,"aw",%nobits
  47              	kpR:
  48 0000 00       		.space	1
  49              		.section	.bss.kiR,"aw",%nobits
  52              	kiR:
  53 0000 00       		.space	1
  54              		.section	.bss.kdR,"aw",%nobits
  57              	kdR:
  58 0000 00       		.space	1
  59              		.section	.bss.integL,"aw",%nobits
  60              		.align	1
  63              	integL:
  64 0000 0000     		.space	2
  65              		.section	.bss.devL,"aw",%nobits
  66              		.align	1
  69              	devL:
  70 0000 0000     		.space	2
  71              		.section	.bss.devOldL,"aw",%nobits
  72              		.align	1
  75              	devOldL:
  76 0000 0000     		.space	2
  77              		.section	.bss.integR,"aw",%nobits
  78              		.align	1
  81              	integR:
  82 0000 0000     		.space	2
  83              		.section	.bss.devR,"aw",%nobits
  84              		.align	1
  87              	devR:
  88 0000 0000     		.space	2
  89              		.section	.bss.devOldR,"aw",%nobits
  90              		.align	1
  93              	devOldR:
  94 0000 0000     		.space	2
  95              		.section	.bss.valL,"aw",%nobits
  96              		.align	2
  99              	valL:
 100 0000 00000000 		.space	4
 101              		.section	.bss.valR,"aw",%nobits
 102              		.align	2
 105              	valR:
 106 0000 00000000 		.space	4
 107              		.comm	sl,512,4
 108              		.comm	sr,512,4
 109              		.comm	sli,1,1
 110              		.comm	sri,1,1
 111              		.section	.text.driveSetSpeed,"ax",%progbits
 112              		.align	1
 113              		.global	driveSetSpeed
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu fpv4-sp-d16
 119              	driveSetSpeed:
 120              	.LFB125:
 121              		.file 1 "../Sources/drive/drive.c"
   1:../Sources/drive/drive.c **** /**
   2:../Sources/drive/drive.c ****  *--------------------------------------------------------------------\n
   3:../Sources/drive/drive.c ****  *          HSLU T&A Hochschule Luzern Technik+Architektur            \n
   4:../Sources/drive/drive.c ****  *--------------------------------------------------------------------\n
   5:../Sources/drive/drive.c ****  *
   6:../Sources/drive/drive.c ****  * \brief         Drive with PID
   7:../Sources/drive/drive.c ****  * \file
   8:../Sources/drive/drive.c ****  * \author        Christian Jost, christian.jost@hslu.ch
   9:../Sources/drive/drive.c ****  * \date          04.04.20018
  10:../Sources/drive/drive.c ****  *
  11:../Sources/drive/drive.c ****  * $Id: drive.c 91 2018-04-20 07:20:56Z zajost $
  12:../Sources/drive/drive.c ****  *
  13:../Sources/drive/drive.c ****  *--------------------------------------------------------------------
  14:../Sources/drive/drive.c ****  */
  15:../Sources/drive/drive.c **** 
  16:../Sources/drive/drive.c **** #include "platform.h"
  17:../Sources/drive/drive.c **** #include "drive.h"
  18:../Sources/drive/drive.c **** #include "quad.h"
  19:../Sources/drive/drive.c **** #include "motor.h"
  20:../Sources/drive/drive.c **** 
  21:../Sources/drive/drive.c **** static int16_t setValueLeft;
  22:../Sources/drive/drive.c **** static int16_t setValueRight;
  23:../Sources/drive/drive.c **** static uint8_t kpL, kiL, kdL;
  24:../Sources/drive/drive.c **** static uint8_t kpR, kiR, kdR;
  25:../Sources/drive/drive.c **** static int16_t integL, devL, devOldL;
  26:../Sources/drive/drive.c **** static int16_t integR, devR, devOldR;
  27:../Sources/drive/drive.c **** static int32_t valL, valR;
  28:../Sources/drive/drive.c **** 
  29:../Sources/drive/drive.c **** 
  30:../Sources/drive/drive.c **** 
  31:../Sources/drive/drive.c **** #define PID_LOOPS_PER_SECOND  (1000 / PID_PERIOD)
  32:../Sources/drive/drive.c **** #define ACCELERATION_OFFSET   (ACCELERATION / PID_LOOPS_PER_SECOND)
  33:../Sources/drive/drive.c **** #define DECELERATION_OFFSET   (DECELERATION / PID_LOOPS_PER_SECOND)
  34:../Sources/drive/drive.c **** 
  35:../Sources/drive/drive.c **** int16_t sl[256];
  36:../Sources/drive/drive.c **** int16_t sr[256];
  37:../Sources/drive/drive.c **** uint8_t sli, sri;
  38:../Sources/drive/drive.c **** 
  39:../Sources/drive/drive.c **** 
  40:../Sources/drive/drive.c **** 
  41:../Sources/drive/drive.c **** 
  42:../Sources/drive/drive.c **** /**
  43:../Sources/drive/drive.c ****  * Sets the speed
  44:../Sources/drive/drive.c ****  * @param[in] speedL
  45:../Sources/drive/drive.c ****  *   the speed of the left wheel in mm/sec
  46:../Sources/drive/drive.c ****  * @param[in] speedR
  47:../Sources/drive/drive.c ****  *   the speed of the right wheel in mm/sec
  48:../Sources/drive/drive.c ****  */
  49:../Sources/drive/drive.c **** void driveSetSpeed(int16_t speedL, int16_t speedR)
  50:../Sources/drive/drive.c **** {
 122              		.loc 1 50 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127 0000 80B4     		push	{r7}
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 83B0     		sub	sp, sp, #12
 131              		.cfi_def_cfa_offset 16
 132 0004 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 134 0006 0346     		mov	r3, r0
 135 0008 0A46     		mov	r2, r1
 136 000a FB80     		strh	r3, [r7, #6]	@ movhi
 137 000c 1346     		mov	r3, r2	@ movhi
 138 000e BB80     		strh	r3, [r7, #4]	@ movhi
  51:../Sources/drive/drive.c ****   if (speedL > MAX_SPEED) speedL = MAX_SPEED;
 139              		.loc 1 51 0
 140 0010 B7F90630 		ldrsh	r3, [r7, #6]
 141 0014 B3F57A7F 		cmp	r3, #1000
 142 0018 03DD     		ble	.L2
 143              		.loc 1 51 0 is_stmt 0 discriminator 1
 144 001a 4FF47A73 		mov	r3, #1000
 145 001e FB80     		strh	r3, [r7, #6]	@ movhi
 146 0020 07E0     		b	.L3
 147              	.L2:
  52:../Sources/drive/drive.c ****   else if (speedL < -MAX_SPEED) speedL = -MAX_SPEED;
 148              		.loc 1 52 0 is_stmt 1
 149 0022 B7F90630 		ldrsh	r3, [r7, #6]
 150 0026 13F57A7F 		cmn	r3, #1000
 151 002a 02DA     		bge	.L3
 152              		.loc 1 52 0 is_stmt 0 discriminator 1
 153 002c 4FF61843 		movw	r3, #64536
 154 0030 FB80     		strh	r3, [r7, #6]	@ movhi
 155              	.L3:
  53:../Sources/drive/drive.c **** 
  54:../Sources/drive/drive.c ****   if (speedR > MAX_SPEED) speedR = MAX_SPEED;
 156              		.loc 1 54 0 is_stmt 1
 157 0032 B7F90430 		ldrsh	r3, [r7, #4]
 158 0036 B3F57A7F 		cmp	r3, #1000
 159 003a 03DD     		ble	.L4
 160              		.loc 1 54 0 is_stmt 0 discriminator 1
 161 003c 4FF47A73 		mov	r3, #1000
 162 0040 BB80     		strh	r3, [r7, #4]	@ movhi
 163 0042 07E0     		b	.L5
 164              	.L4:
  55:../Sources/drive/drive.c ****   else if (speedR < -MAX_SPEED) speedR = -MAX_SPEED;
 165              		.loc 1 55 0 is_stmt 1
 166 0044 B7F90430 		ldrsh	r3, [r7, #4]
 167 0048 13F57A7F 		cmn	r3, #1000
 168 004c 02DA     		bge	.L5
 169              		.loc 1 55 0 is_stmt 0 discriminator 1
 170 004e 4FF61843 		movw	r3, #64536
 171 0052 BB80     		strh	r3, [r7, #4]	@ movhi
 172              	.L5:
  56:../Sources/drive/drive.c **** 
  57:../Sources/drive/drive.c ****   setValueLeft = speedL;
 173              		.loc 1 57 0 is_stmt 1
 174 0054 054A     		ldr	r2, .L6
 175 0056 FB88     		ldrh	r3, [r7, #6]	@ movhi
 176 0058 1380     		strh	r3, [r2]	@ movhi
  58:../Sources/drive/drive.c ****   setValueRight = speedR;
 177              		.loc 1 58 0
 178 005a 054A     		ldr	r2, .L6+4
 179 005c BB88     		ldrh	r3, [r7, #4]	@ movhi
 180 005e 1380     		strh	r3, [r2]	@ movhi
  59:../Sources/drive/drive.c **** }
 181              		.loc 1 59 0
 182 0060 00BF     		nop
 183 0062 0C37     		adds	r7, r7, #12
 184              		.cfi_def_cfa_offset 4
 185 0064 BD46     		mov	sp, r7
 186              		.cfi_def_cfa_register 13
 187              		@ sp needed
 188 0066 5DF8047B 		ldr	r7, [sp], #4
 189              		.cfi_restore 7
 190              		.cfi_def_cfa_offset 0
 191 006a 7047     		bx	lr
 192              	.L7:
 193              		.align	2
 194              	.L6:
 195 006c 00000000 		.word	setValueLeft
 196 0070 00000000 		.word	setValueRight
 197              		.cfi_endproc
 198              	.LFE125:
 200              		.section	.text.driveSetParameters,"ax",%progbits
 201              		.align	1
 202              		.global	driveSetParameters
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	driveSetParameters:
 209              	.LFB126:
  60:../Sources/drive/drive.c **** 
  61:../Sources/drive/drive.c **** 
  62:../Sources/drive/drive.c **** /**
  63:../Sources/drive/drive.c ****  * This function sets the control parameters
  64:../Sources/drive/drive.c ****  * @param[in] pKpL Kp left 0..255
  65:../Sources/drive/drive.c ****  * @param[in] pKpR Kp right 0..255
  66:../Sources/drive/drive.c ****  * @param[in] pKiL Ki left 0..255
  67:../Sources/drive/drive.c ****  * @param[in] pKiR Ki right 0..255
  68:../Sources/drive/drive.c ****  */
  69:../Sources/drive/drive.c **** void driveSetParameters(uint8_t pKpL, uint8_t pKpR, uint8_t pKiL, uint8_t pKiR)
  70:../Sources/drive/drive.c **** {
 210              		.loc 1 70 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 8
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 90B4     		push	{r4, r7}
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 7, -4
 219 0002 82B0     		sub	sp, sp, #8
 220              		.cfi_def_cfa_offset 16
 221 0004 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
 223 0006 0446     		mov	r4, r0
 224 0008 0846     		mov	r0, r1
 225 000a 1146     		mov	r1, r2
 226 000c 1A46     		mov	r2, r3
 227 000e 2346     		mov	r3, r4
 228 0010 FB71     		strb	r3, [r7, #7]
 229 0012 0346     		mov	r3, r0
 230 0014 BB71     		strb	r3, [r7, #6]
 231 0016 0B46     		mov	r3, r1
 232 0018 7B71     		strb	r3, [r7, #5]
 233 001a 1346     		mov	r3, r2
 234 001c 3B71     		strb	r3, [r7, #4]
  71:../Sources/drive/drive.c ****   kpL = pKpL;
 235              		.loc 1 71 0
 236 001e 084A     		ldr	r2, .L9
 237 0020 FB79     		ldrb	r3, [r7, #7]
 238 0022 1370     		strb	r3, [r2]
  72:../Sources/drive/drive.c ****   kpR = pKpR;
 239              		.loc 1 72 0
 240 0024 074A     		ldr	r2, .L9+4
 241 0026 BB79     		ldrb	r3, [r7, #6]
 242 0028 1370     		strb	r3, [r2]
  73:../Sources/drive/drive.c ****   kiL = pKiL;
 243              		.loc 1 73 0
 244 002a 074A     		ldr	r2, .L9+8
 245 002c 7B79     		ldrb	r3, [r7, #5]
 246 002e 1370     		strb	r3, [r2]
  74:../Sources/drive/drive.c ****   kiR = pKiR;
 247              		.loc 1 74 0
 248 0030 064A     		ldr	r2, .L9+12
 249 0032 3B79     		ldrb	r3, [r7, #4]
 250 0034 1370     		strb	r3, [r2]
  75:../Sources/drive/drive.c **** }
 251              		.loc 1 75 0
 252 0036 00BF     		nop
 253 0038 0837     		adds	r7, r7, #8
 254              		.cfi_def_cfa_offset 8
 255 003a BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 003c 90BC     		pop	{r4, r7}
 259              		.cfi_restore 7
 260              		.cfi_restore 4
 261              		.cfi_def_cfa_offset 0
 262 003e 7047     		bx	lr
 263              	.L10:
 264              		.align	2
 265              	.L9:
 266 0040 00000000 		.word	kpL
 267 0044 00000000 		.word	kpR
 268 0048 00000000 		.word	kiL
 269 004c 00000000 		.word	kiR
 270              		.cfi_endproc
 271              	.LFE126:
 273              		.section	.text.driveToWork,"ax",%progbits
 274              		.align	1
 275              		.global	driveToWork
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu fpv4-sp-d16
 281              	driveToWork:
 282              	.LFB127:
  76:../Sources/drive/drive.c **** 
  77:../Sources/drive/drive.c **** 
  78:../Sources/drive/drive.c **** /**
  79:../Sources/drive/drive.c ****  * This function contains the PID closed loop controller
  80:../Sources/drive/drive.c ****  */
  81:../Sources/drive/drive.c **** void driveToWork(void)
  82:../Sources/drive/drive.c **** {
 283              		.loc 1 82 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 98B5     		push	{r3, r4, r7, lr}
 288              		.cfi_def_cfa_offset 16
 289              		.cfi_offset 3, -16
 290              		.cfi_offset 4, -12
 291              		.cfi_offset 7, -8
 292              		.cfi_offset 14, -4
 293 0002 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
  83:../Sources/drive/drive.c ****   static int16_t speedLeft = 0;
  84:../Sources/drive/drive.c ****   static int16_t speedRight = 0;
  85:../Sources/drive/drive.c ****   static int16_t setValueL = 0;
  86:../Sources/drive/drive.c ****   static int16_t setValueR = 0;
  87:../Sources/drive/drive.c **** 
  88:../Sources/drive/drive.c ****   //motorSetPwmLeft(0);
  89:../Sources/drive/drive.c ****   //motorSetPwmRight(0);
  90:../Sources/drive/drive.c **** 
  91:../Sources/drive/drive.c **** 
  92:../Sources/drive/drive.c ****   // pre control calculations
  93:../Sources/drive/drive.c ****   //------------------------------------------------------------------
  94:../Sources/drive/drive.c ****   // 2 tests with 100mm/s and 500mm/s
  95:../Sources/drive/drive.c ****   sl[sli] = (uint8_t)valL;     // 100=18  500=45
 295              		.loc 1 95 0
 296 0004 A84B     		ldr	r3, .L30
 297 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 0008 1A46     		mov	r2, r3
 299 000a A84B     		ldr	r3, .L30+4
 300 000c 1B68     		ldr	r3, [r3]
 301 000e DBB2     		uxtb	r3, r3
 302 0010 19B2     		sxth	r1, r3
 303 0012 A74B     		ldr	r3, .L30+8
 304 0014 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  96:../Sources/drive/drive.c ****   sr[sli++] = (uint8_t)valR;   // 100=16  500=42
 305              		.loc 1 96 0
 306 0018 A34B     		ldr	r3, .L30
 307 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 308 001c 5A1C     		adds	r2, r3, #1
 309 001e D1B2     		uxtb	r1, r2
 310 0020 A14A     		ldr	r2, .L30
 311 0022 1170     		strb	r1, [r2]
 312 0024 1A46     		mov	r2, r3
 313 0026 A34B     		ldr	r3, .L30+12
 314 0028 1B68     		ldr	r3, [r3]
 315 002a DBB2     		uxtb	r3, r3
 316 002c 19B2     		sxth	r1, r3
 317 002e A24B     		ldr	r3, .L30+16
 318 0030 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
  97:../Sources/drive/drive.c **** 
  98:../Sources/drive/drive.c ****   // y=m*x+n => preControl: val = setValue * m + n
  99:../Sources/drive/drive.c **** 
 100:../Sources/drive/drive.c ****   //              equation 1    equation 2
 101:../Sources/drive/drive.c ****   // left motor:  100=18*m+n    500=45*m+n  =>  m=0.0675  n=11.25
 102:../Sources/drive/drive.c ****   // right motor: 100=16*m+n    500=42*m+n  =>  m=0.065   n= 9.5
 103:../Sources/drive/drive.c ****   //
 104:../Sources/drive/drive.c ****   #define M_LEFT    68        // = m * 1000
 105:../Sources/drive/drive.c ****   #define M_RIGHT   65        // = m * 1000
 106:../Sources/drive/drive.c ****   #define N_LEFT    11
 107:../Sources/drive/drive.c ****   #define N_RIGHT   10
 108:../Sources/drive/drive.c ****   //------------------------------------------------------------------
 109:../Sources/drive/drive.c **** 
 110:../Sources/drive/drive.c **** 
 111:../Sources/drive/drive.c ****   speedLeft = ((speedLeft * 1) + quadGetSpeedLeft())/2;
 319              		.loc 1 111 0
 320 0034 A14B     		ldr	r3, .L30+20
 321 0036 B3F90030 		ldrsh	r3, [r3]
 322 003a 1C46     		mov	r4, r3
 323 003c FFF7FEFF 		bl	quadGetSpeedLeft
 324 0040 0346     		mov	r3, r0
 325 0042 2344     		add	r3, r3, r4
 326 0044 DA0F     		lsrs	r2, r3, #31
 327 0046 1344     		add	r3, r3, r2
 328 0048 5B10     		asrs	r3, r3, #1
 329 004a 1AB2     		sxth	r2, r3
 330 004c 9B4B     		ldr	r3, .L30+20
 331 004e 1A80     		strh	r2, [r3]	@ movhi
 112:../Sources/drive/drive.c ****   speedRight = ((speedRight * 1) + quadGetSpeedRight())/2;
 332              		.loc 1 112 0
 333 0050 9B4B     		ldr	r3, .L30+24
 334 0052 B3F90030 		ldrsh	r3, [r3]
 335 0056 1C46     		mov	r4, r3
 336 0058 FFF7FEFF 		bl	quadGetSpeedRight
 337 005c 0346     		mov	r3, r0
 338 005e 2344     		add	r3, r3, r4
 339 0060 DA0F     		lsrs	r2, r3, #31
 340 0062 1344     		add	r3, r3, r2
 341 0064 5B10     		asrs	r3, r3, #1
 342 0066 1AB2     		sxth	r2, r3
 343 0068 954B     		ldr	r3, .L30+24
 344 006a 1A80     		strh	r2, [r3]	@ movhi
 113:../Sources/drive/drive.c **** 
 114:../Sources/drive/drive.c ****   if (setValueRight > setValueR) {                                        // accelerate right wheel
 345              		.loc 1 114 0
 346 006c 954B     		ldr	r3, .L30+28
 347 006e B3F90020 		ldrsh	r2, [r3]
 348 0072 954B     		ldr	r3, .L30+32
 349 0074 B3F90030 		ldrsh	r3, [r3]
 350 0078 9A42     		cmp	r2, r3
 351 007a 15DD     		ble	.L12
 115:../Sources/drive/drive.c ****     setValueR += ACCELERATION_OFFSET;
 352              		.loc 1 115 0
 353 007c 924B     		ldr	r3, .L30+32
 354 007e B3F90030 		ldrsh	r3, [r3]
 355 0082 9BB2     		uxth	r3, r3
 356 0084 0C33     		adds	r3, r3, #12
 357 0086 9BB2     		uxth	r3, r3
 358 0088 1AB2     		sxth	r2, r3
 359 008a 8F4B     		ldr	r3, .L30+32
 360 008c 1A80     		strh	r2, [r3]	@ movhi
 116:../Sources/drive/drive.c ****     if (setValueRight < setValueR) setValueR = setValueRight;
 361              		.loc 1 116 0
 362 008e 8D4B     		ldr	r3, .L30+28
 363 0090 B3F90020 		ldrsh	r2, [r3]
 364 0094 8C4B     		ldr	r3, .L30+32
 365 0096 B3F90030 		ldrsh	r3, [r3]
 366 009a 9A42     		cmp	r2, r3
 367 009c 04DA     		bge	.L12
 368              		.loc 1 116 0 is_stmt 0 discriminator 1
 369 009e 894B     		ldr	r3, .L30+28
 370 00a0 B3F90020 		ldrsh	r2, [r3]
 371 00a4 884B     		ldr	r3, .L30+32
 372 00a6 1A80     		strh	r2, [r3]	@ movhi
 373              	.L12:
 117:../Sources/drive/drive.c ****   }
 118:../Sources/drive/drive.c ****   if (setValueRight < setValueR) {                                        // decelerate right wheel
 374              		.loc 1 118 0 is_stmt 1
 375 00a8 864B     		ldr	r3, .L30+28
 376 00aa B3F90020 		ldrsh	r2, [r3]
 377 00ae 864B     		ldr	r3, .L30+32
 378 00b0 B3F90030 		ldrsh	r3, [r3]
 379 00b4 9A42     		cmp	r2, r3
 380 00b6 15DA     		bge	.L13
 119:../Sources/drive/drive.c ****     setValueR -= DECELERATION_OFFSET;
 381              		.loc 1 119 0
 382 00b8 834B     		ldr	r3, .L30+32
 383 00ba B3F90030 		ldrsh	r3, [r3]
 384 00be 9BB2     		uxth	r3, r3
 385 00c0 323B     		subs	r3, r3, #50
 386 00c2 9BB2     		uxth	r3, r3
 387 00c4 1AB2     		sxth	r2, r3
 388 00c6 804B     		ldr	r3, .L30+32
 389 00c8 1A80     		strh	r2, [r3]	@ movhi
 120:../Sources/drive/drive.c ****     if (setValueRight > setValueR) setValueR = setValueRight;
 390              		.loc 1 120 0
 391 00ca 7E4B     		ldr	r3, .L30+28
 392 00cc B3F90020 		ldrsh	r2, [r3]
 393 00d0 7D4B     		ldr	r3, .L30+32
 394 00d2 B3F90030 		ldrsh	r3, [r3]
 395 00d6 9A42     		cmp	r2, r3
 396 00d8 04DD     		ble	.L13
 397              		.loc 1 120 0 is_stmt 0 discriminator 1
 398 00da 7A4B     		ldr	r3, .L30+28
 399 00dc B3F90020 		ldrsh	r2, [r3]
 400 00e0 794B     		ldr	r3, .L30+32
 401 00e2 1A80     		strh	r2, [r3]	@ movhi
 402              	.L13:
 121:../Sources/drive/drive.c ****   }
 122:../Sources/drive/drive.c **** 
 123:../Sources/drive/drive.c ****   if (setValueLeft > setValueL) {                                         // decelerate left wheel
 403              		.loc 1 123 0 is_stmt 1
 404 00e4 794B     		ldr	r3, .L30+36
 405 00e6 B3F90020 		ldrsh	r2, [r3]
 406 00ea 794B     		ldr	r3, .L30+40
 407 00ec B3F90030 		ldrsh	r3, [r3]
 408 00f0 9A42     		cmp	r2, r3
 409 00f2 15DD     		ble	.L14
 124:../Sources/drive/drive.c ****     setValueL += ACCELERATION_OFFSET;
 410              		.loc 1 124 0
 411 00f4 764B     		ldr	r3, .L30+40
 412 00f6 B3F90030 		ldrsh	r3, [r3]
 413 00fa 9BB2     		uxth	r3, r3
 414 00fc 0C33     		adds	r3, r3, #12
 415 00fe 9BB2     		uxth	r3, r3
 416 0100 1AB2     		sxth	r2, r3
 417 0102 734B     		ldr	r3, .L30+40
 418 0104 1A80     		strh	r2, [r3]	@ movhi
 125:../Sources/drive/drive.c ****     if (setValueLeft < setValueL) setValueL = setValueLeft;
 419              		.loc 1 125 0
 420 0106 714B     		ldr	r3, .L30+36
 421 0108 B3F90020 		ldrsh	r2, [r3]
 422 010c 704B     		ldr	r3, .L30+40
 423 010e B3F90030 		ldrsh	r3, [r3]
 424 0112 9A42     		cmp	r2, r3
 425 0114 04DA     		bge	.L14
 426              		.loc 1 125 0 is_stmt 0 discriminator 1
 427 0116 6D4B     		ldr	r3, .L30+36
 428 0118 B3F90020 		ldrsh	r2, [r3]
 429 011c 6C4B     		ldr	r3, .L30+40
 430 011e 1A80     		strh	r2, [r3]	@ movhi
 431              	.L14:
 126:../Sources/drive/drive.c ****   }
 127:../Sources/drive/drive.c ****   if (setValueLeft < setValueL) {                                         // decelerate left wheel
 432              		.loc 1 127 0 is_stmt 1
 433 0120 6A4B     		ldr	r3, .L30+36
 434 0122 B3F90020 		ldrsh	r2, [r3]
 435 0126 6A4B     		ldr	r3, .L30+40
 436 0128 B3F90030 		ldrsh	r3, [r3]
 437 012c 9A42     		cmp	r2, r3
 438 012e 15DA     		bge	.L15
 128:../Sources/drive/drive.c ****     setValueL -= DECELERATION_OFFSET;
 439              		.loc 1 128 0
 440 0130 674B     		ldr	r3, .L30+40
 441 0132 B3F90030 		ldrsh	r3, [r3]
 442 0136 9BB2     		uxth	r3, r3
 443 0138 323B     		subs	r3, r3, #50
 444 013a 9BB2     		uxth	r3, r3
 445 013c 1AB2     		sxth	r2, r3
 446 013e 644B     		ldr	r3, .L30+40
 447 0140 1A80     		strh	r2, [r3]	@ movhi
 129:../Sources/drive/drive.c ****     if (setValueLeft > setValueL) setValueL = setValueLeft;
 448              		.loc 1 129 0
 449 0142 624B     		ldr	r3, .L30+36
 450 0144 B3F90020 		ldrsh	r2, [r3]
 451 0148 614B     		ldr	r3, .L30+40
 452 014a B3F90030 		ldrsh	r3, [r3]
 453 014e 9A42     		cmp	r2, r3
 454 0150 04DD     		ble	.L15
 455              		.loc 1 129 0 is_stmt 0 discriminator 1
 456 0152 5E4B     		ldr	r3, .L30+36
 457 0154 B3F90020 		ldrsh	r2, [r3]
 458 0158 5D4B     		ldr	r3, .L30+40
 459 015a 1A80     		strh	r2, [r3]	@ movhi
 460              	.L15:
 130:../Sources/drive/drive.c ****   }
 131:../Sources/drive/drive.c **** 
 132:../Sources/drive/drive.c ****   if (setValueL)
 461              		.loc 1 132 0 is_stmt 1
 462 015c 5C4B     		ldr	r3, .L30+40
 463 015e B3F90030 		ldrsh	r3, [r3]
 464 0162 002B     		cmp	r3, #0
 465 0164 00F0C480 		beq	.L16
 133:../Sources/drive/drive.c ****   {
 134:../Sources/drive/drive.c ****     devL = (setValueL - speedLeft);       // calc deviation: max devL = +2000 - -2000 = 4000
 466              		.loc 1 134 0
 467 0168 594B     		ldr	r3, .L30+40
 468 016a B3F90030 		ldrsh	r3, [r3]
 469 016e 9AB2     		uxth	r2, r3
 470 0170 524B     		ldr	r3, .L30+20
 471 0172 B3F90030 		ldrsh	r3, [r3]
 472 0176 9BB2     		uxth	r3, r3
 473 0178 D31A     		subs	r3, r2, r3
 474 017a 9BB2     		uxth	r3, r3
 475 017c 1AB2     		sxth	r2, r3
 476 017e 554B     		ldr	r3, .L30+44
 477 0180 1A80     		strh	r2, [r3]	@ movhi
 135:../Sources/drive/drive.c ****     valL = (kpL * devL);                  // P-Part: max (kpL * devL) = 1024000
 478              		.loc 1 135 0
 479 0182 554B     		ldr	r3, .L30+48
 480 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 481 0186 1A46     		mov	r2, r3
 482 0188 524B     		ldr	r3, .L30+44
 483 018a B3F90030 		ldrsh	r3, [r3]
 484 018e 03FB02F3 		mul	r3, r3, r2
 485 0192 464A     		ldr	r2, .L30+4
 486 0194 1360     		str	r3, [r2]
 136:../Sources/drive/drive.c ****     if (kiL) integL += devL;              // I-Part with anti-windup
 487              		.loc 1 136 0
 488 0196 514B     		ldr	r3, .L30+52
 489 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 490 019a 002B     		cmp	r3, #0
 491 019c 0CD0     		beq	.L17
 492              		.loc 1 136 0 is_stmt 0 discriminator 1
 493 019e 504B     		ldr	r3, .L30+56
 494 01a0 B3F90030 		ldrsh	r3, [r3]
 495 01a4 9AB2     		uxth	r2, r3
 496 01a6 4B4B     		ldr	r3, .L30+44
 497 01a8 B3F90030 		ldrsh	r3, [r3]
 498 01ac 9BB2     		uxth	r3, r3
 499 01ae 1344     		add	r3, r3, r2
 500 01b0 9BB2     		uxth	r3, r3
 501 01b2 1AB2     		sxth	r2, r3
 502 01b4 4A4B     		ldr	r3, .L30+56
 503 01b6 1A80     		strh	r2, [r3]	@ movhi
 504              	.L17:
 137:../Sources/drive/drive.c ****     valL += (kiL * integL);
 505              		.loc 1 137 0 is_stmt 1
 506 01b8 484B     		ldr	r3, .L30+52
 507 01ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 508 01bc 1A46     		mov	r2, r3
 509 01be 484B     		ldr	r3, .L30+56
 510 01c0 B3F90030 		ldrsh	r3, [r3]
 511 01c4 03FB02F2 		mul	r2, r3, r2
 512 01c8 384B     		ldr	r3, .L30+4
 513 01ca 1B68     		ldr	r3, [r3]
 514 01cc 1344     		add	r3, r3, r2
 515 01ce 374A     		ldr	r2, .L30+4
 516 01d0 1360     		str	r3, [r2]
 138:../Sources/drive/drive.c ****     valL += (kdL*(setValueL-devOldL));    // D-Part
 517              		.loc 1 138 0
 518 01d2 444B     		ldr	r3, .L30+60
 519 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 520 01d6 1A46     		mov	r2, r3
 521 01d8 3D4B     		ldr	r3, .L30+40
 522 01da B3F90030 		ldrsh	r3, [r3]
 523 01de 1946     		mov	r1, r3
 524 01e0 414B     		ldr	r3, .L30+64
 525 01e2 B3F90030 		ldrsh	r3, [r3]
 526 01e6 CB1A     		subs	r3, r1, r3
 527 01e8 03FB02F2 		mul	r2, r3, r2
 528 01ec 2F4B     		ldr	r3, .L30+4
 529 01ee 1B68     		ldr	r3, [r3]
 530 01f0 1344     		add	r3, r3, r2
 531 01f2 2E4A     		ldr	r2, .L30+4
 532 01f4 1360     		str	r3, [r2]
 139:../Sources/drive/drive.c ****     devOldL = setValueL;
 533              		.loc 1 139 0
 534 01f6 364B     		ldr	r3, .L30+40
 535 01f8 B3F90020 		ldrsh	r2, [r3]
 536 01fc 3A4B     		ldr	r3, .L30+64
 537 01fe 1A80     		strh	r2, [r3]	@ movhi
 140:../Sources/drive/drive.c ****     valL /= 1000;                         // scaling
 538              		.loc 1 140 0
 539 0200 2A4B     		ldr	r3, .L30+4
 540 0202 1B68     		ldr	r3, [r3]
 541 0204 394A     		ldr	r2, .L30+68
 542 0206 82FB0312 		smull	r1, r2, r2, r3
 543 020a 9211     		asrs	r2, r2, #6
 544 020c DB17     		asrs	r3, r3, #31
 545 020e D31A     		subs	r3, r2, r3
 546 0210 264A     		ldr	r2, .L30+4
 547 0212 1360     		str	r3, [r2]
 141:../Sources/drive/drive.c **** 
 142:../Sources/drive/drive.c ****     // pre control
 143:../Sources/drive/drive.c ****     // y=m*x+n => preControl: setValue*m + n
 144:../Sources/drive/drive.c ****     valL += (M_LEFT * setValueL) / 1000 + (setValueL > 0 ? N_LEFT : -N_LEFT);
 548              		.loc 1 144 0
 549 0214 2E4B     		ldr	r3, .L30+40
 550 0216 B3F90030 		ldrsh	r3, [r3]
 551 021a 1A46     		mov	r2, r3
 552 021c 1346     		mov	r3, r2
 553 021e 1B01     		lsls	r3, r3, #4
 554 0220 1344     		add	r3, r3, r2
 555 0222 9B00     		lsls	r3, r3, #2
 556 0224 314A     		ldr	r2, .L30+68
 557 0226 82FB0312 		smull	r1, r2, r2, r3
 558 022a 9211     		asrs	r2, r2, #6
 559 022c DB17     		asrs	r3, r3, #31
 560 022e D21A     		subs	r2, r2, r3
 561 0230 274B     		ldr	r3, .L30+40
 562 0232 B3F90030 		ldrsh	r3, [r3]
 563 0236 002B     		cmp	r3, #0
 564 0238 01DD     		ble	.L18
 565              		.loc 1 144 0 is_stmt 0 discriminator 1
 566 023a 0B23     		movs	r3, #11
 567 023c 01E0     		b	.L19
 568              	.L18:
 569              		.loc 1 144 0 discriminator 2
 570 023e 6FF00A03 		mvn	r3, #10
 571              	.L19:
 572              		.loc 1 144 0 discriminator 4
 573 0242 1A44     		add	r2, r2, r3
 574 0244 194B     		ldr	r3, .L30+4
 575 0246 1B68     		ldr	r3, [r3]
 576 0248 1344     		add	r3, r3, r2
 577 024a 184A     		ldr	r2, .L30+4
 578 024c 1360     		str	r3, [r2]
 145:../Sources/drive/drive.c **** 
 146:../Sources/drive/drive.c ****     if (valL > MOTOR_MAX_VALUE) {
 579              		.loc 1 146 0 is_stmt 1 discriminator 4
 580 024e 174B     		ldr	r3, .L30+4
 581 0250 1B68     		ldr	r3, [r3]
 582 0252 7F2B     		cmp	r3, #127
 583 0254 10DD     		ble	.L20
 147:../Sources/drive/drive.c ****       valL = MOTOR_MAX_VALUE;
 584              		.loc 1 147 0
 585 0256 154B     		ldr	r3, .L30+4
 586 0258 7F22     		movs	r2, #127
 587 025a 1A60     		str	r2, [r3]
 148:../Sources/drive/drive.c ****       integL -= devL;
 588              		.loc 1 148 0
 589 025c 204B     		ldr	r3, .L30+56
 590 025e B3F90030 		ldrsh	r3, [r3]
 591 0262 9AB2     		uxth	r2, r3
 592 0264 1B4B     		ldr	r3, .L30+44
 593 0266 B3F90030 		ldrsh	r3, [r3]
 594 026a 9BB2     		uxth	r3, r3
 595 026c D31A     		subs	r3, r2, r3
 596 026e 9BB2     		uxth	r3, r3
 597 0270 1AB2     		sxth	r2, r3
 598 0272 1B4B     		ldr	r3, .L30+56
 599 0274 1A80     		strh	r2, [r3]	@ movhi
 600 0276 49E0     		b	.L22
 601              	.L20:
 149:../Sources/drive/drive.c ****     }
 150:../Sources/drive/drive.c ****     else if (valL < -MOTOR_MAX_VALUE) {
 602              		.loc 1 150 0
 603 0278 0C4B     		ldr	r3, .L30+4
 604 027a 1B68     		ldr	r3, [r3]
 605 027c 13F17F0F 		cmn	r3, #127
 606 0280 44DA     		bge	.L22
 151:../Sources/drive/drive.c ****       valL = -MOTOR_MAX_VALUE;
 607              		.loc 1 151 0
 608 0282 0A4B     		ldr	r3, .L30+4
 609 0284 6FF07E02 		mvn	r2, #126
 610 0288 1A60     		str	r2, [r3]
 152:../Sources/drive/drive.c ****       integL += devL;
 611              		.loc 1 152 0
 612 028a 154B     		ldr	r3, .L30+56
 613 028c B3F90030 		ldrsh	r3, [r3]
 614 0290 9AB2     		uxth	r2, r3
 615 0292 104B     		ldr	r3, .L30+44
 616 0294 B3F90030 		ldrsh	r3, [r3]
 617 0298 9BB2     		uxth	r3, r3
 618 029a 1344     		add	r3, r3, r2
 619 029c 9BB2     		uxth	r3, r3
 620 029e 1AB2     		sxth	r2, r3
 621 02a0 0F4B     		ldr	r3, .L30+56
 622 02a2 1A80     		strh	r2, [r3]	@ movhi
 623 02a4 32E0     		b	.L22
 624              	.L31:
 625 02a6 00BF     		.align	2
 626              	.L30:
 627 02a8 00000000 		.word	sli
 628 02ac 00000000 		.word	valL
 629 02b0 00000000 		.word	sl
 630 02b4 00000000 		.word	valR
 631 02b8 00000000 		.word	sr
 632 02bc 00000000 		.word	speedLeft.6763
 633 02c0 00000000 		.word	speedRight.6764
 634 02c4 00000000 		.word	setValueRight
 635 02c8 00000000 		.word	setValueR.6766
 636 02cc 00000000 		.word	setValueLeft
 637 02d0 00000000 		.word	setValueL.6765
 638 02d4 00000000 		.word	devL
 639 02d8 00000000 		.word	kpL
 640 02dc 00000000 		.word	kiL
 641 02e0 00000000 		.word	integL
 642 02e4 00000000 		.word	kdL
 643 02e8 00000000 		.word	devOldL
 644 02ec D34D6210 		.word	274877907
 645              	.L16:
 153:../Sources/drive/drive.c ****     }
 154:../Sources/drive/drive.c ****   }
 155:../Sources/drive/drive.c ****   else {
 156:../Sources/drive/drive.c ****     valL = integL = devOldL = 0;
 646              		.loc 1 156 0
 647 02f0 664B     		ldr	r3, .L32
 648 02f2 0022     		movs	r2, #0
 649 02f4 1A80     		strh	r2, [r3]	@ movhi
 650 02f6 654B     		ldr	r3, .L32
 651 02f8 B3F90020 		ldrsh	r2, [r3]
 652 02fc 644B     		ldr	r3, .L32+4
 653 02fe 1A80     		strh	r2, [r3]	@ movhi
 654 0300 634B     		ldr	r3, .L32+4
 655 0302 B3F90030 		ldrsh	r3, [r3]
 656 0306 1A46     		mov	r2, r3
 657 0308 624B     		ldr	r3, .L32+8
 658 030a 1A60     		str	r2, [r3]
 659              	.L22:
 157:../Sources/drive/drive.c ****   }
 158:../Sources/drive/drive.c **** 
 159:../Sources/drive/drive.c ****   if (setValueR)
 660              		.loc 1 159 0
 661 030c 624B     		ldr	r3, .L32+12
 662 030e B3F90030 		ldrsh	r3, [r3]
 663 0312 002B     		cmp	r3, #0
 664 0314 00F09E80 		beq	.L23
 160:../Sources/drive/drive.c ****   {
 161:../Sources/drive/drive.c ****     devR = (setValueR - speedRight);      // calc deviation
 665              		.loc 1 161 0
 666 0318 5F4B     		ldr	r3, .L32+12
 667 031a B3F90030 		ldrsh	r3, [r3]
 668 031e 9AB2     		uxth	r2, r3
 669 0320 5E4B     		ldr	r3, .L32+16
 670 0322 B3F90030 		ldrsh	r3, [r3]
 671 0326 9BB2     		uxth	r3, r3
 672 0328 D31A     		subs	r3, r2, r3
 673 032a 9BB2     		uxth	r3, r3
 674 032c 1AB2     		sxth	r2, r3
 675 032e 5C4B     		ldr	r3, .L32+20
 676 0330 1A80     		strh	r2, [r3]	@ movhi
 162:../Sources/drive/drive.c ****     valR = (kpR * devR);                  // P-Part: (max kpX = 2000 * 255 = 510'000)
 677              		.loc 1 162 0
 678 0332 5C4B     		ldr	r3, .L32+24
 679 0334 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 680 0336 1A46     		mov	r2, r3
 681 0338 594B     		ldr	r3, .L32+20
 682 033a B3F90030 		ldrsh	r3, [r3]
 683 033e 03FB02F3 		mul	r3, r3, r2
 684 0342 594A     		ldr	r2, .L32+28
 685 0344 1360     		str	r3, [r2]
 163:../Sources/drive/drive.c ****     if (kiR) integR += devR;              // I-Part: with anti-windup below
 686              		.loc 1 163 0
 687 0346 594B     		ldr	r3, .L32+32
 688 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 689 034a 002B     		cmp	r3, #0
 690 034c 0CD0     		beq	.L24
 691              		.loc 1 163 0 is_stmt 0 discriminator 1
 692 034e 584B     		ldr	r3, .L32+36
 693 0350 B3F90030 		ldrsh	r3, [r3]
 694 0354 9AB2     		uxth	r2, r3
 695 0356 524B     		ldr	r3, .L32+20
 696 0358 B3F90030 		ldrsh	r3, [r3]
 697 035c 9BB2     		uxth	r3, r3
 698 035e 1344     		add	r3, r3, r2
 699 0360 9BB2     		uxth	r3, r3
 700 0362 1AB2     		sxth	r2, r3
 701 0364 524B     		ldr	r3, .L32+36
 702 0366 1A80     		strh	r2, [r3]	@ movhi
 703              	.L24:
 164:../Sources/drive/drive.c ****     valR += (kiR * integR);
 704              		.loc 1 164 0 is_stmt 1
 705 0368 504B     		ldr	r3, .L32+32
 706 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 707 036c 1A46     		mov	r2, r3
 708 036e 504B     		ldr	r3, .L32+36
 709 0370 B3F90030 		ldrsh	r3, [r3]
 710 0374 03FB02F2 		mul	r2, r3, r2
 711 0378 4B4B     		ldr	r3, .L32+28
 712 037a 1B68     		ldr	r3, [r3]
 713 037c 1344     		add	r3, r3, r2
 714 037e 4A4A     		ldr	r2, .L32+28
 715 0380 1360     		str	r3, [r2]
 165:../Sources/drive/drive.c ****     valR += (kdR*(setValueR-devOldR));    // D-Part
 716              		.loc 1 165 0
 717 0382 4C4B     		ldr	r3, .L32+40
 718 0384 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 719 0386 1A46     		mov	r2, r3
 720 0388 434B     		ldr	r3, .L32+12
 721 038a B3F90030 		ldrsh	r3, [r3]
 722 038e 1946     		mov	r1, r3
 723 0390 494B     		ldr	r3, .L32+44
 724 0392 B3F90030 		ldrsh	r3, [r3]
 725 0396 CB1A     		subs	r3, r1, r3
 726 0398 03FB02F2 		mul	r2, r3, r2
 727 039c 424B     		ldr	r3, .L32+28
 728 039e 1B68     		ldr	r3, [r3]
 729 03a0 1344     		add	r3, r3, r2
 730 03a2 414A     		ldr	r2, .L32+28
 731 03a4 1360     		str	r3, [r2]
 166:../Sources/drive/drive.c ****     devOldR = setValueR;
 732              		.loc 1 166 0
 733 03a6 3C4B     		ldr	r3, .L32+12
 734 03a8 B3F90020 		ldrsh	r2, [r3]
 735 03ac 424B     		ldr	r3, .L32+44
 736 03ae 1A80     		strh	r2, [r3]	@ movhi
 167:../Sources/drive/drive.c ****     valR /= 1000;                         // scaling
 737              		.loc 1 167 0
 738 03b0 3D4B     		ldr	r3, .L32+28
 739 03b2 1B68     		ldr	r3, [r3]
 740 03b4 414A     		ldr	r2, .L32+48
 741 03b6 82FB0312 		smull	r1, r2, r2, r3
 742 03ba 9211     		asrs	r2, r2, #6
 743 03bc DB17     		asrs	r3, r3, #31
 744 03be D31A     		subs	r3, r2, r3
 745 03c0 394A     		ldr	r2, .L32+28
 746 03c2 1360     		str	r3, [r2]
 168:../Sources/drive/drive.c **** 
 169:../Sources/drive/drive.c ****     // pre control
 170:../Sources/drive/drive.c ****     // y=m*x+n => preControl: setValue*m + n
 171:../Sources/drive/drive.c ****     valR += (M_RIGHT * setValueR) / 1000 + (setValueR > 0 ? N_RIGHT : -N_RIGHT);
 747              		.loc 1 171 0
 748 03c4 344B     		ldr	r3, .L32+12
 749 03c6 B3F90030 		ldrsh	r3, [r3]
 750 03ca 1A46     		mov	r2, r3
 751 03cc 1346     		mov	r3, r2
 752 03ce 9B01     		lsls	r3, r3, #6
 753 03d0 1344     		add	r3, r3, r2
 754 03d2 3A4A     		ldr	r2, .L32+48
 755 03d4 82FB0312 		smull	r1, r2, r2, r3
 756 03d8 9211     		asrs	r2, r2, #6
 757 03da DB17     		asrs	r3, r3, #31
 758 03dc D21A     		subs	r2, r2, r3
 759 03de 2E4B     		ldr	r3, .L32+12
 760 03e0 B3F90030 		ldrsh	r3, [r3]
 761 03e4 002B     		cmp	r3, #0
 762 03e6 01DD     		ble	.L25
 763              		.loc 1 171 0 is_stmt 0 discriminator 1
 764 03e8 0A23     		movs	r3, #10
 765 03ea 01E0     		b	.L26
 766              	.L25:
 767              		.loc 1 171 0 discriminator 2
 768 03ec 6FF00903 		mvn	r3, #9
 769              	.L26:
 770              		.loc 1 171 0 discriminator 4
 771 03f0 1A44     		add	r2, r2, r3
 772 03f2 2D4B     		ldr	r3, .L32+28
 773 03f4 1B68     		ldr	r3, [r3]
 774 03f6 1344     		add	r3, r3, r2
 775 03f8 2B4A     		ldr	r2, .L32+28
 776 03fa 1360     		str	r3, [r2]
 172:../Sources/drive/drive.c **** 
 173:../Sources/drive/drive.c ****     if (valR > MOTOR_MAX_VALUE) {
 777              		.loc 1 173 0 is_stmt 1 discriminator 4
 778 03fc 2A4B     		ldr	r3, .L32+28
 779 03fe 1B68     		ldr	r3, [r3]
 780 0400 7F2B     		cmp	r3, #127
 781 0402 10DD     		ble	.L27
 174:../Sources/drive/drive.c ****       valR = MOTOR_MAX_VALUE;
 782              		.loc 1 174 0
 783 0404 284B     		ldr	r3, .L32+28
 784 0406 7F22     		movs	r2, #127
 785 0408 1A60     		str	r2, [r3]
 175:../Sources/drive/drive.c ****       integR -= devR;                     // anti wind-up
 786              		.loc 1 175 0
 787 040a 294B     		ldr	r3, .L32+36
 788 040c B3F90030 		ldrsh	r3, [r3]
 789 0410 9AB2     		uxth	r2, r3
 790 0412 234B     		ldr	r3, .L32+20
 791 0414 B3F90030 		ldrsh	r3, [r3]
 792 0418 9BB2     		uxth	r3, r3
 793 041a D31A     		subs	r3, r2, r3
 794 041c 9BB2     		uxth	r3, r3
 795 041e 1AB2     		sxth	r2, r3
 796 0420 234B     		ldr	r3, .L32+36
 797 0422 1A80     		strh	r2, [r3]	@ movhi
 798 0424 24E0     		b	.L29
 799              	.L27:
 176:../Sources/drive/drive.c ****     }
 177:../Sources/drive/drive.c ****     else if (valR < -MOTOR_MAX_VALUE) {
 800              		.loc 1 177 0
 801 0426 204B     		ldr	r3, .L32+28
 802 0428 1B68     		ldr	r3, [r3]
 803 042a 13F17F0F 		cmn	r3, #127
 804 042e 1FDA     		bge	.L29
 178:../Sources/drive/drive.c ****       valR = -MOTOR_MAX_VALUE;
 805              		.loc 1 178 0
 806 0430 1D4B     		ldr	r3, .L32+28
 807 0432 6FF07E02 		mvn	r2, #126
 808 0436 1A60     		str	r2, [r3]
 179:../Sources/drive/drive.c ****       integR += devR;                     // anti wind-up
 809              		.loc 1 179 0
 810 0438 1D4B     		ldr	r3, .L32+36
 811 043a B3F90030 		ldrsh	r3, [r3]
 812 043e 9AB2     		uxth	r2, r3
 813 0440 174B     		ldr	r3, .L32+20
 814 0442 B3F90030 		ldrsh	r3, [r3]
 815 0446 9BB2     		uxth	r3, r3
 816 0448 1344     		add	r3, r3, r2
 817 044a 9BB2     		uxth	r3, r3
 818 044c 1AB2     		sxth	r2, r3
 819 044e 184B     		ldr	r3, .L32+36
 820 0450 1A80     		strh	r2, [r3]	@ movhi
 821 0452 0DE0     		b	.L29
 822              	.L23:
 180:../Sources/drive/drive.c ****     }
 181:../Sources/drive/drive.c ****   }
 182:../Sources/drive/drive.c ****   else {
 183:../Sources/drive/drive.c ****     valR = integR = devOldR = 0;
 823              		.loc 1 183 0
 824 0454 184B     		ldr	r3, .L32+44
 825 0456 0022     		movs	r2, #0
 826 0458 1A80     		strh	r2, [r3]	@ movhi
 827 045a 174B     		ldr	r3, .L32+44
 828 045c B3F90020 		ldrsh	r2, [r3]
 829 0460 134B     		ldr	r3, .L32+36
 830 0462 1A80     		strh	r2, [r3]	@ movhi
 831 0464 124B     		ldr	r3, .L32+36
 832 0466 B3F90030 		ldrsh	r3, [r3]
 833 046a 1A46     		mov	r2, r3
 834 046c 0E4B     		ldr	r3, .L32+28
 835 046e 1A60     		str	r2, [r3]
 836              	.L29:
 184:../Sources/drive/drive.c ****   }
 185:../Sources/drive/drive.c **** 
 186:../Sources/drive/drive.c ****   motorSetPwmLeft((int8_t)valL);
 837              		.loc 1 186 0
 838 0470 084B     		ldr	r3, .L32+8
 839 0472 1B68     		ldr	r3, [r3]
 840 0474 5BB2     		sxtb	r3, r3
 841 0476 1846     		mov	r0, r3
 842 0478 FFF7FEFF 		bl	motorSetPwmLeft
 187:../Sources/drive/drive.c ****   motorSetPwmRight((int8_t)valR);
 843              		.loc 1 187 0
 844 047c 0A4B     		ldr	r3, .L32+28
 845 047e 1B68     		ldr	r3, [r3]
 846 0480 5BB2     		sxtb	r3, r3
 847 0482 1846     		mov	r0, r3
 848 0484 FFF7FEFF 		bl	motorSetPwmRight
 188:../Sources/drive/drive.c **** }
 849              		.loc 1 188 0
 850 0488 00BF     		nop
 851 048a 98BD     		pop	{r3, r4, r7, pc}
 852              	.L33:
 853              		.align	2
 854              	.L32:
 855 048c 00000000 		.word	devOldL
 856 0490 00000000 		.word	integL
 857 0494 00000000 		.word	valL
 858 0498 00000000 		.word	setValueR.6766
 859 049c 00000000 		.word	speedRight.6764
 860 04a0 00000000 		.word	devR
 861 04a4 00000000 		.word	kpR
 862 04a8 00000000 		.word	valR
 863 04ac 00000000 		.word	kiR
 864 04b0 00000000 		.word	integR
 865 04b4 00000000 		.word	kdR
 866 04b8 00000000 		.word	devOldR
 867 04bc D34D6210 		.word	274877907
 868              		.cfi_endproc
 869              	.LFE127:
 871              		.section	.text.driveInit,"ax",%progbits
 872              		.align	1
 873              		.global	driveInit
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu fpv4-sp-d16
 879              	driveInit:
 880              	.LFB128:
 189:../Sources/drive/drive.c **** 
 190:../Sources/drive/drive.c **** 
 191:../Sources/drive/drive.c **** 
 192:../Sources/drive/drive.c **** void driveInit(void)
 193:../Sources/drive/drive.c **** {
 881              		.loc 1 193 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886 0000 80B4     		push	{r7}
 887              		.cfi_def_cfa_offset 4
 888              		.cfi_offset 7, -4
 889 0002 00AF     		add	r7, sp, #0
 890              		.cfi_def_cfa_register 7
 194:../Sources/drive/drive.c ****   kpL = kpR = 70;//80;
 891              		.loc 1 194 0
 892 0004 104B     		ldr	r3, .L35
 893 0006 4622     		movs	r2, #70
 894 0008 1A70     		strb	r2, [r3]
 895 000a 0F4B     		ldr	r3, .L35
 896 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 897 000e 0F4B     		ldr	r3, .L35+4
 898 0010 1A70     		strb	r2, [r3]
 195:../Sources/drive/drive.c ****   kiL = kiR = 20;//30;
 899              		.loc 1 195 0
 900 0012 0F4B     		ldr	r3, .L35+8
 901 0014 1422     		movs	r2, #20
 902 0016 1A70     		strb	r2, [r3]
 903 0018 0D4B     		ldr	r3, .L35+8
 904 001a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 905 001c 0D4B     		ldr	r3, .L35+12
 906 001e 1A70     		strb	r2, [r3]
 196:../Sources/drive/drive.c ****   kdL = kdR = 0;
 907              		.loc 1 196 0
 908 0020 0D4B     		ldr	r3, .L35+16
 909 0022 0022     		movs	r2, #0
 910 0024 1A70     		strb	r2, [r3]
 911 0026 0C4B     		ldr	r3, .L35+16
 912 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 913 002a 0C4B     		ldr	r3, .L35+20
 914 002c 1A70     		strb	r2, [r3]
 197:../Sources/drive/drive.c ****   setValueLeft = setValueRight = 00;  //30... 7sec 30m = 4cm/sec
 915              		.loc 1 197 0
 916 002e 0C4B     		ldr	r3, .L35+24
 917 0030 0022     		movs	r2, #0
 918 0032 1A80     		strh	r2, [r3]	@ movhi
 919 0034 0A4B     		ldr	r3, .L35+24
 920 0036 B3F90020 		ldrsh	r2, [r3]
 921 003a 0A4B     		ldr	r3, .L35+28
 922 003c 1A80     		strh	r2, [r3]	@ movhi
 198:../Sources/drive/drive.c **** }
 923              		.loc 1 198 0
 924 003e 00BF     		nop
 925 0040 BD46     		mov	sp, r7
 926              		.cfi_def_cfa_register 13
 927              		@ sp needed
 928 0042 5DF8047B 		ldr	r7, [sp], #4
 929              		.cfi_restore 7
 930              		.cfi_def_cfa_offset 0
 931 0046 7047     		bx	lr
 932              	.L36:
 933              		.align	2
 934              	.L35:
 935 0048 00000000 		.word	kpR
 936 004c 00000000 		.word	kpL
 937 0050 00000000 		.word	kiR
 938 0054 00000000 		.word	kiL
 939 0058 00000000 		.word	kdR
 940 005c 00000000 		.word	kdL
 941 0060 00000000 		.word	setValueRight
 942 0064 00000000 		.word	setValueLeft
 943              		.cfi_endproc
 944              	.LFE128:
 946              		.section	.bss.speedLeft.6763,"aw",%nobits
 947              		.align	1
 950              	speedLeft.6763:
 951 0000 0000     		.space	2
 952              		.section	.bss.speedRight.6764,"aw",%nobits
 953              		.align	1
 956              	speedRight.6764:
 957 0000 0000     		.space	2
 958              		.section	.bss.setValueR.6766,"aw",%nobits
 959              		.align	1
 962              	setValueR.6766:
 963 0000 0000     		.space	2
 964              		.section	.bss.setValueL.6765,"aw",%nobits
 965              		.align	1
 968              	setValueL.6765:
 969 0000 0000     		.space	2
 970              		.text
 971              	.Letext0:
 972              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 973              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 974              		.file 4 "../Includes/core_cm4.h"
 975              		.file 5 "../Includes/system_MK22F51212.h"
DEFINED SYMBOLS
                            *ABS*:00000000 drive.c
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:18     .bss.setValueLeft:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:21     .bss.setValueLeft:00000000 setValueLeft
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:24     .bss.setValueRight:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:27     .bss.setValueRight:00000000 setValueRight
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:32     .bss.kpL:00000000 kpL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:33     .bss.kpL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:37     .bss.kiL:00000000 kiL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:38     .bss.kiL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:42     .bss.kdL:00000000 kdL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:43     .bss.kdL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:47     .bss.kpR:00000000 kpR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:48     .bss.kpR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:52     .bss.kiR:00000000 kiR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:53     .bss.kiR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:57     .bss.kdR:00000000 kdR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:58     .bss.kdR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:60     .bss.integL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:63     .bss.integL:00000000 integL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:66     .bss.devL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:69     .bss.devL:00000000 devL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:72     .bss.devOldL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:75     .bss.devOldL:00000000 devOldL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:78     .bss.integR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:81     .bss.integR:00000000 integR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:84     .bss.devR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:87     .bss.devR:00000000 devR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:90     .bss.devOldR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:93     .bss.devOldR:00000000 devOldR
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:96     .bss.valL:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:99     .bss.valL:00000000 valL
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:102    .bss.valR:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:105    .bss.valR:00000000 valR
                            *COM*:00000200 sl
                            *COM*:00000200 sr
                            *COM*:00000001 sli
                            *COM*:00000001 sri
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:112    .text.driveSetSpeed:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:119    .text.driveSetSpeed:00000000 driveSetSpeed
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:195    .text.driveSetSpeed:0000006c $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:201    .text.driveSetParameters:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:208    .text.driveSetParameters:00000000 driveSetParameters
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:266    .text.driveSetParameters:00000040 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:274    .text.driveToWork:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:281    .text.driveToWork:00000000 driveToWork
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:627    .text.driveToWork:000002a8 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:950    .bss.speedLeft.6763:00000000 speedLeft.6763
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:956    .bss.speedRight.6764:00000000 speedRight.6764
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:962    .bss.setValueR.6766:00000000 setValueR.6766
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:968    .bss.setValueL.6765:00000000 setValueL.6765
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:647    .text.driveToWork:000002f0 $t
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:855    .text.driveToWork:0000048c $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:872    .text.driveInit:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:879    .text.driveInit:00000000 driveInit
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:935    .text.driveInit:00000048 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:947    .bss.speedLeft.6763:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:953    .bss.speedRight.6764:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:959    .bss.setValueR.6766:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc58KABG.s:965    .bss.setValueL.6765:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.a6d4f739a788c67292a3ea0a48d10bd5
                           .group:00000000 wm4.MK22F51212.h.96.792c303daa596f91c029224edd7c60aa
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.cf97d4c9a045ebab6d282f6356e11363
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.MK22F51212.h.109.eeee73bf5f54e3f06177795004b95e22
                           .group:00000000 wm4.core_cm4.h.43.f75e2f71b2e33f7a3db429cd8b0cae9e
                           .group:00000000 wm4.core_cmInstr.h.39.addda81f1f3453ba31dd54fc5b6fcee8
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.a59e218d30e39d114c8962bbad645c74
                           .group:00000000 wm4.system_MK22F51212.h.94.09b5fd63c227fb82ca8c370fba9e2334
                           .group:00000000 wm4.MK22F51212.h.369.5a9c5aa32d240e03ff494f1c769cfadf
                           .group:00000000 wm4.platform.h.20.5dba9aa78ee93a87b4214fc940da3bb4
                           .group:00000000 wm4.drive.h.17.103d27b5c8b69ef2b2867923fed3b65d
                           .group:00000000 wm4.motor.h.17.cf02e8017a4c3f5c3495abf75603565e

UNDEFINED SYMBOLS
quadGetSpeedLeft
quadGetSpeedRight
motorSetPwmLeft
motorSetPwmRight
